
robknob_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052f4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800548c  0800548c  0001548c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054a4  080054a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080054a4  080054a4  000154a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054ac  080054ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054ac  080054ac  000154ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054b0  080054b0  000154b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080054b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000000c  080054c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  080054c0  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012193  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000202f  00000000  00000000  000321cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00034200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  000352d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000385c  00000000  00000000  00036300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013250  00000000  00000000  00039b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea89  00000000  00000000  0004cdac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db835  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048bc  00000000  00000000  000db888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005474 	.word	0x08005474

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08005474 	.word	0x08005474

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fe9e 	bl	8001220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f834 	bl	8000550 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 fb64 	bl	8000bb4 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80004ec:	f000 f8a2 	bl	8000634 <_ZL12MX_I2C1_Initv>
  MX_I2C2_Init();
 80004f0:	f000 f8d4 	bl	800069c <_ZL12MX_I2C2_Initv>
  MX_SPI1_Init();
 80004f4:	f000 f906 	bl	8000704 <_ZL12MX_SPI1_Initv>
  MX_TIM1_Init();
 80004f8:	f000 f940 	bl	800077c <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 80004fc:	f000 fa8c 	bl	8000a18 <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 8000500:	f000 fb2a 	bl	8000b58 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8000504:	f000 fa2c 	bl	8000960 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000508:	480f      	ldr	r0, [pc, #60]	; (8000548 <main+0x6c>)
 800050a:	f003 fe4b 	bl	80041a4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800050e:	2100      	movs	r1, #0
 8000510:	480d      	ldr	r0, [pc, #52]	; (8000548 <main+0x6c>)
 8000512:	f003 fefb 	bl	800430c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000516:	2104      	movs	r1, #4
 8000518:	480b      	ldr	r0, [pc, #44]	; (8000548 <main+0x6c>)
 800051a:	f003 fef7 	bl	800430c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800051e:	2108      	movs	r1, #8
 8000520:	4809      	ldr	r0, [pc, #36]	; (8000548 <main+0x6c>)
 8000522:	f003 fef3 	bl	800430c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000526:	210c      	movs	r1, #12
 8000528:	4807      	ldr	r0, [pc, #28]	; (8000548 <main+0x6c>)
 800052a:	f003 feef 	bl	800430c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim3);
 800052e:	4807      	ldr	r0, [pc, #28]	; (800054c <main+0x70>)
 8000530:	f003 fe38 	bl	80041a4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000534:	2100      	movs	r1, #0
 8000536:	4805      	ldr	r0, [pc, #20]	; (800054c <main+0x70>)
 8000538:	f003 fee8 	bl	800430c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800053c:	2104      	movs	r1, #4
 800053e:	4803      	ldr	r0, [pc, #12]	; (800054c <main+0x70>)
 8000540:	f003 fee4 	bl	800430c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	e7fe      	b.n	8000544 <main+0x68>
 8000546:	bf00      	nop
 8000548:	20000128 	.word	0x20000128
 800054c:	200001b8 	.word	0x200001b8

08000550 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2230      	movs	r2, #48	; 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f004 ff80 	bl	8005464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	4b2c      	ldr	r3, [pc, #176]	; (800062c <_Z18SystemClock_Configv+0xdc>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a2b      	ldr	r2, [pc, #172]	; (800062c <_Z18SystemClock_Configv+0xdc>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b29      	ldr	r3, [pc, #164]	; (800062c <_Z18SystemClock_Configv+0xdc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b26      	ldr	r3, [pc, #152]	; (8000630 <_Z18SystemClock_Configv+0xe0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a25      	ldr	r2, [pc, #148]	; (8000630 <_Z18SystemClock_Configv+0xe0>)
 800059a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b23      	ldr	r3, [pc, #140]	; (8000630 <_Z18SystemClock_Configv+0xe0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ac:	2302      	movs	r3, #2
 80005ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b4:	2310      	movs	r3, #16
 80005b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b8:	2302      	movs	r3, #2
 80005ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005bc:	2300      	movs	r3, #0
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c0:	2308      	movs	r3, #8
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80005c4:	2364      	movs	r3, #100	; 0x64
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005cc:	2304      	movs	r3, #4
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 ff95 	bl	8003504 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	bf14      	ite	ne
 80005e0:	2301      	movne	r3, #1
 80005e2:	2300      	moveq	r3, #0
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80005ea:	f000 fb43 	bl	8000c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2302      	movs	r3, #2
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2103      	movs	r1, #3
 800060a:	4618      	mov	r0, r3
 800060c:	f003 f9f2 	bl	80039f4 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	bf14      	ite	ne
 8000616:	2301      	movne	r3, #1
 8000618:	2300      	moveq	r3, #0
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000620:	f000 fb28 	bl	8000c74 <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	3750      	adds	r7, #80	; 0x50
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <_ZL12MX_I2C1_Initv+0x5c>)
 800063a:	4a16      	ldr	r2, [pc, #88]	; (8000694 <_ZL12MX_I2C1_Initv+0x60>)
 800063c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <_ZL12MX_I2C1_Initv+0x5c>)
 8000640:	4a15      	ldr	r2, [pc, #84]	; (8000698 <_ZL12MX_I2C1_Initv+0x64>)
 8000642:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <_ZL12MX_I2C1_Initv+0x5c>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <_ZL12MX_I2C1_Initv+0x5c>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <_ZL12MX_I2C1_Initv+0x5c>)
 8000652:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000656:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <_ZL12MX_I2C1_Initv+0x5c>)
 800065a:	2200      	movs	r2, #0
 800065c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <_ZL12MX_I2C1_Initv+0x5c>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <_ZL12MX_I2C1_Initv+0x5c>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <_ZL12MX_I2C1_Initv+0x5c>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000670:	4807      	ldr	r0, [pc, #28]	; (8000690 <_ZL12MX_I2C1_Initv+0x5c>)
 8000672:	f001 f927 	bl	80018c4 <HAL_I2C_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	bf14      	ite	ne
 800067c:	2301      	movne	r3, #1
 800067e:	2300      	moveq	r3, #0
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000686:	f000 faf5 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000028 	.word	0x20000028
 8000694:	40005400 	.word	0x40005400
 8000698:	00061a80 	.word	0x00061a80

0800069c <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <_ZL12MX_I2C2_Initv+0x5c>)
 80006a2:	4a16      	ldr	r2, [pc, #88]	; (80006fc <_ZL12MX_I2C2_Initv+0x60>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <_ZL12MX_I2C2_Initv+0x5c>)
 80006a8:	4a15      	ldr	r2, [pc, #84]	; (8000700 <_ZL12MX_I2C2_Initv+0x64>)
 80006aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <_ZL12MX_I2C2_Initv+0x5c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <_ZL12MX_I2C2_Initv+0x5c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <_ZL12MX_I2C2_Initv+0x5c>)
 80006ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c0:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <_ZL12MX_I2C2_Initv+0x5c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <_ZL12MX_I2C2_Initv+0x5c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <_ZL12MX_I2C2_Initv+0x5c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <_ZL12MX_I2C2_Initv+0x5c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006d8:	4807      	ldr	r0, [pc, #28]	; (80006f8 <_ZL12MX_I2C2_Initv+0x5c>)
 80006da:	f001 f8f3 	bl	80018c4 <HAL_I2C_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	bf14      	ite	ne
 80006e4:	2301      	movne	r3, #1
 80006e6:	2300      	moveq	r3, #0
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 80006ee:	f000 fac1 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000007c 	.word	0x2000007c
 80006fc:	40005800 	.word	0x40005800
 8000700:	00061a80 	.word	0x00061a80

08000704 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000708:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <_ZL12MX_SPI1_Initv+0x70>)
 800070a:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <_ZL12MX_SPI1_Initv+0x74>)
 800070c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <_ZL12MX_SPI1_Initv+0x70>)
 8000710:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000714:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <_ZL12MX_SPI1_Initv+0x70>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <_ZL12MX_SPI1_Initv+0x70>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <_ZL12MX_SPI1_Initv+0x70>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <_ZL12MX_SPI1_Initv+0x70>)
 800072a:	2201      	movs	r2, #1
 800072c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <_ZL12MX_SPI1_Initv+0x70>)
 8000730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000734:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <_ZL12MX_SPI1_Initv+0x70>)
 8000738:	2200      	movs	r2, #0
 800073a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <_ZL12MX_SPI1_Initv+0x70>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <_ZL12MX_SPI1_Initv+0x70>)
 8000744:	2200      	movs	r2, #0
 8000746:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <_ZL12MX_SPI1_Initv+0x70>)
 800074a:	2200      	movs	r2, #0
 800074c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <_ZL12MX_SPI1_Initv+0x70>)
 8000750:	220a      	movs	r2, #10
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000754:	4807      	ldr	r0, [pc, #28]	; (8000774 <_ZL12MX_SPI1_Initv+0x70>)
 8000756:	f003 fb2d 	bl	8003db4 <HAL_SPI_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	bf14      	ite	ne
 8000760:	2301      	movne	r3, #1
 8000762:	2300      	moveq	r3, #0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800076a:	f000 fa83 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200000d0 	.word	0x200000d0
 8000778:	40013000 	.word	0x40013000

0800077c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b096      	sub	sp, #88	; 0x58
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000782:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000790:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800079a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
 80007aa:	615a      	str	r2, [r3, #20]
 80007ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2220      	movs	r2, #32
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f004 fe55 	bl	8005464 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007ba:	4b67      	ldr	r3, [pc, #412]	; (8000958 <_ZL12MX_TIM1_Initv+0x1dc>)
 80007bc:	4a67      	ldr	r2, [pc, #412]	; (800095c <_ZL12MX_TIM1_Initv+0x1e0>)
 80007be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 80007c0:	4b65      	ldr	r3, [pc, #404]	; (8000958 <_ZL12MX_TIM1_Initv+0x1dc>)
 80007c2:	2209      	movs	r2, #9
 80007c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c6:	4b64      	ldr	r3, [pc, #400]	; (8000958 <_ZL12MX_TIM1_Initv+0x1dc>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 80007cc:	4b62      	ldr	r3, [pc, #392]	; (8000958 <_ZL12MX_TIM1_Initv+0x1dc>)
 80007ce:	f240 12f3 	movw	r2, #499	; 0x1f3
 80007d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d4:	4b60      	ldr	r3, [pc, #384]	; (8000958 <_ZL12MX_TIM1_Initv+0x1dc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007da:	4b5f      	ldr	r3, [pc, #380]	; (8000958 <_ZL12MX_TIM1_Initv+0x1dc>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e0:	4b5d      	ldr	r3, [pc, #372]	; (8000958 <_ZL12MX_TIM1_Initv+0x1dc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007e6:	485c      	ldr	r0, [pc, #368]	; (8000958 <_ZL12MX_TIM1_Initv+0x1dc>)
 80007e8:	f003 fc8c 	bl	8004104 <HAL_TIM_Base_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	bf14      	ite	ne
 80007f2:	2301      	movne	r3, #1
 80007f4:	2300      	moveq	r3, #0
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 80007fc:	f000 fa3a 	bl	8000c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000806:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800080a:	4619      	mov	r1, r3
 800080c:	4852      	ldr	r0, [pc, #328]	; (8000958 <_ZL12MX_TIM1_Initv+0x1dc>)
 800080e:	f003 feef 	bl	80045f0 <HAL_TIM_ConfigClockSource>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf14      	ite	ne
 8000818:	2301      	movne	r3, #1
 800081a:	2300      	moveq	r3, #0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 8000822:	f000 fa27 	bl	8000c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000826:	484c      	ldr	r0, [pc, #304]	; (8000958 <_ZL12MX_TIM1_Initv+0x1dc>)
 8000828:	f003 fd16 	bl	8004258 <HAL_TIM_PWM_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	bf14      	ite	ne
 8000832:	2301      	movne	r3, #1
 8000834:	2300      	moveq	r3, #0
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 800083c:	f000 fa1a 	bl	8000c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000840:	2300      	movs	r3, #0
 8000842:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000848:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800084c:	4619      	mov	r1, r3
 800084e:	4842      	ldr	r0, [pc, #264]	; (8000958 <_ZL12MX_TIM1_Initv+0x1dc>)
 8000850:	f004 fa62 	bl	8004d18 <HAL_TIMEx_MasterConfigSynchronization>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	bf14      	ite	ne
 800085a:	2301      	movne	r3, #1
 800085c:	2300      	moveq	r3, #0
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 8000864:	f000 fa06 	bl	8000c74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000868:	2360      	movs	r3, #96	; 0x60
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000870:	2300      	movs	r3, #0
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000874:	2300      	movs	r3, #0
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800087c:	2300      	movs	r3, #0
 800087e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000880:	2300      	movs	r3, #0
 8000882:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000888:	2200      	movs	r2, #0
 800088a:	4619      	mov	r1, r3
 800088c:	4832      	ldr	r0, [pc, #200]	; (8000958 <_ZL12MX_TIM1_Initv+0x1dc>)
 800088e:	f003 fded 	bl	800446c <HAL_TIM_PWM_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	bf14      	ite	ne
 8000898:	2301      	movne	r3, #1
 800089a:	2300      	moveq	r3, #0
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 80008a2:	f000 f9e7 	bl	8000c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008aa:	2204      	movs	r2, #4
 80008ac:	4619      	mov	r1, r3
 80008ae:	482a      	ldr	r0, [pc, #168]	; (8000958 <_ZL12MX_TIM1_Initv+0x1dc>)
 80008b0:	f003 fddc 	bl	800446c <HAL_TIM_PWM_ConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bf14      	ite	ne
 80008ba:	2301      	movne	r3, #1
 80008bc:	2300      	moveq	r3, #0
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 80008c4:	f000 f9d6 	bl	8000c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008cc:	2208      	movs	r2, #8
 80008ce:	4619      	mov	r1, r3
 80008d0:	4821      	ldr	r0, [pc, #132]	; (8000958 <_ZL12MX_TIM1_Initv+0x1dc>)
 80008d2:	f003 fdcb 	bl	800446c <HAL_TIM_PWM_ConfigChannel>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	bf14      	ite	ne
 80008dc:	2301      	movne	r3, #1
 80008de:	2300      	moveq	r3, #0
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 80008e6:	f000 f9c5 	bl	8000c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ee:	220c      	movs	r2, #12
 80008f0:	4619      	mov	r1, r3
 80008f2:	4819      	ldr	r0, [pc, #100]	; (8000958 <_ZL12MX_TIM1_Initv+0x1dc>)
 80008f4:	f003 fdba 	bl	800446c <HAL_TIM_PWM_ConfigChannel>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	bf14      	ite	ne
 80008fe:	2301      	movne	r3, #1
 8000900:	2300      	moveq	r3, #0
 8000902:	b2db      	uxtb	r3, r3
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <_ZL12MX_TIM1_Initv+0x190>
  {
    Error_Handler();
 8000908:	f000 f9b4 	bl	8000c74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000924:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4619      	mov	r1, r3
 800092e:	480a      	ldr	r0, [pc, #40]	; (8000958 <_ZL12MX_TIM1_Initv+0x1dc>)
 8000930:	f004 fa60 	bl	8004df4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	bf14      	ite	ne
 800093a:	2301      	movne	r3, #1
 800093c:	2300      	moveq	r3, #0
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <_ZL12MX_TIM1_Initv+0x1cc>
  {
    Error_Handler();
 8000944:	f000 f996 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000948:	4803      	ldr	r0, [pc, #12]	; (8000958 <_ZL12MX_TIM1_Initv+0x1dc>)
 800094a:	f000 fb29 	bl	8000fa0 <HAL_TIM_MspPostInit>

}
 800094e:	bf00      	nop
 8000950:	3758      	adds	r7, #88	; 0x58
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000128 	.word	0x20000128
 800095c:	40010000 	.word	0x40010000

08000960 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	463b      	mov	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800097c:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <_ZL12MX_TIM2_Initv+0xb4>)
 800097e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000982:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000984:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <_ZL12MX_TIM2_Initv+0xb4>)
 8000986:	2263      	movs	r2, #99	; 0x63
 8000988:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <_ZL12MX_TIM2_Initv+0xb4>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000990:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <_ZL12MX_TIM2_Initv+0xb4>)
 8000992:	f04f 32ff 	mov.w	r2, #4294967295
 8000996:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <_ZL12MX_TIM2_Initv+0xb4>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <_ZL12MX_TIM2_Initv+0xb4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009a4:	481b      	ldr	r0, [pc, #108]	; (8000a14 <_ZL12MX_TIM2_Initv+0xb4>)
 80009a6:	f003 fbad 	bl	8004104 <HAL_TIM_Base_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	bf14      	ite	ne
 80009b0:	2301      	movne	r3, #1
 80009b2:	2300      	moveq	r3, #0
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 80009ba:	f000 f95b 	bl	8000c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009c4:	f107 0308 	add.w	r3, r7, #8
 80009c8:	4619      	mov	r1, r3
 80009ca:	4812      	ldr	r0, [pc, #72]	; (8000a14 <_ZL12MX_TIM2_Initv+0xb4>)
 80009cc:	f003 fe10 	bl	80045f0 <HAL_TIM_ConfigClockSource>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	bf14      	ite	ne
 80009d6:	2301      	movne	r3, #1
 80009d8:	2300      	moveq	r3, #0
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 80009e0:	f000 f948 	bl	8000c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ec:	463b      	mov	r3, r7
 80009ee:	4619      	mov	r1, r3
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <_ZL12MX_TIM2_Initv+0xb4>)
 80009f2:	f004 f991 	bl	8004d18 <HAL_TIMEx_MasterConfigSynchronization>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	bf14      	ite	ne
 80009fc:	2301      	movne	r3, #1
 80009fe:	2300      	moveq	r3, #0
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8000a06:	f000 f935 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000170 	.word	0x20000170

08000a18 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08e      	sub	sp, #56	; 0x38
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2c:	f107 0320 	add.w	r3, r7, #32
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
 8000a44:	615a      	str	r2, [r3, #20]
 8000a46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a48:	4b41      	ldr	r3, [pc, #260]	; (8000b50 <_ZL12MX_TIM3_Initv+0x138>)
 8000a4a:	4a42      	ldr	r2, [pc, #264]	; (8000b54 <_ZL12MX_TIM3_Initv+0x13c>)
 8000a4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8000a4e:	4b40      	ldr	r3, [pc, #256]	; (8000b50 <_ZL12MX_TIM3_Initv+0x138>)
 8000a50:	2209      	movs	r2, #9
 8000a52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a54:	4b3e      	ldr	r3, [pc, #248]	; (8000b50 <_ZL12MX_TIM3_Initv+0x138>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8000a5a:	4b3d      	ldr	r3, [pc, #244]	; (8000b50 <_ZL12MX_TIM3_Initv+0x138>)
 8000a5c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000a60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a62:	4b3b      	ldr	r3, [pc, #236]	; (8000b50 <_ZL12MX_TIM3_Initv+0x138>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a68:	4b39      	ldr	r3, [pc, #228]	; (8000b50 <_ZL12MX_TIM3_Initv+0x138>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a6e:	4838      	ldr	r0, [pc, #224]	; (8000b50 <_ZL12MX_TIM3_Initv+0x138>)
 8000a70:	f003 fb48 	bl	8004104 <HAL_TIM_Base_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	bf14      	ite	ne
 8000a7a:	2301      	movne	r3, #1
 8000a7c:	2300      	moveq	r3, #0
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8000a84:	f000 f8f6 	bl	8000c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a92:	4619      	mov	r1, r3
 8000a94:	482e      	ldr	r0, [pc, #184]	; (8000b50 <_ZL12MX_TIM3_Initv+0x138>)
 8000a96:	f003 fdab 	bl	80045f0 <HAL_TIM_ConfigClockSource>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	bf14      	ite	ne
 8000aa0:	2301      	movne	r3, #1
 8000aa2:	2300      	moveq	r3, #0
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8000aaa:	f000 f8e3 	bl	8000c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000aae:	4828      	ldr	r0, [pc, #160]	; (8000b50 <_ZL12MX_TIM3_Initv+0x138>)
 8000ab0:	f003 fbd2 	bl	8004258 <HAL_TIM_PWM_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	bf14      	ite	ne
 8000aba:	2301      	movne	r3, #1
 8000abc:	2300      	moveq	r3, #0
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8000ac4:	f000 f8d6 	bl	8000c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ad0:	f107 0320 	add.w	r3, r7, #32
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	481e      	ldr	r0, [pc, #120]	; (8000b50 <_ZL12MX_TIM3_Initv+0x138>)
 8000ad8:	f004 f91e 	bl	8004d18 <HAL_TIMEx_MasterConfigSynchronization>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	bf14      	ite	ne
 8000ae2:	2301      	movne	r3, #1
 8000ae4:	2300      	moveq	r3, #0
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8000aec:	f000 f8c2 	bl	8000c74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af0:	2360      	movs	r3, #96	; 0x60
 8000af2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2200      	movs	r2, #0
 8000b04:	4619      	mov	r1, r3
 8000b06:	4812      	ldr	r0, [pc, #72]	; (8000b50 <_ZL12MX_TIM3_Initv+0x138>)
 8000b08:	f003 fcb0 	bl	800446c <HAL_TIM_PWM_ConfigChannel>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	bf14      	ite	ne
 8000b12:	2301      	movne	r3, #1
 8000b14:	2300      	moveq	r3, #0
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8000b1c:	f000 f8aa 	bl	8000c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2204      	movs	r2, #4
 8000b24:	4619      	mov	r1, r3
 8000b26:	480a      	ldr	r0, [pc, #40]	; (8000b50 <_ZL12MX_TIM3_Initv+0x138>)
 8000b28:	f003 fca0 	bl	800446c <HAL_TIM_PWM_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	bf14      	ite	ne
 8000b32:	2301      	movne	r3, #1
 8000b34:	2300      	moveq	r3, #0
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 8000b3c:	f000 f89a 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b40:	4803      	ldr	r0, [pc, #12]	; (8000b50 <_ZL12MX_TIM3_Initv+0x138>)
 8000b42:	f000 fa2d 	bl	8000fa0 <HAL_TIM_MspPostInit>

}
 8000b46:	bf00      	nop
 8000b48:	3738      	adds	r7, #56	; 0x38
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200001b8 	.word	0x200001b8
 8000b54:	40000400 	.word	0x40000400

08000b58 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b5e:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b8e:	4807      	ldr	r0, [pc, #28]	; (8000bac <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b90:	f004 f982 	bl	8004e98 <HAL_UART_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	bf14      	ite	ne
 8000b9a:	2301      	movne	r3, #1
 8000b9c:	2300      	moveq	r3, #0
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000ba4:	f000 f866 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000200 	.word	0x20000200
 8000bb0:	40004400 	.word	0x40004400

08000bb4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <_ZL12MX_GPIO_Initv+0xb4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a25      	ldr	r2, [pc, #148]	; (8000c68 <_ZL12MX_GPIO_Initv+0xb4>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <_ZL12MX_GPIO_Initv+0xb4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <_ZL12MX_GPIO_Initv+0xb4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a1e      	ldr	r2, [pc, #120]	; (8000c68 <_ZL12MX_GPIO_Initv+0xb4>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <_ZL12MX_GPIO_Initv+0xb4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c08:	4818      	ldr	r0, [pc, #96]	; (8000c6c <_ZL12MX_GPIO_Initv+0xb8>)
 8000c0a:	f000 fe41 	bl	8001890 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4813      	ldr	r0, [pc, #76]	; (8000c70 <_ZL12MX_GPIO_Initv+0xbc>)
 8000c22:	f000 fcb1 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480c      	ldr	r0, [pc, #48]	; (8000c6c <_ZL12MX_GPIO_Initv+0xb8>)
 8000c3c:	f000 fca4 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	4619      	mov	r1, r3
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <_ZL12MX_GPIO_Initv+0xb8>)
 8000c5a:	f000 fc95 	bl	8001588 <HAL_GPIO_Init>

}
 8000c5e:	bf00      	nop
 8000c60:	3720      	adds	r7, #32
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020000 	.word	0x40020000
 8000c70:	40020400 	.word	0x40020400

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <Error_Handler+0x8>
	...

08000c80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <HAL_MspInit+0x4c>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ccc <HAL_MspInit+0x4c>)
 8000c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c94:	6453      	str	r3, [r2, #68]	; 0x44
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_MspInit+0x4c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_MspInit+0x4c>)
 8000cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08c      	sub	sp, #48	; 0x30
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a4a      	ldr	r2, [pc, #296]	; (8000e18 <HAL_I2C_MspInit+0x148>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d13c      	bne.n	8000d6c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
 8000cf6:	4b49      	ldr	r3, [pc, #292]	; (8000e1c <HAL_I2C_MspInit+0x14c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a48      	ldr	r2, [pc, #288]	; (8000e1c <HAL_I2C_MspInit+0x14c>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b46      	ldr	r3, [pc, #280]	; (8000e1c <HAL_I2C_MspInit+0x14c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d0e:	23c0      	movs	r3, #192	; 0xc0
 8000d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d12:	2312      	movs	r3, #18
 8000d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	4619      	mov	r1, r3
 8000d28:	483d      	ldr	r0, [pc, #244]	; (8000e20 <HAL_I2C_MspInit+0x150>)
 8000d2a:	f000 fc2d 	bl	8001588 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	4b3a      	ldr	r3, [pc, #232]	; (8000e1c <HAL_I2C_MspInit+0x14c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a39      	ldr	r2, [pc, #228]	; (8000e1c <HAL_I2C_MspInit+0x14c>)
 8000d38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b37      	ldr	r3, [pc, #220]	; (8000e1c <HAL_I2C_MspInit+0x14c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	201f      	movs	r0, #31
 8000d50:	f000 fbb3 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d54:	201f      	movs	r0, #31
 8000d56:	f000 fbcc 	bl	80014f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2020      	movs	r0, #32
 8000d60:	f000 fbab 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d64:	2020      	movs	r0, #32
 8000d66:	f000 fbc4 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d6a:	e051      	b.n	8000e10 <HAL_I2C_MspInit+0x140>
  else if(hi2c->Instance==I2C2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a2c      	ldr	r2, [pc, #176]	; (8000e24 <HAL_I2C_MspInit+0x154>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d14c      	bne.n	8000e10 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <HAL_I2C_MspInit+0x14c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a27      	ldr	r2, [pc, #156]	; (8000e1c <HAL_I2C_MspInit+0x14c>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <HAL_I2C_MspInit+0x14c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d98:	2312      	movs	r3, #18
 8000d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000da4:	2304      	movs	r3, #4
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	481c      	ldr	r0, [pc, #112]	; (8000e20 <HAL_I2C_MspInit+0x150>)
 8000db0:	f000 fbea 	bl	8001588 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000db4:	2308      	movs	r3, #8
 8000db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db8:	2312      	movs	r3, #18
 8000dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000dc4:	2309      	movs	r3, #9
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4814      	ldr	r0, [pc, #80]	; (8000e20 <HAL_I2C_MspInit+0x150>)
 8000dd0:	f000 fbda 	bl	8001588 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <HAL_I2C_MspInit+0x14c>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	4a0f      	ldr	r2, [pc, #60]	; (8000e1c <HAL_I2C_MspInit+0x14c>)
 8000dde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000de2:	6413      	str	r3, [r2, #64]	; 0x40
 8000de4:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <HAL_I2C_MspInit+0x14c>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2100      	movs	r1, #0
 8000df4:	2021      	movs	r0, #33	; 0x21
 8000df6:	f000 fb60 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000dfa:	2021      	movs	r0, #33	; 0x21
 8000dfc:	f000 fb79 	bl	80014f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	2022      	movs	r0, #34	; 0x22
 8000e06:	f000 fb58 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000e0a:	2022      	movs	r0, #34	; 0x22
 8000e0c:	f000 fb71 	bl	80014f2 <HAL_NVIC_EnableIRQ>
}
 8000e10:	bf00      	nop
 8000e12:	3730      	adds	r7, #48	; 0x30
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40005400 	.word	0x40005400
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020400 	.word	0x40020400
 8000e24:	40005800 	.word	0x40005800

08000e28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a2c      	ldr	r2, [pc, #176]	; (8000ef8 <HAL_SPI_MspInit+0xd0>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d151      	bne.n	8000eee <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <HAL_SPI_MspInit+0xd4>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	4a2a      	ldr	r2, [pc, #168]	; (8000efc <HAL_SPI_MspInit+0xd4>)
 8000e54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e58:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5a:	4b28      	ldr	r3, [pc, #160]	; (8000efc <HAL_SPI_MspInit+0xd4>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b24      	ldr	r3, [pc, #144]	; (8000efc <HAL_SPI_MspInit+0xd4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a23      	ldr	r2, [pc, #140]	; (8000efc <HAL_SPI_MspInit+0xd4>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <HAL_SPI_MspInit+0xd4>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <HAL_SPI_MspInit+0xd4>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a1c      	ldr	r2, [pc, #112]	; (8000efc <HAL_SPI_MspInit+0xd4>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <HAL_SPI_MspInit+0xd4>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e9e:	2320      	movs	r3, #32
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eae:	2305      	movs	r3, #5
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4811      	ldr	r0, [pc, #68]	; (8000f00 <HAL_SPI_MspInit+0xd8>)
 8000eba:	f000 fb65 	bl	8001588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ebe:	2330      	movs	r3, #48	; 0x30
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ece:	2305      	movs	r3, #5
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480a      	ldr	r0, [pc, #40]	; (8000f04 <HAL_SPI_MspInit+0xdc>)
 8000eda:	f000 fb55 	bl	8001588 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2023      	movs	r0, #35	; 0x23
 8000ee4:	f000 fae9 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ee8:	2023      	movs	r0, #35	; 0x23
 8000eea:	f000 fb02 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eee:	bf00      	nop
 8000ef0:	3728      	adds	r7, #40	; 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40013000 	.word	0x40013000
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020000 	.word	0x40020000
 8000f04:	40020400 	.word	0x40020400

08000f08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b087      	sub	sp, #28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a1f      	ldr	r2, [pc, #124]	; (8000f94 <HAL_TIM_Base_MspInit+0x8c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d10e      	bne.n	8000f38 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <HAL_TIM_Base_MspInit+0x90>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	4a1d      	ldr	r2, [pc, #116]	; (8000f98 <HAL_TIM_Base_MspInit+0x90>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <HAL_TIM_Base_MspInit+0x90>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f36:	e026      	b.n	8000f86 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f40:	d10e      	bne.n	8000f60 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <HAL_TIM_Base_MspInit+0x90>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	4a13      	ldr	r2, [pc, #76]	; (8000f98 <HAL_TIM_Base_MspInit+0x90>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6413      	str	r3, [r2, #64]	; 0x40
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_TIM_Base_MspInit+0x90>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
}
 8000f5e:	e012      	b.n	8000f86 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <HAL_TIM_Base_MspInit+0x94>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d10d      	bne.n	8000f86 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_TIM_Base_MspInit+0x90>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <HAL_TIM_Base_MspInit+0x90>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <HAL_TIM_Base_MspInit+0x90>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
}
 8000f86:	bf00      	nop
 8000f88:	371c      	adds	r7, #28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40010000 	.word	0x40010000
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40000400 	.word	0x40000400

08000fa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a24      	ldr	r2, [pc, #144]	; (8001050 <HAL_TIM_MspPostInit+0xb0>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d11f      	bne.n	8001002 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	4b23      	ldr	r3, [pc, #140]	; (8001054 <HAL_TIM_MspPostInit+0xb4>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a22      	ldr	r2, [pc, #136]	; (8001054 <HAL_TIM_MspPostInit+0xb4>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b20      	ldr	r3, [pc, #128]	; (8001054 <HAL_TIM_MspPostInit+0xb4>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000fde:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4817      	ldr	r0, [pc, #92]	; (8001058 <HAL_TIM_MspPostInit+0xb8>)
 8000ffc:	f000 fac4 	bl	8001588 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001000:	e022      	b.n	8001048 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a15      	ldr	r2, [pc, #84]	; (800105c <HAL_TIM_MspPostInit+0xbc>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d11d      	bne.n	8001048 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_TIM_MspPostInit+0xb4>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	4a0f      	ldr	r2, [pc, #60]	; (8001054 <HAL_TIM_MspPostInit+0xb4>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6313      	str	r3, [r2, #48]	; 0x30
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <HAL_TIM_MspPostInit+0xb4>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001028:	23c0      	movs	r3, #192	; 0xc0
 800102a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001038:	2302      	movs	r3, #2
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <HAL_TIM_MspPostInit+0xb8>)
 8001044:	f000 faa0 	bl	8001588 <HAL_GPIO_Init>
}
 8001048:	bf00      	nop
 800104a:	3728      	adds	r7, #40	; 0x28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40010000 	.word	0x40010000
 8001054:	40023800 	.word	0x40023800
 8001058:	40020000 	.word	0x40020000
 800105c:	40000400 	.word	0x40000400

08001060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <HAL_UART_MspInit+0x84>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d12b      	bne.n	80010da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <HAL_UART_MspInit+0x88>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <HAL_UART_MspInit+0x88>)
 800108c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001090:	6413      	str	r3, [r2, #64]	; 0x40
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <HAL_UART_MspInit+0x88>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_UART_MspInit+0x88>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <HAL_UART_MspInit+0x88>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_UART_MspInit+0x88>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010ba:	230c      	movs	r3, #12
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ca:	2307      	movs	r3, #7
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <HAL_UART_MspInit+0x8c>)
 80010d6:	f000 fa57 	bl	8001588 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010da:	bf00      	nop
 80010dc:	3728      	adds	r7, #40	; 0x28
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40004400 	.word	0x40004400
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020000 	.word	0x40020000

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <NMI_Handler+0x4>

080010f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <MemManage_Handler+0x4>

08001102 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <UsageFault_Handler+0x4>

0800110e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113c:	f000 f8c2 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}

08001144 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <I2C1_EV_IRQHandler+0x10>)
 800114a:	f000 fcff 	bl	8001b4c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000028 	.word	0x20000028

08001158 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <I2C1_ER_IRQHandler+0x10>)
 800115e:	f000 fe66 	bl	8001e2e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000028 	.word	0x20000028

0800116c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <I2C2_EV_IRQHandler+0x10>)
 8001172:	f000 fceb 	bl	8001b4c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000007c 	.word	0x2000007c

08001180 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <I2C2_ER_IRQHandler+0x10>)
 8001186:	f000 fe52 	bl	8001e2e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2000007c 	.word	0x2000007c

08001194 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <SPI1_IRQHandler+0x10>)
 800119a:	f002 fe95 	bl	8003ec8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200000d0 	.word	0x200000d0

080011a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <SystemInit+0x20>)
 80011ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b2:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <SystemInit+0x20>)
 80011b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001204 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d0:	480d      	ldr	r0, [pc, #52]	; (8001208 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011d2:	490e      	ldr	r1, [pc, #56]	; (800120c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d4:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d8:	e002      	b.n	80011e0 <LoopCopyDataInit>

080011da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011de:	3304      	adds	r3, #4

080011e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e4:	d3f9      	bcc.n	80011da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e6:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e8:	4c0b      	ldr	r4, [pc, #44]	; (8001218 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ec:	e001      	b.n	80011f2 <LoopFillZerobss>

080011ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f0:	3204      	adds	r2, #4

080011f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f4:	d3fb      	bcc.n	80011ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011f6:	f7ff ffd7 	bl	80011a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011fa:	f004 f90f 	bl	800541c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fe:	f7ff f96d 	bl	80004dc <main>
  bx  lr    
 8001202:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001204:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800120c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001210:	080054b4 	.word	0x080054b4
  ldr r2, =_sbss
 8001214:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001218:	20000248 	.word	0x20000248

0800121c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800121c:	e7fe      	b.n	800121c <ADC_IRQHandler>
	...

08001220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <HAL_Init+0x40>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <HAL_Init+0x40>)
 800122a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <HAL_Init+0x40>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <HAL_Init+0x40>)
 8001236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800123a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <HAL_Init+0x40>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_Init+0x40>)
 8001242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001246:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001248:	2003      	movs	r0, #3
 800124a:	f000 f92b 	bl	80014a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124e:	200f      	movs	r0, #15
 8001250:	f000 f808 	bl	8001264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001254:	f7ff fd14 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023c00 	.word	0x40023c00

08001264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x54>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_InitTick+0x58>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f943 	bl	800150e <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00e      	b.n	80012b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d80a      	bhi.n	80012ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f000 f90b 	bl	80014ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_InitTick+0x5c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e000      	b.n	80012b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000008 	.word	0x20000008
 80012c0:	20000004 	.word	0x20000004

080012c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x20>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x24>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_IncTick+0x24>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000008 	.word	0x20000008
 80012e8:	20000244 	.word	0x20000244

080012ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_GetTick+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000244 	.word	0x20000244

08001304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001320:	4013      	ands	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800132c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <__NVIC_GetPriorityGrouping+0x18>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	f003 0307 	and.w	r3, r3, #7
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db0b      	blt.n	8001392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	f003 021f 	and.w	r2, r3, #31
 8001380:	4907      	ldr	r1, [pc, #28]	; (80013a0 <__NVIC_EnableIRQ+0x38>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	2001      	movs	r0, #1
 800138a:	fa00 f202 	lsl.w	r2, r0, r2
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000e100 	.word	0xe000e100

080013a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	db0a      	blt.n	80013ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	490c      	ldr	r1, [pc, #48]	; (80013f0 <__NVIC_SetPriority+0x4c>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	0112      	lsls	r2, r2, #4
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	440b      	add	r3, r1
 80013c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013cc:	e00a      	b.n	80013e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4908      	ldr	r1, [pc, #32]	; (80013f4 <__NVIC_SetPriority+0x50>)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	3b04      	subs	r3, #4
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	440b      	add	r3, r1
 80013e2:	761a      	strb	r2, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000e100 	.word	0xe000e100
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f1c3 0307 	rsb	r3, r3, #7
 8001412:	2b04      	cmp	r3, #4
 8001414:	bf28      	it	cs
 8001416:	2304      	movcs	r3, #4
 8001418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3304      	adds	r3, #4
 800141e:	2b06      	cmp	r3, #6
 8001420:	d902      	bls.n	8001428 <NVIC_EncodePriority+0x30>
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3b03      	subs	r3, #3
 8001426:	e000      	b.n	800142a <NVIC_EncodePriority+0x32>
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	f04f 32ff 	mov.w	r2, #4294967295
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	401a      	ands	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001440:	f04f 31ff 	mov.w	r1, #4294967295
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	43d9      	mvns	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	4313      	orrs	r3, r2
         );
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001470:	d301      	bcc.n	8001476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001472:	2301      	movs	r3, #1
 8001474:	e00f      	b.n	8001496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <SysTick_Config+0x40>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147e:	210f      	movs	r1, #15
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f7ff ff8e 	bl	80013a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <SysTick_Config+0x40>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SysTick_Config+0x40>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff29 	bl	8001304 <__NVIC_SetPriorityGrouping>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014cc:	f7ff ff3e 	bl	800134c <__NVIC_GetPriorityGrouping>
 80014d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	6978      	ldr	r0, [r7, #20]
 80014d8:	f7ff ff8e 	bl	80013f8 <NVIC_EncodePriority>
 80014dc:	4602      	mov	r2, r0
 80014de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff5d 	bl	80013a4 <__NVIC_SetPriority>
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff31 	bl	8001368 <__NVIC_EnableIRQ>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ffa2 	bl	8001460 <SysTick_Config>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d004      	beq.n	8001544 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2280      	movs	r2, #128	; 0x80
 800153e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e00c      	b.n	800155e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2205      	movs	r2, #5
 8001548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0201 	bic.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001578:	b2db      	uxtb	r3, r3
}
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
 80015a2:	e159      	b.n	8001858 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015a4:	2201      	movs	r2, #1
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	429a      	cmp	r2, r3
 80015be:	f040 8148 	bne.w	8001852 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d005      	beq.n	80015da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d130      	bne.n	800163c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	2203      	movs	r2, #3
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43db      	mvns	r3, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4013      	ands	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001610:	2201      	movs	r2, #1
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	091b      	lsrs	r3, r3, #4
 8001626:	f003 0201 	and.w	r2, r3, #1
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	2b03      	cmp	r3, #3
 8001646:	d017      	beq.n	8001678 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	2203      	movs	r2, #3
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d123      	bne.n	80016cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	08da      	lsrs	r2, r3, #3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3208      	adds	r2, #8
 800168c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	220f      	movs	r2, #15
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	08da      	lsrs	r2, r3, #3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3208      	adds	r2, #8
 80016c6:	69b9      	ldr	r1, [r7, #24]
 80016c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	2203      	movs	r2, #3
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0203 	and.w	r2, r3, #3
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 80a2 	beq.w	8001852 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b57      	ldr	r3, [pc, #348]	; (8001870 <HAL_GPIO_Init+0x2e8>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	4a56      	ldr	r2, [pc, #344]	; (8001870 <HAL_GPIO_Init+0x2e8>)
 8001718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171c:	6453      	str	r3, [r2, #68]	; 0x44
 800171e:	4b54      	ldr	r3, [pc, #336]	; (8001870 <HAL_GPIO_Init+0x2e8>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800172a:	4a52      	ldr	r2, [pc, #328]	; (8001874 <HAL_GPIO_Init+0x2ec>)
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	089b      	lsrs	r3, r3, #2
 8001730:	3302      	adds	r3, #2
 8001732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	220f      	movs	r2, #15
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a49      	ldr	r2, [pc, #292]	; (8001878 <HAL_GPIO_Init+0x2f0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d019      	beq.n	800178a <HAL_GPIO_Init+0x202>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a48      	ldr	r2, [pc, #288]	; (800187c <HAL_GPIO_Init+0x2f4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d013      	beq.n	8001786 <HAL_GPIO_Init+0x1fe>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a47      	ldr	r2, [pc, #284]	; (8001880 <HAL_GPIO_Init+0x2f8>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d00d      	beq.n	8001782 <HAL_GPIO_Init+0x1fa>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a46      	ldr	r2, [pc, #280]	; (8001884 <HAL_GPIO_Init+0x2fc>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d007      	beq.n	800177e <HAL_GPIO_Init+0x1f6>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a45      	ldr	r2, [pc, #276]	; (8001888 <HAL_GPIO_Init+0x300>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d101      	bne.n	800177a <HAL_GPIO_Init+0x1f2>
 8001776:	2304      	movs	r3, #4
 8001778:	e008      	b.n	800178c <HAL_GPIO_Init+0x204>
 800177a:	2307      	movs	r3, #7
 800177c:	e006      	b.n	800178c <HAL_GPIO_Init+0x204>
 800177e:	2303      	movs	r3, #3
 8001780:	e004      	b.n	800178c <HAL_GPIO_Init+0x204>
 8001782:	2302      	movs	r3, #2
 8001784:	e002      	b.n	800178c <HAL_GPIO_Init+0x204>
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <HAL_GPIO_Init+0x204>
 800178a:	2300      	movs	r3, #0
 800178c:	69fa      	ldr	r2, [r7, #28]
 800178e:	f002 0203 	and.w	r2, r2, #3
 8001792:	0092      	lsls	r2, r2, #2
 8001794:	4093      	lsls	r3, r2
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800179c:	4935      	ldr	r1, [pc, #212]	; (8001874 <HAL_GPIO_Init+0x2ec>)
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	089b      	lsrs	r3, r3, #2
 80017a2:	3302      	adds	r3, #2
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017aa:	4b38      	ldr	r3, [pc, #224]	; (800188c <HAL_GPIO_Init+0x304>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ce:	4a2f      	ldr	r2, [pc, #188]	; (800188c <HAL_GPIO_Init+0x304>)
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d4:	4b2d      	ldr	r3, [pc, #180]	; (800188c <HAL_GPIO_Init+0x304>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017f8:	4a24      	ldr	r2, [pc, #144]	; (800188c <HAL_GPIO_Init+0x304>)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017fe:	4b23      	ldr	r3, [pc, #140]	; (800188c <HAL_GPIO_Init+0x304>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001822:	4a1a      	ldr	r2, [pc, #104]	; (800188c <HAL_GPIO_Init+0x304>)
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_GPIO_Init+0x304>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800184c:	4a0f      	ldr	r2, [pc, #60]	; (800188c <HAL_GPIO_Init+0x304>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3301      	adds	r3, #1
 8001856:	61fb      	str	r3, [r7, #28]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	2b0f      	cmp	r3, #15
 800185c:	f67f aea2 	bls.w	80015a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001860:	bf00      	nop
 8001862:	bf00      	nop
 8001864:	3724      	adds	r7, #36	; 0x24
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40023800 	.word	0x40023800
 8001874:	40013800 	.word	0x40013800
 8001878:	40020000 	.word	0x40020000
 800187c:	40020400 	.word	0x40020400
 8001880:	40020800 	.word	0x40020800
 8001884:	40020c00 	.word	0x40020c00
 8001888:	40021000 	.word	0x40021000
 800188c:	40013c00 	.word	0x40013c00

08001890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	807b      	strh	r3, [r7, #2]
 800189c:	4613      	mov	r3, r2
 800189e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018a0:	787b      	ldrb	r3, [r7, #1]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a6:	887a      	ldrh	r2, [r7, #2]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018ac:	e003      	b.n	80018b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	041a      	lsls	r2, r3, #16
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	619a      	str	r2, [r3, #24]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e12b      	b.n	8001b2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d106      	bne.n	80018f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff f9f0 	bl	8000cd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2224      	movs	r2, #36	; 0x24
 80018f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0201 	bic.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001916:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001926:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001928:	f002 fa1c 	bl	8003d64 <HAL_RCC_GetPCLK1Freq>
 800192c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4a81      	ldr	r2, [pc, #516]	; (8001b38 <HAL_I2C_Init+0x274>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d807      	bhi.n	8001948 <HAL_I2C_Init+0x84>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4a80      	ldr	r2, [pc, #512]	; (8001b3c <HAL_I2C_Init+0x278>)
 800193c:	4293      	cmp	r3, r2
 800193e:	bf94      	ite	ls
 8001940:	2301      	movls	r3, #1
 8001942:	2300      	movhi	r3, #0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	e006      	b.n	8001956 <HAL_I2C_Init+0x92>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4a7d      	ldr	r2, [pc, #500]	; (8001b40 <HAL_I2C_Init+0x27c>)
 800194c:	4293      	cmp	r3, r2
 800194e:	bf94      	ite	ls
 8001950:	2301      	movls	r3, #1
 8001952:	2300      	movhi	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e0e7      	b.n	8001b2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4a78      	ldr	r2, [pc, #480]	; (8001b44 <HAL_I2C_Init+0x280>)
 8001962:	fba2 2303 	umull	r2, r3, r2, r3
 8001966:	0c9b      	lsrs	r3, r3, #18
 8001968:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	430a      	orrs	r2, r1
 800197c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	4a6a      	ldr	r2, [pc, #424]	; (8001b38 <HAL_I2C_Init+0x274>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d802      	bhi.n	8001998 <HAL_I2C_Init+0xd4>
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	3301      	adds	r3, #1
 8001996:	e009      	b.n	80019ac <HAL_I2C_Init+0xe8>
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800199e:	fb02 f303 	mul.w	r3, r2, r3
 80019a2:	4a69      	ldr	r2, [pc, #420]	; (8001b48 <HAL_I2C_Init+0x284>)
 80019a4:	fba2 2303 	umull	r2, r3, r2, r3
 80019a8:	099b      	lsrs	r3, r3, #6
 80019aa:	3301      	adds	r3, #1
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	430b      	orrs	r3, r1
 80019b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	495c      	ldr	r1, [pc, #368]	; (8001b38 <HAL_I2C_Init+0x274>)
 80019c8:	428b      	cmp	r3, r1
 80019ca:	d819      	bhi.n	8001a00 <HAL_I2C_Init+0x13c>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1e59      	subs	r1, r3, #1
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80019da:	1c59      	adds	r1, r3, #1
 80019dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019e0:	400b      	ands	r3, r1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00a      	beq.n	80019fc <HAL_I2C_Init+0x138>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1e59      	subs	r1, r3, #1
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80019f4:	3301      	adds	r3, #1
 80019f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019fa:	e051      	b.n	8001aa0 <HAL_I2C_Init+0x1dc>
 80019fc:	2304      	movs	r3, #4
 80019fe:	e04f      	b.n	8001aa0 <HAL_I2C_Init+0x1dc>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d111      	bne.n	8001a2c <HAL_I2C_Init+0x168>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1e58      	subs	r0, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6859      	ldr	r1, [r3, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	440b      	add	r3, r1
 8001a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf0c      	ite	eq
 8001a24:	2301      	moveq	r3, #1
 8001a26:	2300      	movne	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	e012      	b.n	8001a52 <HAL_I2C_Init+0x18e>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1e58      	subs	r0, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6859      	ldr	r1, [r3, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	0099      	lsls	r1, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a42:	3301      	adds	r3, #1
 8001a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bf0c      	ite	eq
 8001a4c:	2301      	moveq	r3, #1
 8001a4e:	2300      	movne	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_I2C_Init+0x196>
 8001a56:	2301      	movs	r3, #1
 8001a58:	e022      	b.n	8001aa0 <HAL_I2C_Init+0x1dc>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10e      	bne.n	8001a80 <HAL_I2C_Init+0x1bc>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1e58      	subs	r0, r3, #1
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6859      	ldr	r1, [r3, #4]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	440b      	add	r3, r1
 8001a70:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a74:	3301      	adds	r3, #1
 8001a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a7e:	e00f      	b.n	8001aa0 <HAL_I2C_Init+0x1dc>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1e58      	subs	r0, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6859      	ldr	r1, [r3, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	0099      	lsls	r1, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a96:	3301      	adds	r3, #1
 8001a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	6809      	ldr	r1, [r1, #0]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69da      	ldr	r2, [r3, #28]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ace:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6911      	ldr	r1, [r2, #16]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	68d2      	ldr	r2, [r2, #12]
 8001ada:	4311      	orrs	r1, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	430b      	orrs	r3, r1
 8001ae2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2220      	movs	r2, #32
 8001b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	000186a0 	.word	0x000186a0
 8001b3c:	001e847f 	.word	0x001e847f
 8001b40:	003d08ff 	.word	0x003d08ff
 8001b44:	431bde83 	.word	0x431bde83
 8001b48:	10624dd3 	.word	0x10624dd3

08001b4c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b6c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b74:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	2b10      	cmp	r3, #16
 8001b7a:	d003      	beq.n	8001b84 <HAL_I2C_EV_IRQHandler+0x38>
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	2b40      	cmp	r3, #64	; 0x40
 8001b80:	f040 80c1 	bne.w	8001d06 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10d      	bne.n	8001bba <HAL_I2C_EV_IRQHandler+0x6e>
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001ba4:	d003      	beq.n	8001bae <HAL_I2C_EV_IRQHandler+0x62>
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001bac:	d101      	bne.n	8001bb2 <HAL_I2C_EV_IRQHandler+0x66>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_I2C_EV_IRQHandler+0x68>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	f000 8132 	beq.w	8001e1e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00c      	beq.n	8001bde <HAL_I2C_EV_IRQHandler+0x92>
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	0a5b      	lsrs	r3, r3, #9
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d006      	beq.n	8001bde <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f001 fc7b 	bl	80034cc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 fd83 	bl	80026e2 <I2C_Master_SB>
 8001bdc:	e092      	b.n	8001d04 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	08db      	lsrs	r3, r3, #3
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d009      	beq.n	8001bfe <HAL_I2C_EV_IRQHandler+0xb2>
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	0a5b      	lsrs	r3, r3, #9
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 fdf9 	bl	80027ee <I2C_Master_ADD10>
 8001bfc:	e082      	b.n	8001d04 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	085b      	lsrs	r3, r3, #1
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d009      	beq.n	8001c1e <HAL_I2C_EV_IRQHandler+0xd2>
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	0a5b      	lsrs	r3, r3, #9
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 fe13 	bl	8002842 <I2C_Master_ADDR>
 8001c1c:	e072      	b.n	8001d04 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d03b      	beq.n	8001ca2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c38:	f000 80f3 	beq.w	8001e22 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	09db      	lsrs	r3, r3, #7
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00f      	beq.n	8001c68 <HAL_I2C_EV_IRQHandler+0x11c>
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	0a9b      	lsrs	r3, r3, #10
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d009      	beq.n	8001c68 <HAL_I2C_EV_IRQHandler+0x11c>
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	089b      	lsrs	r3, r3, #2
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d103      	bne.n	8001c68 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f9f3 	bl	800204c <I2C_MasterTransmit_TXE>
 8001c66:	e04d      	b.n	8001d04 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80d6 	beq.w	8001e22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	0a5b      	lsrs	r3, r3, #9
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 80cf 	beq.w	8001e22 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001c84:	7bbb      	ldrb	r3, [r7, #14]
 8001c86:	2b21      	cmp	r3, #33	; 0x21
 8001c88:	d103      	bne.n	8001c92 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 fa7a 	bl	8002184 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c90:	e0c7      	b.n	8001e22 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	2b40      	cmp	r3, #64	; 0x40
 8001c96:	f040 80c4 	bne.w	8001e22 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 fae8 	bl	8002270 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ca0:	e0bf      	b.n	8001e22 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cb0:	f000 80b7 	beq.w	8001e22 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	099b      	lsrs	r3, r3, #6
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00f      	beq.n	8001ce0 <HAL_I2C_EV_IRQHandler+0x194>
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	0a9b      	lsrs	r3, r3, #10
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d009      	beq.n	8001ce0 <HAL_I2C_EV_IRQHandler+0x194>
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d103      	bne.n	8001ce0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 fb5d 	bl	8002398 <I2C_MasterReceive_RXNE>
 8001cde:	e011      	b.n	8001d04 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	089b      	lsrs	r3, r3, #2
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 809a 	beq.w	8001e22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	0a5b      	lsrs	r3, r3, #9
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 8093 	beq.w	8001e22 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 fc06 	bl	800250e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d02:	e08e      	b.n	8001e22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001d04:	e08d      	b.n	8001e22 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d004      	beq.n	8001d18 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	e007      	b.n	8001d28 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	085b      	lsrs	r3, r3, #1
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d012      	beq.n	8001d5a <HAL_I2C_EV_IRQHandler+0x20e>
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	0a5b      	lsrs	r3, r3, #9
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00c      	beq.n	8001d5a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001d50:	69b9      	ldr	r1, [r7, #24]
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 ffc4 	bl	8002ce0 <I2C_Slave_ADDR>
 8001d58:	e066      	b.n	8001e28 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <HAL_I2C_EV_IRQHandler+0x22e>
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	0a5b      	lsrs	r3, r3, #9
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 fffe 	bl	8002d74 <I2C_Slave_STOPF>
 8001d78:	e056      	b.n	8001e28 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001d7a:	7bbb      	ldrb	r3, [r7, #14]
 8001d7c:	2b21      	cmp	r3, #33	; 0x21
 8001d7e:	d002      	beq.n	8001d86 <HAL_I2C_EV_IRQHandler+0x23a>
 8001d80:	7bbb      	ldrb	r3, [r7, #14]
 8001d82:	2b29      	cmp	r3, #41	; 0x29
 8001d84:	d125      	bne.n	8001dd2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	09db      	lsrs	r3, r3, #7
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00f      	beq.n	8001db2 <HAL_I2C_EV_IRQHandler+0x266>
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	0a9b      	lsrs	r3, r3, #10
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d009      	beq.n	8001db2 <HAL_I2C_EV_IRQHandler+0x266>
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	089b      	lsrs	r3, r3, #2
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d103      	bne.n	8001db2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 feda 	bl	8002b64 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001db0:	e039      	b.n	8001e26 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d033      	beq.n	8001e26 <HAL_I2C_EV_IRQHandler+0x2da>
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	0a5b      	lsrs	r3, r3, #9
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d02d      	beq.n	8001e26 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 ff07 	bl	8002bde <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001dd0:	e029      	b.n	8001e26 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	099b      	lsrs	r3, r3, #6
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00f      	beq.n	8001dfe <HAL_I2C_EV_IRQHandler+0x2b2>
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	0a9b      	lsrs	r3, r3, #10
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <HAL_I2C_EV_IRQHandler+0x2b2>
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d103      	bne.n	8001dfe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 ff12 	bl	8002c20 <I2C_SlaveReceive_RXNE>
 8001dfc:	e014      	b.n	8001e28 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	089b      	lsrs	r3, r3, #2
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00e      	beq.n	8001e28 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	0a5b      	lsrs	r3, r3, #9
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d008      	beq.n	8001e28 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 ff40 	bl	8002c9c <I2C_SlaveReceive_BTF>
 8001e1c:	e004      	b.n	8001e28 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001e1e:	bf00      	nop
 8001e20:	e002      	b.n	8001e28 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e22:	bf00      	nop
 8001e24:	e000      	b.n	8001e28 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e26:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001e28:	3720      	adds	r7, #32
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b08a      	sub	sp, #40	; 0x28
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e50:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00e      	beq.n	8001e7c <HAL_I2C_ER_IRQHandler+0x4e>
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	0a1b      	lsrs	r3, r3, #8
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d008      	beq.n	8001e7c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e7a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	0a5b      	lsrs	r3, r3, #9
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00e      	beq.n	8001ea6 <HAL_I2C_ER_IRQHandler+0x78>
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	0a1b      	lsrs	r3, r3, #8
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	f043 0302 	orr.w	r3, r3, #2
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001ea4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	0a9b      	lsrs	r3, r3, #10
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d03f      	beq.n	8001f32 <HAL_I2C_ER_IRQHandler+0x104>
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d039      	beq.n	8001f32 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001ebe:	7efb      	ldrb	r3, [r7, #27]
 8001ec0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001ed8:	7ebb      	ldrb	r3, [r7, #26]
 8001eda:	2b20      	cmp	r3, #32
 8001edc:	d112      	bne.n	8001f04 <HAL_I2C_ER_IRQHandler+0xd6>
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10f      	bne.n	8001f04 <HAL_I2C_ER_IRQHandler+0xd6>
 8001ee4:	7cfb      	ldrb	r3, [r7, #19]
 8001ee6:	2b21      	cmp	r3, #33	; 0x21
 8001ee8:	d008      	beq.n	8001efc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001eea:	7cfb      	ldrb	r3, [r7, #19]
 8001eec:	2b29      	cmp	r3, #41	; 0x29
 8001eee:	d005      	beq.n	8001efc <HAL_I2C_ER_IRQHandler+0xce>
 8001ef0:	7cfb      	ldrb	r3, [r7, #19]
 8001ef2:	2b28      	cmp	r3, #40	; 0x28
 8001ef4:	d106      	bne.n	8001f04 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b21      	cmp	r3, #33	; 0x21
 8001efa:	d103      	bne.n	8001f04 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f001 f869 	bl	8002fd4 <I2C_Slave_AF>
 8001f02:	e016      	b.n	8001f32 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f0c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	f043 0304 	orr.w	r3, r3, #4
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f16:	7efb      	ldrb	r3, [r7, #27]
 8001f18:	2b10      	cmp	r3, #16
 8001f1a:	d002      	beq.n	8001f22 <HAL_I2C_ER_IRQHandler+0xf4>
 8001f1c:	7efb      	ldrb	r3, [r7, #27]
 8001f1e:	2b40      	cmp	r3, #64	; 0x40
 8001f20:	d107      	bne.n	8001f32 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f30:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f32:	6a3b      	ldr	r3, [r7, #32]
 8001f34:	0adb      	lsrs	r3, r3, #11
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00e      	beq.n	8001f5c <HAL_I2C_ER_IRQHandler+0x12e>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	0a1b      	lsrs	r3, r3, #8
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d008      	beq.n	8001f5c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	f043 0308 	orr.w	r3, r3, #8
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001f5a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d008      	beq.n	8001f74 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f001 f8a0 	bl	80030b4 <I2C_ITError>
  }
}
 8001f74:	bf00      	nop
 8001f76:	3728      	adds	r7, #40	; 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	70fb      	strb	r3, [r7, #3]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002062:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206e:	2b00      	cmp	r3, #0
 8002070:	d150      	bne.n	8002114 <I2C_MasterTransmit_TXE+0xc8>
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	2b21      	cmp	r3, #33	; 0x21
 8002076:	d14d      	bne.n	8002114 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b08      	cmp	r3, #8
 800207c:	d01d      	beq.n	80020ba <I2C_MasterTransmit_TXE+0x6e>
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2b20      	cmp	r3, #32
 8002082:	d01a      	beq.n	80020ba <I2C_MasterTransmit_TXE+0x6e>
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800208a:	d016      	beq.n	80020ba <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800209a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2211      	movs	r2, #17
 80020a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2220      	movs	r2, #32
 80020ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ff62 	bl	8001f7c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020b8:	e060      	b.n	800217c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020c8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b40      	cmp	r3, #64	; 0x40
 80020f2:	d107      	bne.n	8002104 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ff7d 	bl	8001ffc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002102:	e03b      	b.n	800217c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff35 	bl	8001f7c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002112:	e033      	b.n	800217c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	2b21      	cmp	r3, #33	; 0x21
 8002118:	d005      	beq.n	8002126 <I2C_MasterTransmit_TXE+0xda>
 800211a:	7bbb      	ldrb	r3, [r7, #14]
 800211c:	2b40      	cmp	r3, #64	; 0x40
 800211e:	d12d      	bne.n	800217c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	2b22      	cmp	r3, #34	; 0x22
 8002124:	d12a      	bne.n	800217c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212a:	b29b      	uxth	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d108      	bne.n	8002142 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800213e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002140:	e01c      	b.n	800217c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b40      	cmp	r3, #64	; 0x40
 800214c:	d103      	bne.n	8002156 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f88e 	bl	8002270 <I2C_MemoryTransmit_TXE_BTF>
}
 8002154:	e012      	b.n	800217c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	781a      	ldrb	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	1c5a      	adds	r2, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002170:	b29b      	uxth	r3, r3
 8002172:	3b01      	subs	r3, #1
 8002174:	b29a      	uxth	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800217a:	e7ff      	b.n	800217c <I2C_MasterTransmit_TXE+0x130>
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b21      	cmp	r3, #33	; 0x21
 800219c:	d164      	bne.n	8002268 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d012      	beq.n	80021ce <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	781a      	ldrb	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80021cc:	e04c      	b.n	8002268 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d01d      	beq.n	8002210 <I2C_MasterTransmit_BTF+0x8c>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2b20      	cmp	r3, #32
 80021d8:	d01a      	beq.n	8002210 <I2C_MasterTransmit_BTF+0x8c>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021e0:	d016      	beq.n	8002210 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021f0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2211      	movs	r2, #17
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2220      	movs	r2, #32
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff feb7 	bl	8001f7c <HAL_I2C_MasterTxCpltCallback>
}
 800220e:	e02b      	b.n	8002268 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800221e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800222e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2220      	movs	r2, #32
 800223a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b40      	cmp	r3, #64	; 0x40
 8002248:	d107      	bne.n	800225a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff fed2 	bl	8001ffc <HAL_I2C_MemTxCpltCallback>
}
 8002258:	e006      	b.n	8002268 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff fe8a 	bl	8001f7c <HAL_I2C_MasterTxCpltCallback>
}
 8002268:	bf00      	nop
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002284:	2b00      	cmp	r3, #0
 8002286:	d11d      	bne.n	80022c4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228c:	2b01      	cmp	r3, #1
 800228e:	d10b      	bne.n	80022a8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002294:	b2da      	uxtb	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a0:	1c9a      	adds	r2, r3, #2
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80022a6:	e073      	b.n	8002390 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	121b      	asrs	r3, r3, #8
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022c2:	e065      	b.n	8002390 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d10b      	bne.n	80022e4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022e2:	e055      	b.n	8002390 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d151      	bne.n	8002390 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	2b22      	cmp	r3, #34	; 0x22
 80022f0:	d10d      	bne.n	800230e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002300:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800230c:	e040      	b.n	8002390 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002312:	b29b      	uxth	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d015      	beq.n	8002344 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	2b21      	cmp	r3, #33	; 0x21
 800231c:	d112      	bne.n	8002344 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	781a      	ldrb	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002338:	b29b      	uxth	r3, r3
 800233a:	3b01      	subs	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002342:	e025      	b.n	8002390 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002348:	b29b      	uxth	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d120      	bne.n	8002390 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	2b21      	cmp	r3, #33	; 0x21
 8002352:	d11d      	bne.n	8002390 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002362:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002372:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2220      	movs	r2, #32
 800237e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff fe36 	bl	8001ffc <HAL_I2C_MemTxCpltCallback>
}
 8002390:	bf00      	nop
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b22      	cmp	r3, #34	; 0x22
 80023aa:	f040 80ac 	bne.w	8002506 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d921      	bls.n	8002400 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691a      	ldr	r2, [r3, #16]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	f040 808c 	bne.w	8002506 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023fc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80023fe:	e082      	b.n	8002506 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002404:	2b02      	cmp	r3, #2
 8002406:	d075      	beq.n	80024f4 <I2C_MasterReceive_RXNE+0x15c>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d002      	beq.n	8002414 <I2C_MasterReceive_RXNE+0x7c>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d16f      	bne.n	80024f4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f001 f827 	bl	8003468 <I2C_WaitOnSTOPRequestThroughIT>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d142      	bne.n	80024a6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800243e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2220      	movs	r2, #32
 800246a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b40      	cmp	r3, #64	; 0x40
 8002478:	d10a      	bne.n	8002490 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff fdc1 	bl	8002010 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800248e:	e03a      	b.n	8002506 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2212      	movs	r2, #18
 800249c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff fd76 	bl	8001f90 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024a4:	e02f      	b.n	8002506 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024b4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff fd99 	bl	8002024 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024f2:	e008      	b.n	8002506 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002502:	605a      	str	r2, [r3, #4]
}
 8002504:	e7ff      	b.n	8002506 <I2C_MasterReceive_RXNE+0x16e>
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b084      	sub	sp, #16
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	2b04      	cmp	r3, #4
 8002524:	d11b      	bne.n	800255e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002534:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800255c:	e0bd      	b.n	80026da <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b03      	cmp	r3, #3
 8002566:	d129      	bne.n	80025bc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002576:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b04      	cmp	r3, #4
 800257c:	d00a      	beq.n	8002594 <I2C_MasterReceive_BTF+0x86>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d007      	beq.n	8002594 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002592:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80025ba:	e08e      	b.n	80026da <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d176      	bne.n	80026b4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d002      	beq.n	80025d2 <I2C_MasterReceive_BTF+0xc4>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b10      	cmp	r3, #16
 80025d0:	d108      	bne.n	80025e4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	e019      	b.n	8002618 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d002      	beq.n	80025f0 <I2C_MasterReceive_BTF+0xe2>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d108      	bne.n	8002602 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	e00a      	b.n	8002618 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b10      	cmp	r3, #16
 8002606:	d007      	beq.n	8002618 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002616:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002672:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b40      	cmp	r3, #64	; 0x40
 8002686:	d10a      	bne.n	800269e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff fcba 	bl	8002010 <HAL_I2C_MemRxCpltCallback>
}
 800269c:	e01d      	b.n	80026da <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2212      	movs	r2, #18
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff fc6f 	bl	8001f90 <HAL_I2C_MasterRxCpltCallback>
}
 80026b2:	e012      	b.n	80026da <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691a      	ldr	r2, [r3, #16]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b40      	cmp	r3, #64	; 0x40
 80026f4:	d117      	bne.n	8002726 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800270e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002710:	e067      	b.n	80027e2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	b2db      	uxtb	r3, r3
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	b2da      	uxtb	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	611a      	str	r2, [r3, #16]
}
 8002724:	e05d      	b.n	80027e2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800272e:	d133      	bne.n	8002798 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b21      	cmp	r3, #33	; 0x21
 800273a:	d109      	bne.n	8002750 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	b2db      	uxtb	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800274c:	611a      	str	r2, [r3, #16]
 800274e:	e008      	b.n	8002762 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002754:	b2db      	uxtb	r3, r3
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	b2da      	uxtb	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002766:	2b00      	cmp	r3, #0
 8002768:	d004      	beq.n	8002774 <I2C_Master_SB+0x92>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002770:	2b00      	cmp	r3, #0
 8002772:	d108      	bne.n	8002786 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002778:	2b00      	cmp	r3, #0
 800277a:	d032      	beq.n	80027e2 <I2C_Master_SB+0x100>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002782:	2b00      	cmp	r3, #0
 8002784:	d02d      	beq.n	80027e2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002794:	605a      	str	r2, [r3, #4]
}
 8002796:	e024      	b.n	80027e2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10e      	bne.n	80027be <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	11db      	asrs	r3, r3, #7
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f003 0306 	and.w	r3, r3, #6
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f063 030f 	orn	r3, r3, #15
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	611a      	str	r2, [r3, #16]
}
 80027bc:	e011      	b.n	80027e2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d10d      	bne.n	80027e2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	11db      	asrs	r3, r3, #7
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f003 0306 	and.w	r3, r3, #6
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	f063 030e 	orn	r3, r3, #14
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	611a      	str	r2, [r3, #16]
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002806:	2b00      	cmp	r3, #0
 8002808:	d004      	beq.n	8002814 <I2C_Master_ADD10+0x26>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002810:	2b00      	cmp	r3, #0
 8002812:	d108      	bne.n	8002826 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00c      	beq.n	8002836 <I2C_Master_ADD10+0x48>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002822:	2b00      	cmp	r3, #0
 8002824:	d007      	beq.n	8002836 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002834:	605a      	str	r2, [r3, #4]
  }
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002842:	b480      	push	{r7}
 8002844:	b091      	sub	sp, #68	; 0x44
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002850:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b22      	cmp	r3, #34	; 0x22
 800286a:	f040 8169 	bne.w	8002b40 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10f      	bne.n	8002896 <I2C_Master_ADDR+0x54>
 8002876:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800287a:	2b40      	cmp	r3, #64	; 0x40
 800287c:	d10b      	bne.n	8002896 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800287e:	2300      	movs	r3, #0
 8002880:	633b      	str	r3, [r7, #48]	; 0x30
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	633b      	str	r3, [r7, #48]	; 0x30
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	633b      	str	r3, [r7, #48]	; 0x30
 8002892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002894:	e160      	b.n	8002b58 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800289a:	2b00      	cmp	r3, #0
 800289c:	d11d      	bne.n	80028da <I2C_Master_ADDR+0x98>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028a6:	d118      	bne.n	80028da <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a8:	2300      	movs	r3, #0
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028cc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	651a      	str	r2, [r3, #80]	; 0x50
 80028d8:	e13e      	b.n	8002b58 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d113      	bne.n	800290c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028e4:	2300      	movs	r3, #0
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	e115      	b.n	8002b38 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b01      	cmp	r3, #1
 8002914:	f040 808a 	bne.w	8002a2c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800291e:	d137      	bne.n	8002990 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800292e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800293a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800293e:	d113      	bne.n	8002968 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800294e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002950:	2300      	movs	r3, #0
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	e0e7      	b.n	8002b38 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002968:	2300      	movs	r3, #0
 800296a:	623b      	str	r3, [r7, #32]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	623b      	str	r3, [r7, #32]
 800297c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	e0d3      	b.n	8002b38 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002992:	2b08      	cmp	r3, #8
 8002994:	d02e      	beq.n	80029f4 <I2C_Master_ADDR+0x1b2>
 8002996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002998:	2b20      	cmp	r3, #32
 800299a:	d02b      	beq.n	80029f4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800299c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299e:	2b12      	cmp	r3, #18
 80029a0:	d102      	bne.n	80029a8 <I2C_Master_ADDR+0x166>
 80029a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d125      	bne.n	80029f4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80029a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d00e      	beq.n	80029cc <I2C_Master_ADDR+0x18a>
 80029ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d00b      	beq.n	80029cc <I2C_Master_ADDR+0x18a>
 80029b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b6:	2b10      	cmp	r3, #16
 80029b8:	d008      	beq.n	80029cc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	e007      	b.n	80029dc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029da:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029dc:	2300      	movs	r3, #0
 80029de:	61fb      	str	r3, [r7, #28]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	61fb      	str	r3, [r7, #28]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	e0a1      	b.n	8002b38 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a02:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a04:	2300      	movs	r3, #0
 8002a06:	61bb      	str	r3, [r7, #24]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	61bb      	str	r3, [r7, #24]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	61bb      	str	r3, [r7, #24]
 8002a18:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	e085      	b.n	8002b38 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d14d      	bne.n	8002ad2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d016      	beq.n	8002a6a <I2C_Master_ADDR+0x228>
 8002a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d013      	beq.n	8002a6a <I2C_Master_ADDR+0x228>
 8002a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d010      	beq.n	8002a6a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a56:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	e007      	b.n	8002a7a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a78:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a88:	d117      	bne.n	8002aba <I2C_Master_ADDR+0x278>
 8002a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a90:	d00b      	beq.n	8002aaa <I2C_Master_ADDR+0x268>
 8002a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d008      	beq.n	8002aaa <I2C_Master_ADDR+0x268>
 8002a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d005      	beq.n	8002aaa <I2C_Master_ADDR+0x268>
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	d002      	beq.n	8002aaa <I2C_Master_ADDR+0x268>
 8002aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d107      	bne.n	8002aba <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ab8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	e032      	b.n	8002b38 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ae0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002af0:	d117      	bne.n	8002b22 <I2C_Master_ADDR+0x2e0>
 8002af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002af8:	d00b      	beq.n	8002b12 <I2C_Master_ADDR+0x2d0>
 8002afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d008      	beq.n	8002b12 <I2C_Master_ADDR+0x2d0>
 8002b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d005      	beq.n	8002b12 <I2C_Master_ADDR+0x2d0>
 8002b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b08:	2b10      	cmp	r3, #16
 8002b0a:	d002      	beq.n	8002b12 <I2C_Master_ADDR+0x2d0>
 8002b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0e:	2b20      	cmp	r3, #32
 8002b10:	d107      	bne.n	8002b22 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b20:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002b3e:	e00b      	b.n	8002b58 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
}
 8002b56:	e7ff      	b.n	8002b58 <I2C_Master_ADDR+0x316>
 8002b58:	bf00      	nop
 8002b5a:	3744      	adds	r7, #68	; 0x44
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b72:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d02b      	beq.n	8002bd6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	781a      	ldrb	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	1c5a      	adds	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d114      	bne.n	8002bd6 <I2C_SlaveTransmit_TXE+0x72>
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	2b29      	cmp	r3, #41	; 0x29
 8002bb0:	d111      	bne.n	8002bd6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2221      	movs	r2, #33	; 0x21
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2228      	movs	r2, #40	; 0x28
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff f9e7 	bl	8001fa4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d011      	beq.n	8002c14 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d02c      	beq.n	8002c94 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d114      	bne.n	8002c94 <I2C_SlaveReceive_RXNE+0x74>
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	2b2a      	cmp	r3, #42	; 0x2a
 8002c6e:	d111      	bne.n	8002c94 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c7e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2222      	movs	r2, #34	; 0x22
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2228      	movs	r2, #40	; 0x28
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff f992 	bl	8001fb8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d012      	beq.n	8002cd4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002cea:	2300      	movs	r3, #0
 8002cec:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cfa:	2b28      	cmp	r3, #40	; 0x28
 8002cfc:	d127      	bne.n	8002d4e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d0c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	089b      	lsrs	r3, r3, #2
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	09db      	lsrs	r3, r3, #7
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d103      	bne.n	8002d32 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	81bb      	strh	r3, [r7, #12]
 8002d30:	e002      	b.n	8002d38 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002d40:	89ba      	ldrh	r2, [r7, #12]
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	4619      	mov	r1, r3
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff f940 	bl	8001fcc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d4c:	e00e      	b.n	8002d6c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002d6c:	bf00      	nop
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d82:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d92:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002d94:	2300      	movs	r3, #0
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dd0:	d172      	bne.n	8002eb8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	2b22      	cmp	r3, #34	; 0x22
 8002dd6:	d002      	beq.n	8002dde <I2C_Slave_STOPF+0x6a>
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	2b2a      	cmp	r3, #42	; 0x2a
 8002ddc:	d135      	bne.n	8002e4a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f043 0204 	orr.w	r2, r3, #4
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e10:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe fba7 	bl	800156a <HAL_DMA_GetState>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d049      	beq.n	8002eb6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e26:	4a69      	ldr	r2, [pc, #420]	; (8002fcc <I2C_Slave_STOPF+0x258>)
 8002e28:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fb79 	bl	8001526 <HAL_DMA_Abort_IT>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d03d      	beq.n	8002eb6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e44:	4610      	mov	r0, r2
 8002e46:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e48:	e035      	b.n	8002eb6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f043 0204 	orr.w	r2, r3, #4
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e7c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe fb71 	bl	800156a <HAL_DMA_GetState>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d014      	beq.n	8002eb8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e92:	4a4e      	ldr	r2, [pc, #312]	; (8002fcc <I2C_Slave_STOPF+0x258>)
 8002e94:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe fb43 	bl	8001526 <HAL_DMA_Abort_IT>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d008      	beq.n	8002eb8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4798      	blx	r3
 8002eb4:	e000      	b.n	8002eb8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002eb6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d03e      	beq.n	8002f40 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d112      	bne.n	8002ef6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691a      	ldr	r2, [r3, #16]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f00:	2b40      	cmp	r3, #64	; 0x40
 8002f02:	d112      	bne.n	8002f2a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	f043 0204 	orr.w	r2, r3, #4
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f8b3 	bl	80030b4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002f4e:	e039      	b.n	8002fc4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	2b2a      	cmp	r3, #42	; 0x2a
 8002f54:	d109      	bne.n	8002f6a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2228      	movs	r2, #40	; 0x28
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff f827 	bl	8001fb8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b28      	cmp	r3, #40	; 0x28
 8002f74:	d111      	bne.n	8002f9a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a15      	ldr	r2, [pc, #84]	; (8002fd0 <I2C_Slave_STOPF+0x25c>)
 8002f7a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff f828 	bl	8001fe8 <HAL_I2C_ListenCpltCallback>
}
 8002f98:	e014      	b.n	8002fc4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	2b22      	cmp	r3, #34	; 0x22
 8002fa0:	d002      	beq.n	8002fa8 <I2C_Slave_STOPF+0x234>
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	2b22      	cmp	r3, #34	; 0x22
 8002fa6:	d10d      	bne.n	8002fc4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fe fffa 	bl	8001fb8 <HAL_I2C_SlaveRxCpltCallback>
}
 8002fc4:	bf00      	nop
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	08003319 	.word	0x08003319
 8002fd0:	ffff0000 	.word	0xffff0000

08002fd4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d002      	beq.n	8002ff6 <I2C_Slave_AF+0x22>
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d129      	bne.n	800304a <I2C_Slave_AF+0x76>
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	2b28      	cmp	r3, #40	; 0x28
 8002ffa:	d126      	bne.n	800304a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a2c      	ldr	r2, [pc, #176]	; (80030b0 <I2C_Slave_AF+0xdc>)
 8003000:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003010:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800301a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800302a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fe ffd0 	bl	8001fe8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003048:	e02e      	b.n	80030a8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	2b21      	cmp	r3, #33	; 0x21
 800304e:	d126      	bne.n	800309e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a17      	ldr	r2, [pc, #92]	; (80030b0 <I2C_Slave_AF+0xdc>)
 8003054:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2221      	movs	r2, #33	; 0x21
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800307a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003084:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003094:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fe ff84 	bl	8001fa4 <HAL_I2C_SlaveTxCpltCallback>
}
 800309c:	e004      	b.n	80030a8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030a6:	615a      	str	r2, [r3, #20]
}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	ffff0000 	.word	0xffff0000

080030b4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80030cc:	7bbb      	ldrb	r3, [r7, #14]
 80030ce:	2b10      	cmp	r3, #16
 80030d0:	d002      	beq.n	80030d8 <I2C_ITError+0x24>
 80030d2:	7bbb      	ldrb	r3, [r7, #14]
 80030d4:	2b40      	cmp	r3, #64	; 0x40
 80030d6:	d10a      	bne.n	80030ee <I2C_ITError+0x3a>
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	2b22      	cmp	r3, #34	; 0x22
 80030dc:	d107      	bne.n	80030ee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030f4:	2b28      	cmp	r3, #40	; 0x28
 80030f6:	d107      	bne.n	8003108 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2228      	movs	r2, #40	; 0x28
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003106:	e015      	b.n	8003134 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003112:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003116:	d00a      	beq.n	800312e <I2C_ITError+0x7a>
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	2b60      	cmp	r3, #96	; 0x60
 800311c:	d007      	beq.n	800312e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800313e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003142:	d162      	bne.n	800320a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003152:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d020      	beq.n	80031a4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003166:	4a6a      	ldr	r2, [pc, #424]	; (8003310 <I2C_ITError+0x25c>)
 8003168:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe f9d9 	bl	8001526 <HAL_DMA_Abort_IT>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 8089 	beq.w	800328e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0201 	bic.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800319e:	4610      	mov	r0, r2
 80031a0:	4798      	blx	r3
 80031a2:	e074      	b.n	800328e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	4a59      	ldr	r2, [pc, #356]	; (8003310 <I2C_ITError+0x25c>)
 80031aa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fe f9b8 	bl	8001526 <HAL_DMA_Abort_IT>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d068      	beq.n	800328e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c6:	2b40      	cmp	r3, #64	; 0x40
 80031c8:	d10b      	bne.n	80031e2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0201 	bic.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003204:	4610      	mov	r0, r2
 8003206:	4798      	blx	r3
 8003208:	e041      	b.n	800328e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b60      	cmp	r3, #96	; 0x60
 8003214:	d125      	bne.n	8003262 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b40      	cmp	r3, #64	; 0x40
 8003230:	d10b      	bne.n	800324a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0201 	bic.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7fe feec 	bl	8002038 <HAL_I2C_AbortCpltCallback>
 8003260:	e015      	b.n	800328e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326c:	2b40      	cmp	r3, #64	; 0x40
 800326e:	d10b      	bne.n	8003288 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7fe fecb 	bl	8002024 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10e      	bne.n	80032bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d109      	bne.n	80032bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d104      	bne.n	80032bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d007      	beq.n	80032cc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032ca:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d113      	bne.n	8003308 <I2C_ITError+0x254>
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	2b28      	cmp	r3, #40	; 0x28
 80032e4:	d110      	bne.n	8003308 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <I2C_ITError+0x260>)
 80032ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7fe fe70 	bl	8001fe8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	08003319 	.word	0x08003319
 8003314:	ffff0000 	.word	0xffff0000

08003318 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003328:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003330:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003332:	4b4b      	ldr	r3, [pc, #300]	; (8003460 <I2C_DMAAbort+0x148>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	08db      	lsrs	r3, r3, #3
 8003338:	4a4a      	ldr	r2, [pc, #296]	; (8003464 <I2C_DMAAbort+0x14c>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	0a1a      	lsrs	r2, r3, #8
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	00da      	lsls	r2, r3, #3
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d106      	bne.n	8003360 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f043 0220 	orr.w	r2, r3, #32
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800335e:	e00a      	b.n	8003376 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	3b01      	subs	r3, #1
 8003364:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003374:	d0ea      	beq.n	800334c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003382:	2200      	movs	r2, #0
 8003384:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	2200      	movs	r2, #0
 8003394:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2200      	movs	r2, #0
 80033aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b8:	2200      	movs	r2, #0
 80033ba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	2200      	movs	r2, #0
 80033ca:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b60      	cmp	r3, #96	; 0x60
 80033e6:	d10e      	bne.n	8003406 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	2200      	movs	r2, #0
 80033fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80033fe:	6978      	ldr	r0, [r7, #20]
 8003400:	f7fe fe1a 	bl	8002038 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003404:	e027      	b.n	8003456 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003406:	7cfb      	ldrb	r3, [r7, #19]
 8003408:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800340c:	2b28      	cmp	r3, #40	; 0x28
 800340e:	d117      	bne.n	8003440 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0201 	orr.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800342e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2200      	movs	r2, #0
 8003434:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2228      	movs	r2, #40	; 0x28
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800343e:	e007      	b.n	8003450 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003450:	6978      	ldr	r0, [r7, #20]
 8003452:	f7fe fde7 	bl	8002024 <HAL_I2C_ErrorCallback>
}
 8003456:	bf00      	nop
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000000 	.word	0x20000000
 8003464:	14f8b589 	.word	0x14f8b589

08003468 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003474:	4b13      	ldr	r3, [pc, #76]	; (80034c4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	08db      	lsrs	r3, r3, #3
 800347a:	4a13      	ldr	r2, [pc, #76]	; (80034c8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800347c:	fba2 2303 	umull	r2, r3, r2, r3
 8003480:	0a1a      	lsrs	r2, r3, #8
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	3b01      	subs	r3, #1
 800348e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d107      	bne.n	80034a6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f043 0220 	orr.w	r2, r3, #32
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e008      	b.n	80034b8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034b4:	d0e9      	beq.n	800348a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	20000000 	.word	0x20000000
 80034c8:	14f8b589 	.word	0x14f8b589

080034cc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80034dc:	d103      	bne.n	80034e6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80034e4:	e007      	b.n	80034f6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80034ee:	d102      	bne.n	80034f6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2208      	movs	r2, #8
 80034f4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e267      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d075      	beq.n	800360e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003522:	4b88      	ldr	r3, [pc, #544]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	2b04      	cmp	r3, #4
 800352c:	d00c      	beq.n	8003548 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800352e:	4b85      	ldr	r3, [pc, #532]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003536:	2b08      	cmp	r3, #8
 8003538:	d112      	bne.n	8003560 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800353a:	4b82      	ldr	r3, [pc, #520]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003546:	d10b      	bne.n	8003560 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	4b7e      	ldr	r3, [pc, #504]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d05b      	beq.n	800360c <HAL_RCC_OscConfig+0x108>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d157      	bne.n	800360c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e242      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003568:	d106      	bne.n	8003578 <HAL_RCC_OscConfig+0x74>
 800356a:	4b76      	ldr	r3, [pc, #472]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a75      	ldr	r2, [pc, #468]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e01d      	b.n	80035b4 <HAL_RCC_OscConfig+0xb0>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003580:	d10c      	bne.n	800359c <HAL_RCC_OscConfig+0x98>
 8003582:	4b70      	ldr	r3, [pc, #448]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a6f      	ldr	r2, [pc, #444]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	4b6d      	ldr	r3, [pc, #436]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a6c      	ldr	r2, [pc, #432]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e00b      	b.n	80035b4 <HAL_RCC_OscConfig+0xb0>
 800359c:	4b69      	ldr	r3, [pc, #420]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a68      	ldr	r2, [pc, #416]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 80035a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	4b66      	ldr	r3, [pc, #408]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a65      	ldr	r2, [pc, #404]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 80035ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d013      	beq.n	80035e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7fd fe96 	bl	80012ec <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c4:	f7fd fe92 	bl	80012ec <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e207      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	4b5b      	ldr	r3, [pc, #364]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0xc0>
 80035e2:	e014      	b.n	800360e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fd fe82 	bl	80012ec <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ec:	f7fd fe7e 	bl	80012ec <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	; 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e1f3      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fe:	4b51      	ldr	r3, [pc, #324]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0xe8>
 800360a:	e000      	b.n	800360e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d063      	beq.n	80036e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800361a:	4b4a      	ldr	r3, [pc, #296]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00b      	beq.n	800363e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003626:	4b47      	ldr	r3, [pc, #284]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800362e:	2b08      	cmp	r3, #8
 8003630:	d11c      	bne.n	800366c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003632:	4b44      	ldr	r3, [pc, #272]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d116      	bne.n	800366c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363e:	4b41      	ldr	r3, [pc, #260]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <HAL_RCC_OscConfig+0x152>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d001      	beq.n	8003656 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e1c7      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003656:	4b3b      	ldr	r3, [pc, #236]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	4937      	ldr	r1, [pc, #220]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003666:	4313      	orrs	r3, r2
 8003668:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366a:	e03a      	b.n	80036e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d020      	beq.n	80036b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003674:	4b34      	ldr	r3, [pc, #208]	; (8003748 <HAL_RCC_OscConfig+0x244>)
 8003676:	2201      	movs	r2, #1
 8003678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367a:	f7fd fe37 	bl	80012ec <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003682:	f7fd fe33 	bl	80012ec <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e1a8      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003694:	4b2b      	ldr	r3, [pc, #172]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0f0      	beq.n	8003682 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a0:	4b28      	ldr	r3, [pc, #160]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	4925      	ldr	r1, [pc, #148]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	600b      	str	r3, [r1, #0]
 80036b4:	e015      	b.n	80036e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036b6:	4b24      	ldr	r3, [pc, #144]	; (8003748 <HAL_RCC_OscConfig+0x244>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fd fe16 	bl	80012ec <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c4:	f7fd fe12 	bl	80012ec <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e187      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d6:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f0      	bne.n	80036c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d036      	beq.n	800375c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d016      	beq.n	8003724 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036f6:	4b15      	ldr	r3, [pc, #84]	; (800374c <HAL_RCC_OscConfig+0x248>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fc:	f7fd fdf6 	bl	80012ec <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003704:	f7fd fdf2 	bl	80012ec <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e167      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003716:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <HAL_RCC_OscConfig+0x240>)
 8003718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCC_OscConfig+0x200>
 8003722:	e01b      	b.n	800375c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003724:	4b09      	ldr	r3, [pc, #36]	; (800374c <HAL_RCC_OscConfig+0x248>)
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372a:	f7fd fddf 	bl	80012ec <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003730:	e00e      	b.n	8003750 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003732:	f7fd fddb 	bl	80012ec <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d907      	bls.n	8003750 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e150      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
 8003744:	40023800 	.word	0x40023800
 8003748:	42470000 	.word	0x42470000
 800374c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003750:	4b88      	ldr	r3, [pc, #544]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1ea      	bne.n	8003732 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 8097 	beq.w	8003898 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800376a:	2300      	movs	r3, #0
 800376c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800376e:	4b81      	ldr	r3, [pc, #516]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10f      	bne.n	800379a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	4b7d      	ldr	r3, [pc, #500]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	4a7c      	ldr	r2, [pc, #496]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003788:	6413      	str	r3, [r2, #64]	; 0x40
 800378a:	4b7a      	ldr	r3, [pc, #488]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003796:	2301      	movs	r3, #1
 8003798:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379a:	4b77      	ldr	r3, [pc, #476]	; (8003978 <HAL_RCC_OscConfig+0x474>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d118      	bne.n	80037d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037a6:	4b74      	ldr	r3, [pc, #464]	; (8003978 <HAL_RCC_OscConfig+0x474>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a73      	ldr	r2, [pc, #460]	; (8003978 <HAL_RCC_OscConfig+0x474>)
 80037ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b2:	f7fd fd9b 	bl	80012ec <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ba:	f7fd fd97 	bl	80012ec <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e10c      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037cc:	4b6a      	ldr	r3, [pc, #424]	; (8003978 <HAL_RCC_OscConfig+0x474>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f0      	beq.n	80037ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d106      	bne.n	80037ee <HAL_RCC_OscConfig+0x2ea>
 80037e0:	4b64      	ldr	r3, [pc, #400]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 80037e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e4:	4a63      	ldr	r2, [pc, #396]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 80037e6:	f043 0301 	orr.w	r3, r3, #1
 80037ea:	6713      	str	r3, [r2, #112]	; 0x70
 80037ec:	e01c      	b.n	8003828 <HAL_RCC_OscConfig+0x324>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b05      	cmp	r3, #5
 80037f4:	d10c      	bne.n	8003810 <HAL_RCC_OscConfig+0x30c>
 80037f6:	4b5f      	ldr	r3, [pc, #380]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	4a5e      	ldr	r2, [pc, #376]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 80037fc:	f043 0304 	orr.w	r3, r3, #4
 8003800:	6713      	str	r3, [r2, #112]	; 0x70
 8003802:	4b5c      	ldr	r3, [pc, #368]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003806:	4a5b      	ldr	r2, [pc, #364]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	6713      	str	r3, [r2, #112]	; 0x70
 800380e:	e00b      	b.n	8003828 <HAL_RCC_OscConfig+0x324>
 8003810:	4b58      	ldr	r3, [pc, #352]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003814:	4a57      	ldr	r2, [pc, #348]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003816:	f023 0301 	bic.w	r3, r3, #1
 800381a:	6713      	str	r3, [r2, #112]	; 0x70
 800381c:	4b55      	ldr	r3, [pc, #340]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003820:	4a54      	ldr	r2, [pc, #336]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003822:	f023 0304 	bic.w	r3, r3, #4
 8003826:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d015      	beq.n	800385c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7fd fd5c 	bl	80012ec <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003836:	e00a      	b.n	800384e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003838:	f7fd fd58 	bl	80012ec <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	f241 3288 	movw	r2, #5000	; 0x1388
 8003846:	4293      	cmp	r3, r2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e0cb      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384e:	4b49      	ldr	r3, [pc, #292]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0ee      	beq.n	8003838 <HAL_RCC_OscConfig+0x334>
 800385a:	e014      	b.n	8003886 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385c:	f7fd fd46 	bl	80012ec <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003862:	e00a      	b.n	800387a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003864:	f7fd fd42 	bl	80012ec <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003872:	4293      	cmp	r3, r2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e0b5      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800387a:	4b3e      	ldr	r3, [pc, #248]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1ee      	bne.n	8003864 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003886:	7dfb      	ldrb	r3, [r7, #23]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d105      	bne.n	8003898 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800388c:	4b39      	ldr	r3, [pc, #228]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	4a38      	ldr	r2, [pc, #224]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003896:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 80a1 	beq.w	80039e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038a2:	4b34      	ldr	r3, [pc, #208]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d05c      	beq.n	8003968 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d141      	bne.n	800393a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b6:	4b31      	ldr	r3, [pc, #196]	; (800397c <HAL_RCC_OscConfig+0x478>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038bc:	f7fd fd16 	bl	80012ec <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c4:	f7fd fd12 	bl	80012ec <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e087      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d6:	4b27      	ldr	r3, [pc, #156]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69da      	ldr	r2, [r3, #28]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	019b      	lsls	r3, r3, #6
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	085b      	lsrs	r3, r3, #1
 80038fa:	3b01      	subs	r3, #1
 80038fc:	041b      	lsls	r3, r3, #16
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	061b      	lsls	r3, r3, #24
 8003906:	491b      	ldr	r1, [pc, #108]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800390c:	4b1b      	ldr	r3, [pc, #108]	; (800397c <HAL_RCC_OscConfig+0x478>)
 800390e:	2201      	movs	r2, #1
 8003910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003912:	f7fd fceb 	bl	80012ec <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800391a:	f7fd fce7 	bl	80012ec <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e05c      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392c:	4b11      	ldr	r3, [pc, #68]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <HAL_RCC_OscConfig+0x416>
 8003938:	e054      	b.n	80039e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393a:	4b10      	ldr	r3, [pc, #64]	; (800397c <HAL_RCC_OscConfig+0x478>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fd fcd4 	bl	80012ec <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003948:	f7fd fcd0 	bl	80012ec <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e045      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_RCC_OscConfig+0x470>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x444>
 8003966:	e03d      	b.n	80039e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d107      	bne.n	8003980 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e038      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
 8003974:	40023800 	.word	0x40023800
 8003978:	40007000 	.word	0x40007000
 800397c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003980:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <HAL_RCC_OscConfig+0x4ec>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d028      	beq.n	80039e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d121      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d11a      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039b0:	4013      	ands	r3, r2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d111      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	085b      	lsrs	r3, r3, #1
 80039c8:	3b01      	subs	r3, #1
 80039ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d107      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40023800 	.word	0x40023800

080039f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0cc      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a08:	4b68      	ldr	r3, [pc, #416]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d90c      	bls.n	8003a30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a16:	4b65      	ldr	r3, [pc, #404]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	4b63      	ldr	r3, [pc, #396]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0b8      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d020      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a48:	4b59      	ldr	r3, [pc, #356]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4a58      	ldr	r2, [pc, #352]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a60:	4b53      	ldr	r3, [pc, #332]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	4a52      	ldr	r2, [pc, #328]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a6c:	4b50      	ldr	r3, [pc, #320]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	494d      	ldr	r1, [pc, #308]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d044      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d107      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a92:	4b47      	ldr	r3, [pc, #284]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d119      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e07f      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d003      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	d107      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab2:	4b3f      	ldr	r3, [pc, #252]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e06f      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac2:	4b3b      	ldr	r3, [pc, #236]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e067      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ad2:	4b37      	ldr	r3, [pc, #220]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f023 0203 	bic.w	r2, r3, #3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	4934      	ldr	r1, [pc, #208]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ae4:	f7fd fc02 	bl	80012ec <HAL_GetTick>
 8003ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aea:	e00a      	b.n	8003b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aec:	f7fd fbfe 	bl	80012ec <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e04f      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b02:	4b2b      	ldr	r3, [pc, #172]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 020c 	and.w	r2, r3, #12
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d1eb      	bne.n	8003aec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b14:	4b25      	ldr	r3, [pc, #148]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d20c      	bcs.n	8003b3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b22:	4b22      	ldr	r3, [pc, #136]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2a:	4b20      	ldr	r3, [pc, #128]	; (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e032      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b48:	4b19      	ldr	r3, [pc, #100]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	4916      	ldr	r1, [pc, #88]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b66:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	490e      	ldr	r1, [pc, #56]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b7a:	f000 f821 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	091b      	lsrs	r3, r3, #4
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	490a      	ldr	r1, [pc, #40]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b8c:	5ccb      	ldrb	r3, [r1, r3]
 8003b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b92:	4a09      	ldr	r2, [pc, #36]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fd fb62 	bl	8001264 <HAL_InitTick>

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40023c00 	.word	0x40023c00
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	0800548c 	.word	0x0800548c
 8003bb8:	20000000 	.word	0x20000000
 8003bbc:	20000004 	.word	0x20000004

08003bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bc4:	b090      	sub	sp, #64	; 0x40
 8003bc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	637b      	str	r3, [r7, #52]	; 0x34
 8003bcc:	2300      	movs	r3, #0
 8003bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bd8:	4b59      	ldr	r3, [pc, #356]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 030c 	and.w	r3, r3, #12
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d00d      	beq.n	8003c00 <HAL_RCC_GetSysClockFreq+0x40>
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	f200 80a1 	bhi.w	8003d2c <HAL_RCC_GetSysClockFreq+0x16c>
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d003      	beq.n	8003bfa <HAL_RCC_GetSysClockFreq+0x3a>
 8003bf2:	e09b      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bf4:	4b53      	ldr	r3, [pc, #332]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bf6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003bf8:	e09b      	b.n	8003d32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bfa:	4b53      	ldr	r3, [pc, #332]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bfc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bfe:	e098      	b.n	8003d32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c00:	4b4f      	ldr	r3, [pc, #316]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c08:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c0a:	4b4d      	ldr	r3, [pc, #308]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d028      	beq.n	8003c68 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c16:	4b4a      	ldr	r3, [pc, #296]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	099b      	lsrs	r3, r3, #6
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	623b      	str	r3, [r7, #32]
 8003c20:	627a      	str	r2, [r7, #36]	; 0x24
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c28:	2100      	movs	r1, #0
 8003c2a:	4b47      	ldr	r3, [pc, #284]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c2c:	fb03 f201 	mul.w	r2, r3, r1
 8003c30:	2300      	movs	r3, #0
 8003c32:	fb00 f303 	mul.w	r3, r0, r3
 8003c36:	4413      	add	r3, r2
 8003c38:	4a43      	ldr	r2, [pc, #268]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c3a:	fba0 1202 	umull	r1, r2, r0, r2
 8003c3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c40:	460a      	mov	r2, r1
 8003c42:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c46:	4413      	add	r3, r2
 8003c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	61bb      	str	r3, [r7, #24]
 8003c50:	61fa      	str	r2, [r7, #28]
 8003c52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c5a:	f7fc fabd 	bl	80001d8 <__aeabi_uldivmod>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4613      	mov	r3, r2
 8003c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c66:	e053      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c68:	4b35      	ldr	r3, [pc, #212]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	099b      	lsrs	r3, r3, #6
 8003c6e:	2200      	movs	r2, #0
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	617a      	str	r2, [r7, #20]
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c7a:	f04f 0b00 	mov.w	fp, #0
 8003c7e:	4652      	mov	r2, sl
 8003c80:	465b      	mov	r3, fp
 8003c82:	f04f 0000 	mov.w	r0, #0
 8003c86:	f04f 0100 	mov.w	r1, #0
 8003c8a:	0159      	lsls	r1, r3, #5
 8003c8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c90:	0150      	lsls	r0, r2, #5
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	ebb2 080a 	subs.w	r8, r2, sl
 8003c9a:	eb63 090b 	sbc.w	r9, r3, fp
 8003c9e:	f04f 0200 	mov.w	r2, #0
 8003ca2:	f04f 0300 	mov.w	r3, #0
 8003ca6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003caa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cb2:	ebb2 0408 	subs.w	r4, r2, r8
 8003cb6:	eb63 0509 	sbc.w	r5, r3, r9
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	00eb      	lsls	r3, r5, #3
 8003cc4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cc8:	00e2      	lsls	r2, r4, #3
 8003cca:	4614      	mov	r4, r2
 8003ccc:	461d      	mov	r5, r3
 8003cce:	eb14 030a 	adds.w	r3, r4, sl
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	eb45 030b 	adc.w	r3, r5, fp
 8003cd8:	607b      	str	r3, [r7, #4]
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	028b      	lsls	r3, r1, #10
 8003cea:	4621      	mov	r1, r4
 8003cec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	028a      	lsls	r2, r1, #10
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	60fa      	str	r2, [r7, #12]
 8003d00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d04:	f7fc fa68 	bl	80001d8 <__aeabi_uldivmod>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	0c1b      	lsrs	r3, r3, #16
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d2a:	e002      	b.n	8003d32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d2e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3740      	adds	r7, #64	; 0x40
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d3e:	bf00      	nop
 8003d40:	40023800 	.word	0x40023800
 8003d44:	00f42400 	.word	0x00f42400
 8003d48:	017d7840 	.word	0x017d7840

08003d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d50:	4b03      	ldr	r3, [pc, #12]	; (8003d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d52:	681b      	ldr	r3, [r3, #0]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	20000000 	.word	0x20000000

08003d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d68:	f7ff fff0 	bl	8003d4c <HAL_RCC_GetHCLKFreq>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	0a9b      	lsrs	r3, r3, #10
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	4903      	ldr	r1, [pc, #12]	; (8003d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d7a:	5ccb      	ldrb	r3, [r1, r3]
 8003d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40023800 	.word	0x40023800
 8003d88:	0800549c 	.word	0x0800549c

08003d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d90:	f7ff ffdc 	bl	8003d4c <HAL_RCC_GetHCLKFreq>
 8003d94:	4602      	mov	r2, r0
 8003d96:	4b05      	ldr	r3, [pc, #20]	; (8003dac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	0b5b      	lsrs	r3, r3, #13
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	4903      	ldr	r1, [pc, #12]	; (8003db0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003da2:	5ccb      	ldrb	r3, [r1, r3]
 8003da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40023800 	.word	0x40023800
 8003db0:	0800549c 	.word	0x0800549c

08003db4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e07b      	b.n	8003ebe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d108      	bne.n	8003de0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dd6:	d009      	beq.n	8003dec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	61da      	str	r2, [r3, #28]
 8003dde:	e005      	b.n	8003dec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fd f80e 	bl	8000e28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e70:	ea42 0103 	orr.w	r1, r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	0c1b      	lsrs	r3, r3, #16
 8003e8a:	f003 0104 	and.w	r1, r3, #4
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	f003 0210 	and.w	r2, r3, #16
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69da      	ldr	r2, [r3, #28]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	099b      	lsrs	r3, r3, #6
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10f      	bne.n	8003f0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	099b      	lsrs	r3, r3, #6
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d004      	beq.n	8003f0c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	4798      	blx	r3
    return;
 8003f0a:	e0d7      	b.n	80040bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <HAL_SPI_IRQHandler+0x66>
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	09db      	lsrs	r3, r3, #7
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d004      	beq.n	8003f2e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	4798      	blx	r3
    return;
 8003f2c:	e0c6      	b.n	80040bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10c      	bne.n	8003f54 <HAL_SPI_IRQHandler+0x8c>
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	099b      	lsrs	r3, r3, #6
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	0a1b      	lsrs	r3, r3, #8
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 80b4 	beq.w	80040bc <HAL_SPI_IRQHandler+0x1f4>
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80ad 	beq.w	80040bc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	099b      	lsrs	r3, r3, #6
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d023      	beq.n	8003fb6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d011      	beq.n	8003f9e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7e:	f043 0204 	orr.w	r2, r3, #4
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	e00b      	b.n	8003fb6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	693b      	ldr	r3, [r7, #16]
        return;
 8003fb4:	e082      	b.n	80040bc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	095b      	lsrs	r3, r3, #5
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d014      	beq.n	8003fec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc6:	f043 0201 	orr.w	r2, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	0a1b      	lsrs	r3, r3, #8
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00c      	beq.n	8004012 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffc:	f043 0208 	orr.w	r2, r3, #8
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004004:	2300      	movs	r3, #0
 8004006:	60bb      	str	r3, [r7, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	60bb      	str	r3, [r7, #8]
 8004010:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004016:	2b00      	cmp	r3, #0
 8004018:	d04f      	beq.n	80040ba <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004028:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d104      	bne.n	8004046 <HAL_SPI_IRQHandler+0x17e>
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d034      	beq.n	80040b0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0203 	bic.w	r2, r2, #3
 8004054:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405a:	2b00      	cmp	r3, #0
 800405c:	d011      	beq.n	8004082 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004062:	4a18      	ldr	r2, [pc, #96]	; (80040c4 <HAL_SPI_IRQHandler+0x1fc>)
 8004064:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406a:	4618      	mov	r0, r3
 800406c:	f7fd fa5b 	bl	8001526 <HAL_DMA_Abort_IT>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004086:	2b00      	cmp	r3, #0
 8004088:	d016      	beq.n	80040b8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800408e:	4a0d      	ldr	r2, [pc, #52]	; (80040c4 <HAL_SPI_IRQHandler+0x1fc>)
 8004090:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004096:	4618      	mov	r0, r3
 8004098:	f7fd fa45 	bl	8001526 <HAL_DMA_Abort_IT>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80040ae:	e003      	b.n	80040b8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f809 	bl	80040c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80040b6:	e000      	b.n	80040ba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80040b8:	bf00      	nop
    return;
 80040ba:	bf00      	nop
  }
}
 80040bc:	3720      	adds	r7, #32
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	080040dd 	.word	0x080040dd

080040c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f7ff ffe6 	bl	80040c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040fc:	bf00      	nop
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e041      	b.n	800419a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fc feec 	bl	8000f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3304      	adds	r3, #4
 8004140:	4619      	mov	r1, r3
 8004142:	4610      	mov	r0, r2
 8004144:	f000 fb1c 	bl	8004780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d001      	beq.n	80041bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e03c      	b.n	8004236 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1e      	ldr	r2, [pc, #120]	; (8004244 <HAL_TIM_Base_Start+0xa0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d018      	beq.n	8004200 <HAL_TIM_Base_Start+0x5c>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d6:	d013      	beq.n	8004200 <HAL_TIM_Base_Start+0x5c>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1a      	ldr	r2, [pc, #104]	; (8004248 <HAL_TIM_Base_Start+0xa4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00e      	beq.n	8004200 <HAL_TIM_Base_Start+0x5c>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a19      	ldr	r2, [pc, #100]	; (800424c <HAL_TIM_Base_Start+0xa8>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d009      	beq.n	8004200 <HAL_TIM_Base_Start+0x5c>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a17      	ldr	r2, [pc, #92]	; (8004250 <HAL_TIM_Base_Start+0xac>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d004      	beq.n	8004200 <HAL_TIM_Base_Start+0x5c>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a16      	ldr	r2, [pc, #88]	; (8004254 <HAL_TIM_Base_Start+0xb0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d111      	bne.n	8004224 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2b06      	cmp	r3, #6
 8004210:	d010      	beq.n	8004234 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0201 	orr.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004222:	e007      	b.n	8004234 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40010000 	.word	0x40010000
 8004248:	40000400 	.word	0x40000400
 800424c:	40000800 	.word	0x40000800
 8004250:	40000c00 	.word	0x40000c00
 8004254:	40014000 	.word	0x40014000

08004258 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e041      	b.n	80042ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f839 	bl	80042f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3304      	adds	r3, #4
 8004294:	4619      	mov	r1, r3
 8004296:	4610      	mov	r0, r2
 8004298:	f000 fa72 	bl	8004780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
	...

0800430c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d109      	bne.n	8004330 <HAL_TIM_PWM_Start+0x24>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b01      	cmp	r3, #1
 8004326:	bf14      	ite	ne
 8004328:	2301      	movne	r3, #1
 800432a:	2300      	moveq	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	e022      	b.n	8004376 <HAL_TIM_PWM_Start+0x6a>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b04      	cmp	r3, #4
 8004334:	d109      	bne.n	800434a <HAL_TIM_PWM_Start+0x3e>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b01      	cmp	r3, #1
 8004340:	bf14      	ite	ne
 8004342:	2301      	movne	r3, #1
 8004344:	2300      	moveq	r3, #0
 8004346:	b2db      	uxtb	r3, r3
 8004348:	e015      	b.n	8004376 <HAL_TIM_PWM_Start+0x6a>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b08      	cmp	r3, #8
 800434e:	d109      	bne.n	8004364 <HAL_TIM_PWM_Start+0x58>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	bf14      	ite	ne
 800435c:	2301      	movne	r3, #1
 800435e:	2300      	moveq	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	e008      	b.n	8004376 <HAL_TIM_PWM_Start+0x6a>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b01      	cmp	r3, #1
 800436e:	bf14      	ite	ne
 8004370:	2301      	movne	r3, #1
 8004372:	2300      	moveq	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e068      	b.n	8004450 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d104      	bne.n	800438e <HAL_TIM_PWM_Start+0x82>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800438c:	e013      	b.n	80043b6 <HAL_TIM_PWM_Start+0xaa>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b04      	cmp	r3, #4
 8004392:	d104      	bne.n	800439e <HAL_TIM_PWM_Start+0x92>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800439c:	e00b      	b.n	80043b6 <HAL_TIM_PWM_Start+0xaa>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d104      	bne.n	80043ae <HAL_TIM_PWM_Start+0xa2>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043ac:	e003      	b.n	80043b6 <HAL_TIM_PWM_Start+0xaa>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2202      	movs	r2, #2
 80043b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2201      	movs	r2, #1
 80043bc:	6839      	ldr	r1, [r7, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fc84 	bl	8004ccc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a23      	ldr	r2, [pc, #140]	; (8004458 <HAL_TIM_PWM_Start+0x14c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d107      	bne.n	80043de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a1d      	ldr	r2, [pc, #116]	; (8004458 <HAL_TIM_PWM_Start+0x14c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d018      	beq.n	800441a <HAL_TIM_PWM_Start+0x10e>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f0:	d013      	beq.n	800441a <HAL_TIM_PWM_Start+0x10e>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a19      	ldr	r2, [pc, #100]	; (800445c <HAL_TIM_PWM_Start+0x150>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00e      	beq.n	800441a <HAL_TIM_PWM_Start+0x10e>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a17      	ldr	r2, [pc, #92]	; (8004460 <HAL_TIM_PWM_Start+0x154>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d009      	beq.n	800441a <HAL_TIM_PWM_Start+0x10e>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a16      	ldr	r2, [pc, #88]	; (8004464 <HAL_TIM_PWM_Start+0x158>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d004      	beq.n	800441a <HAL_TIM_PWM_Start+0x10e>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a14      	ldr	r2, [pc, #80]	; (8004468 <HAL_TIM_PWM_Start+0x15c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d111      	bne.n	800443e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b06      	cmp	r3, #6
 800442a:	d010      	beq.n	800444e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443c:	e007      	b.n	800444e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0201 	orr.w	r2, r2, #1
 800444c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40010000 	.word	0x40010000
 800445c:	40000400 	.word	0x40000400
 8004460:	40000800 	.word	0x40000800
 8004464:	40000c00 	.word	0x40000c00
 8004468:	40014000 	.word	0x40014000

0800446c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004486:	2302      	movs	r3, #2
 8004488:	e0ae      	b.n	80045e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b0c      	cmp	r3, #12
 8004496:	f200 809f 	bhi.w	80045d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800449a:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800449c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a0:	080044d5 	.word	0x080044d5
 80044a4:	080045d9 	.word	0x080045d9
 80044a8:	080045d9 	.word	0x080045d9
 80044ac:	080045d9 	.word	0x080045d9
 80044b0:	08004515 	.word	0x08004515
 80044b4:	080045d9 	.word	0x080045d9
 80044b8:	080045d9 	.word	0x080045d9
 80044bc:	080045d9 	.word	0x080045d9
 80044c0:	08004557 	.word	0x08004557
 80044c4:	080045d9 	.word	0x080045d9
 80044c8:	080045d9 	.word	0x080045d9
 80044cc:	080045d9 	.word	0x080045d9
 80044d0:	08004597 	.word	0x08004597
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68b9      	ldr	r1, [r7, #8]
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 f9d0 	bl	8004880 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699a      	ldr	r2, [r3, #24]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0208 	orr.w	r2, r2, #8
 80044ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699a      	ldr	r2, [r3, #24]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0204 	bic.w	r2, r2, #4
 80044fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6999      	ldr	r1, [r3, #24]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	691a      	ldr	r2, [r3, #16]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	619a      	str	r2, [r3, #24]
      break;
 8004512:	e064      	b.n	80045de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fa16 	bl	800494c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699a      	ldr	r2, [r3, #24]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800452e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800453e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6999      	ldr	r1, [r3, #24]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	021a      	lsls	r2, r3, #8
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	619a      	str	r2, [r3, #24]
      break;
 8004554:	e043      	b.n	80045de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68b9      	ldr	r1, [r7, #8]
 800455c:	4618      	mov	r0, r3
 800455e:	f000 fa61 	bl	8004a24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69da      	ldr	r2, [r3, #28]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0208 	orr.w	r2, r2, #8
 8004570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69da      	ldr	r2, [r3, #28]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0204 	bic.w	r2, r2, #4
 8004580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69d9      	ldr	r1, [r3, #28]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	61da      	str	r2, [r3, #28]
      break;
 8004594:	e023      	b.n	80045de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	4618      	mov	r0, r3
 800459e:	f000 faab 	bl	8004af8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69da      	ldr	r2, [r3, #28]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69da      	ldr	r2, [r3, #28]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69d9      	ldr	r1, [r3, #28]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	021a      	lsls	r2, r3, #8
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	61da      	str	r2, [r3, #28]
      break;
 80045d6:	e002      	b.n	80045de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	75fb      	strb	r3, [r7, #23]
      break;
 80045dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_TIM_ConfigClockSource+0x1c>
 8004608:	2302      	movs	r3, #2
 800460a:	e0b4      	b.n	8004776 <HAL_TIM_ConfigClockSource+0x186>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800462a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004632:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004644:	d03e      	beq.n	80046c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800464a:	f200 8087 	bhi.w	800475c <HAL_TIM_ConfigClockSource+0x16c>
 800464e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004652:	f000 8086 	beq.w	8004762 <HAL_TIM_ConfigClockSource+0x172>
 8004656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465a:	d87f      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 800465c:	2b70      	cmp	r3, #112	; 0x70
 800465e:	d01a      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0xa6>
 8004660:	2b70      	cmp	r3, #112	; 0x70
 8004662:	d87b      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 8004664:	2b60      	cmp	r3, #96	; 0x60
 8004666:	d050      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x11a>
 8004668:	2b60      	cmp	r3, #96	; 0x60
 800466a:	d877      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 800466c:	2b50      	cmp	r3, #80	; 0x50
 800466e:	d03c      	beq.n	80046ea <HAL_TIM_ConfigClockSource+0xfa>
 8004670:	2b50      	cmp	r3, #80	; 0x50
 8004672:	d873      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 8004674:	2b40      	cmp	r3, #64	; 0x40
 8004676:	d058      	beq.n	800472a <HAL_TIM_ConfigClockSource+0x13a>
 8004678:	2b40      	cmp	r3, #64	; 0x40
 800467a:	d86f      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 800467c:	2b30      	cmp	r3, #48	; 0x30
 800467e:	d064      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x15a>
 8004680:	2b30      	cmp	r3, #48	; 0x30
 8004682:	d86b      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 8004684:	2b20      	cmp	r3, #32
 8004686:	d060      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x15a>
 8004688:	2b20      	cmp	r3, #32
 800468a:	d867      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 800468c:	2b00      	cmp	r3, #0
 800468e:	d05c      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x15a>
 8004690:	2b10      	cmp	r3, #16
 8004692:	d05a      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x15a>
 8004694:	e062      	b.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6899      	ldr	r1, [r3, #8]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f000 faf1 	bl	8004c8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	609a      	str	r2, [r3, #8]
      break;
 80046c2:	e04f      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6818      	ldr	r0, [r3, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	6899      	ldr	r1, [r3, #8]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f000 fada 	bl	8004c8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046e6:	609a      	str	r2, [r3, #8]
      break;
 80046e8:	e03c      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6859      	ldr	r1, [r3, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	461a      	mov	r2, r3
 80046f8:	f000 fa4e 	bl	8004b98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2150      	movs	r1, #80	; 0x50
 8004702:	4618      	mov	r0, r3
 8004704:	f000 faa7 	bl	8004c56 <TIM_ITRx_SetConfig>
      break;
 8004708:	e02c      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	6859      	ldr	r1, [r3, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	461a      	mov	r2, r3
 8004718:	f000 fa6d 	bl	8004bf6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2160      	movs	r1, #96	; 0x60
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fa97 	bl	8004c56 <TIM_ITRx_SetConfig>
      break;
 8004728:	e01c      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6859      	ldr	r1, [r3, #4]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	461a      	mov	r2, r3
 8004738:	f000 fa2e 	bl	8004b98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2140      	movs	r1, #64	; 0x40
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fa87 	bl	8004c56 <TIM_ITRx_SetConfig>
      break;
 8004748:	e00c      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4619      	mov	r1, r3
 8004754:	4610      	mov	r0, r2
 8004756:	f000 fa7e 	bl	8004c56 <TIM_ITRx_SetConfig>
      break;
 800475a:	e003      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
      break;
 8004760:	e000      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004762:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004774:	7bfb      	ldrb	r3, [r7, #15]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a34      	ldr	r2, [pc, #208]	; (8004864 <TIM_Base_SetConfig+0xe4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d00f      	beq.n	80047b8 <TIM_Base_SetConfig+0x38>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800479e:	d00b      	beq.n	80047b8 <TIM_Base_SetConfig+0x38>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a31      	ldr	r2, [pc, #196]	; (8004868 <TIM_Base_SetConfig+0xe8>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d007      	beq.n	80047b8 <TIM_Base_SetConfig+0x38>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a30      	ldr	r2, [pc, #192]	; (800486c <TIM_Base_SetConfig+0xec>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d003      	beq.n	80047b8 <TIM_Base_SetConfig+0x38>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a2f      	ldr	r2, [pc, #188]	; (8004870 <TIM_Base_SetConfig+0xf0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d108      	bne.n	80047ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a25      	ldr	r2, [pc, #148]	; (8004864 <TIM_Base_SetConfig+0xe4>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d01b      	beq.n	800480a <TIM_Base_SetConfig+0x8a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d8:	d017      	beq.n	800480a <TIM_Base_SetConfig+0x8a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a22      	ldr	r2, [pc, #136]	; (8004868 <TIM_Base_SetConfig+0xe8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d013      	beq.n	800480a <TIM_Base_SetConfig+0x8a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a21      	ldr	r2, [pc, #132]	; (800486c <TIM_Base_SetConfig+0xec>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00f      	beq.n	800480a <TIM_Base_SetConfig+0x8a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a20      	ldr	r2, [pc, #128]	; (8004870 <TIM_Base_SetConfig+0xf0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00b      	beq.n	800480a <TIM_Base_SetConfig+0x8a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a1f      	ldr	r2, [pc, #124]	; (8004874 <TIM_Base_SetConfig+0xf4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d007      	beq.n	800480a <TIM_Base_SetConfig+0x8a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a1e      	ldr	r2, [pc, #120]	; (8004878 <TIM_Base_SetConfig+0xf8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d003      	beq.n	800480a <TIM_Base_SetConfig+0x8a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a1d      	ldr	r2, [pc, #116]	; (800487c <TIM_Base_SetConfig+0xfc>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d108      	bne.n	800481c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a08      	ldr	r2, [pc, #32]	; (8004864 <TIM_Base_SetConfig+0xe4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d103      	bne.n	8004850 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	615a      	str	r2, [r3, #20]
}
 8004856:	bf00      	nop
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40010000 	.word	0x40010000
 8004868:	40000400 	.word	0x40000400
 800486c:	40000800 	.word	0x40000800
 8004870:	40000c00 	.word	0x40000c00
 8004874:	40014000 	.word	0x40014000
 8004878:	40014400 	.word	0x40014400
 800487c:	40014800 	.word	0x40014800

08004880 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	f023 0201 	bic.w	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0303 	bic.w	r3, r3, #3
 80048b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f023 0302 	bic.w	r3, r3, #2
 80048c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a1c      	ldr	r2, [pc, #112]	; (8004948 <TIM_OC1_SetConfig+0xc8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d10c      	bne.n	80048f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f023 0308 	bic.w	r3, r3, #8
 80048e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f023 0304 	bic.w	r3, r3, #4
 80048f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a13      	ldr	r2, [pc, #76]	; (8004948 <TIM_OC1_SetConfig+0xc8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d111      	bne.n	8004922 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800490c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	621a      	str	r2, [r3, #32]
}
 800493c:	bf00      	nop
 800493e:	371c      	adds	r7, #28
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	40010000 	.word	0x40010000

0800494c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	f023 0210 	bic.w	r2, r3, #16
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800497a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	021b      	lsls	r3, r3, #8
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	4313      	orrs	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f023 0320 	bic.w	r3, r3, #32
 8004996:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a1e      	ldr	r2, [pc, #120]	; (8004a20 <TIM_OC2_SetConfig+0xd4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d10d      	bne.n	80049c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4313      	orrs	r3, r2
 80049be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a15      	ldr	r2, [pc, #84]	; (8004a20 <TIM_OC2_SetConfig+0xd4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d113      	bne.n	80049f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	621a      	str	r2, [r3, #32]
}
 8004a12:	bf00      	nop
 8004a14:	371c      	adds	r7, #28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40010000 	.word	0x40010000

08004a24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0303 	bic.w	r3, r3, #3
 8004a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	021b      	lsls	r3, r3, #8
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a1d      	ldr	r2, [pc, #116]	; (8004af4 <TIM_OC3_SetConfig+0xd0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d10d      	bne.n	8004a9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a14      	ldr	r2, [pc, #80]	; (8004af4 <TIM_OC3_SetConfig+0xd0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d113      	bne.n	8004ace <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	621a      	str	r2, [r3, #32]
}
 8004ae8:	bf00      	nop
 8004aea:	371c      	adds	r7, #28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	40010000 	.word	0x40010000

08004af8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	021b      	lsls	r3, r3, #8
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	031b      	lsls	r3, r3, #12
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a10      	ldr	r2, [pc, #64]	; (8004b94 <TIM_OC4_SetConfig+0x9c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d109      	bne.n	8004b6c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	019b      	lsls	r3, r3, #6
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	621a      	str	r2, [r3, #32]
}
 8004b86:	bf00      	nop
 8004b88:	371c      	adds	r7, #28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	40010000 	.word	0x40010000

08004b98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f023 0201 	bic.w	r2, r3, #1
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f023 030a 	bic.w	r3, r3, #10
 8004bd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	621a      	str	r2, [r3, #32]
}
 8004bea:	bf00      	nop
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b087      	sub	sp, #28
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	60f8      	str	r0, [r7, #12]
 8004bfe:	60b9      	str	r1, [r7, #8]
 8004c00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f023 0210 	bic.w	r2, r3, #16
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	031b      	lsls	r3, r3, #12
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	621a      	str	r2, [r3, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b085      	sub	sp, #20
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f043 0307 	orr.w	r3, r3, #7
 8004c78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	609a      	str	r2, [r3, #8]
}
 8004c80:	bf00      	nop
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
 8004c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ca6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	021a      	lsls	r2, r3, #8
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	609a      	str	r2, [r3, #8]
}
 8004cc0:	bf00      	nop
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f003 031f 	and.w	r3, r3, #31
 8004cde:	2201      	movs	r2, #1
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a1a      	ldr	r2, [r3, #32]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	43db      	mvns	r3, r3
 8004cee:	401a      	ands	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a1a      	ldr	r2, [r3, #32]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f003 031f 	and.w	r3, r3, #31
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	fa01 f303 	lsl.w	r3, r1, r3
 8004d04:	431a      	orrs	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	621a      	str	r2, [r3, #32]
}
 8004d0a:	bf00      	nop
 8004d0c:	371c      	adds	r7, #28
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
	...

08004d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e050      	b.n	8004dd2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a1c      	ldr	r2, [pc, #112]	; (8004de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d018      	beq.n	8004da6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7c:	d013      	beq.n	8004da6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a18      	ldr	r2, [pc, #96]	; (8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00e      	beq.n	8004da6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a16      	ldr	r2, [pc, #88]	; (8004de8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d009      	beq.n	8004da6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a15      	ldr	r2, [pc, #84]	; (8004dec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d004      	beq.n	8004da6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a13      	ldr	r2, [pc, #76]	; (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d10c      	bne.n	8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40010000 	.word	0x40010000
 8004de4:	40000400 	.word	0x40000400
 8004de8:	40000800 	.word	0x40000800
 8004dec:	40000c00 	.word	0x40000c00
 8004df0:	40014000 	.word	0x40014000

08004df4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e03d      	b.n	8004e8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e03f      	b.n	8004f2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fc f8ce 	bl	8001060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2224      	movs	r2, #36	; 0x24
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f829 	bl	8004f34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695a      	ldr	r2, [r3, #20]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f38:	b0c0      	sub	sp, #256	; 0x100
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f50:	68d9      	ldr	r1, [r3, #12]
 8004f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	ea40 0301 	orr.w	r3, r0, r1
 8004f5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f8c:	f021 010c 	bic.w	r1, r1, #12
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f9a:	430b      	orrs	r3, r1
 8004f9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fae:	6999      	ldr	r1, [r3, #24]
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	ea40 0301 	orr.w	r3, r0, r1
 8004fba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	4b8f      	ldr	r3, [pc, #572]	; (8005200 <UART_SetConfig+0x2cc>)
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d005      	beq.n	8004fd4 <UART_SetConfig+0xa0>
 8004fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4b8d      	ldr	r3, [pc, #564]	; (8005204 <UART_SetConfig+0x2d0>)
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d104      	bne.n	8004fde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fd4:	f7fe feda 	bl	8003d8c <HAL_RCC_GetPCLK2Freq>
 8004fd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004fdc:	e003      	b.n	8004fe6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fde:	f7fe fec1 	bl	8003d64 <HAL_RCC_GetPCLK1Freq>
 8004fe2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff0:	f040 810c 	bne.w	800520c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ffe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005002:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005006:	4622      	mov	r2, r4
 8005008:	462b      	mov	r3, r5
 800500a:	1891      	adds	r1, r2, r2
 800500c:	65b9      	str	r1, [r7, #88]	; 0x58
 800500e:	415b      	adcs	r3, r3
 8005010:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005012:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005016:	4621      	mov	r1, r4
 8005018:	eb12 0801 	adds.w	r8, r2, r1
 800501c:	4629      	mov	r1, r5
 800501e:	eb43 0901 	adc.w	r9, r3, r1
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800502e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005036:	4690      	mov	r8, r2
 8005038:	4699      	mov	r9, r3
 800503a:	4623      	mov	r3, r4
 800503c:	eb18 0303 	adds.w	r3, r8, r3
 8005040:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005044:	462b      	mov	r3, r5
 8005046:	eb49 0303 	adc.w	r3, r9, r3
 800504a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800504e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800505a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800505e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005062:	460b      	mov	r3, r1
 8005064:	18db      	adds	r3, r3, r3
 8005066:	653b      	str	r3, [r7, #80]	; 0x50
 8005068:	4613      	mov	r3, r2
 800506a:	eb42 0303 	adc.w	r3, r2, r3
 800506e:	657b      	str	r3, [r7, #84]	; 0x54
 8005070:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005074:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005078:	f7fb f8ae 	bl	80001d8 <__aeabi_uldivmod>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	4b61      	ldr	r3, [pc, #388]	; (8005208 <UART_SetConfig+0x2d4>)
 8005082:	fba3 2302 	umull	r2, r3, r3, r2
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	011c      	lsls	r4, r3, #4
 800508a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800508e:	2200      	movs	r2, #0
 8005090:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005094:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005098:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800509c:	4642      	mov	r2, r8
 800509e:	464b      	mov	r3, r9
 80050a0:	1891      	adds	r1, r2, r2
 80050a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80050a4:	415b      	adcs	r3, r3
 80050a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050ac:	4641      	mov	r1, r8
 80050ae:	eb12 0a01 	adds.w	sl, r2, r1
 80050b2:	4649      	mov	r1, r9
 80050b4:	eb43 0b01 	adc.w	fp, r3, r1
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050cc:	4692      	mov	sl, r2
 80050ce:	469b      	mov	fp, r3
 80050d0:	4643      	mov	r3, r8
 80050d2:	eb1a 0303 	adds.w	r3, sl, r3
 80050d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050da:	464b      	mov	r3, r9
 80050dc:	eb4b 0303 	adc.w	r3, fp, r3
 80050e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80050f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050f8:	460b      	mov	r3, r1
 80050fa:	18db      	adds	r3, r3, r3
 80050fc:	643b      	str	r3, [r7, #64]	; 0x40
 80050fe:	4613      	mov	r3, r2
 8005100:	eb42 0303 	adc.w	r3, r2, r3
 8005104:	647b      	str	r3, [r7, #68]	; 0x44
 8005106:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800510a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800510e:	f7fb f863 	bl	80001d8 <__aeabi_uldivmod>
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	4611      	mov	r1, r2
 8005118:	4b3b      	ldr	r3, [pc, #236]	; (8005208 <UART_SetConfig+0x2d4>)
 800511a:	fba3 2301 	umull	r2, r3, r3, r1
 800511e:	095b      	lsrs	r3, r3, #5
 8005120:	2264      	movs	r2, #100	; 0x64
 8005122:	fb02 f303 	mul.w	r3, r2, r3
 8005126:	1acb      	subs	r3, r1, r3
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800512e:	4b36      	ldr	r3, [pc, #216]	; (8005208 <UART_SetConfig+0x2d4>)
 8005130:	fba3 2302 	umull	r2, r3, r3, r2
 8005134:	095b      	lsrs	r3, r3, #5
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800513c:	441c      	add	r4, r3
 800513e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005142:	2200      	movs	r2, #0
 8005144:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005148:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800514c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005150:	4642      	mov	r2, r8
 8005152:	464b      	mov	r3, r9
 8005154:	1891      	adds	r1, r2, r2
 8005156:	63b9      	str	r1, [r7, #56]	; 0x38
 8005158:	415b      	adcs	r3, r3
 800515a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800515c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005160:	4641      	mov	r1, r8
 8005162:	1851      	adds	r1, r2, r1
 8005164:	6339      	str	r1, [r7, #48]	; 0x30
 8005166:	4649      	mov	r1, r9
 8005168:	414b      	adcs	r3, r1
 800516a:	637b      	str	r3, [r7, #52]	; 0x34
 800516c:	f04f 0200 	mov.w	r2, #0
 8005170:	f04f 0300 	mov.w	r3, #0
 8005174:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005178:	4659      	mov	r1, fp
 800517a:	00cb      	lsls	r3, r1, #3
 800517c:	4651      	mov	r1, sl
 800517e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005182:	4651      	mov	r1, sl
 8005184:	00ca      	lsls	r2, r1, #3
 8005186:	4610      	mov	r0, r2
 8005188:	4619      	mov	r1, r3
 800518a:	4603      	mov	r3, r0
 800518c:	4642      	mov	r2, r8
 800518e:	189b      	adds	r3, r3, r2
 8005190:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005194:	464b      	mov	r3, r9
 8005196:	460a      	mov	r2, r1
 8005198:	eb42 0303 	adc.w	r3, r2, r3
 800519c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051b4:	460b      	mov	r3, r1
 80051b6:	18db      	adds	r3, r3, r3
 80051b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ba:	4613      	mov	r3, r2
 80051bc:	eb42 0303 	adc.w	r3, r2, r3
 80051c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051ca:	f7fb f805 	bl	80001d8 <__aeabi_uldivmod>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <UART_SetConfig+0x2d4>)
 80051d4:	fba3 1302 	umull	r1, r3, r3, r2
 80051d8:	095b      	lsrs	r3, r3, #5
 80051da:	2164      	movs	r1, #100	; 0x64
 80051dc:	fb01 f303 	mul.w	r3, r1, r3
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	3332      	adds	r3, #50	; 0x32
 80051e6:	4a08      	ldr	r2, [pc, #32]	; (8005208 <UART_SetConfig+0x2d4>)
 80051e8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	f003 0207 	and.w	r2, r3, #7
 80051f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4422      	add	r2, r4
 80051fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051fc:	e105      	b.n	800540a <UART_SetConfig+0x4d6>
 80051fe:	bf00      	nop
 8005200:	40011000 	.word	0x40011000
 8005204:	40011400 	.word	0x40011400
 8005208:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800520c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005210:	2200      	movs	r2, #0
 8005212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005216:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800521a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800521e:	4642      	mov	r2, r8
 8005220:	464b      	mov	r3, r9
 8005222:	1891      	adds	r1, r2, r2
 8005224:	6239      	str	r1, [r7, #32]
 8005226:	415b      	adcs	r3, r3
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
 800522a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800522e:	4641      	mov	r1, r8
 8005230:	1854      	adds	r4, r2, r1
 8005232:	4649      	mov	r1, r9
 8005234:	eb43 0501 	adc.w	r5, r3, r1
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	f04f 0300 	mov.w	r3, #0
 8005240:	00eb      	lsls	r3, r5, #3
 8005242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005246:	00e2      	lsls	r2, r4, #3
 8005248:	4614      	mov	r4, r2
 800524a:	461d      	mov	r5, r3
 800524c:	4643      	mov	r3, r8
 800524e:	18e3      	adds	r3, r4, r3
 8005250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005254:	464b      	mov	r3, r9
 8005256:	eb45 0303 	adc.w	r3, r5, r3
 800525a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800525e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800526a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800527a:	4629      	mov	r1, r5
 800527c:	008b      	lsls	r3, r1, #2
 800527e:	4621      	mov	r1, r4
 8005280:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005284:	4621      	mov	r1, r4
 8005286:	008a      	lsls	r2, r1, #2
 8005288:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800528c:	f7fa ffa4 	bl	80001d8 <__aeabi_uldivmod>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4b60      	ldr	r3, [pc, #384]	; (8005418 <UART_SetConfig+0x4e4>)
 8005296:	fba3 2302 	umull	r2, r3, r3, r2
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	011c      	lsls	r4, r3, #4
 800529e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a2:	2200      	movs	r2, #0
 80052a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052b0:	4642      	mov	r2, r8
 80052b2:	464b      	mov	r3, r9
 80052b4:	1891      	adds	r1, r2, r2
 80052b6:	61b9      	str	r1, [r7, #24]
 80052b8:	415b      	adcs	r3, r3
 80052ba:	61fb      	str	r3, [r7, #28]
 80052bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052c0:	4641      	mov	r1, r8
 80052c2:	1851      	adds	r1, r2, r1
 80052c4:	6139      	str	r1, [r7, #16]
 80052c6:	4649      	mov	r1, r9
 80052c8:	414b      	adcs	r3, r1
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052d8:	4659      	mov	r1, fp
 80052da:	00cb      	lsls	r3, r1, #3
 80052dc:	4651      	mov	r1, sl
 80052de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052e2:	4651      	mov	r1, sl
 80052e4:	00ca      	lsls	r2, r1, #3
 80052e6:	4610      	mov	r0, r2
 80052e8:	4619      	mov	r1, r3
 80052ea:	4603      	mov	r3, r0
 80052ec:	4642      	mov	r2, r8
 80052ee:	189b      	adds	r3, r3, r2
 80052f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052f4:	464b      	mov	r3, r9
 80052f6:	460a      	mov	r2, r1
 80052f8:	eb42 0303 	adc.w	r3, r2, r3
 80052fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	67bb      	str	r3, [r7, #120]	; 0x78
 800530a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005318:	4649      	mov	r1, r9
 800531a:	008b      	lsls	r3, r1, #2
 800531c:	4641      	mov	r1, r8
 800531e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005322:	4641      	mov	r1, r8
 8005324:	008a      	lsls	r2, r1, #2
 8005326:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800532a:	f7fa ff55 	bl	80001d8 <__aeabi_uldivmod>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4b39      	ldr	r3, [pc, #228]	; (8005418 <UART_SetConfig+0x4e4>)
 8005334:	fba3 1302 	umull	r1, r3, r3, r2
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	2164      	movs	r1, #100	; 0x64
 800533c:	fb01 f303 	mul.w	r3, r1, r3
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	3332      	adds	r3, #50	; 0x32
 8005346:	4a34      	ldr	r2, [pc, #208]	; (8005418 <UART_SetConfig+0x4e4>)
 8005348:	fba2 2303 	umull	r2, r3, r2, r3
 800534c:	095b      	lsrs	r3, r3, #5
 800534e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005352:	441c      	add	r4, r3
 8005354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005358:	2200      	movs	r2, #0
 800535a:	673b      	str	r3, [r7, #112]	; 0x70
 800535c:	677a      	str	r2, [r7, #116]	; 0x74
 800535e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005362:	4642      	mov	r2, r8
 8005364:	464b      	mov	r3, r9
 8005366:	1891      	adds	r1, r2, r2
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	415b      	adcs	r3, r3
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005372:	4641      	mov	r1, r8
 8005374:	1851      	adds	r1, r2, r1
 8005376:	6039      	str	r1, [r7, #0]
 8005378:	4649      	mov	r1, r9
 800537a:	414b      	adcs	r3, r1
 800537c:	607b      	str	r3, [r7, #4]
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800538a:	4659      	mov	r1, fp
 800538c:	00cb      	lsls	r3, r1, #3
 800538e:	4651      	mov	r1, sl
 8005390:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005394:	4651      	mov	r1, sl
 8005396:	00ca      	lsls	r2, r1, #3
 8005398:	4610      	mov	r0, r2
 800539a:	4619      	mov	r1, r3
 800539c:	4603      	mov	r3, r0
 800539e:	4642      	mov	r2, r8
 80053a0:	189b      	adds	r3, r3, r2
 80053a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80053a4:	464b      	mov	r3, r9
 80053a6:	460a      	mov	r2, r1
 80053a8:	eb42 0303 	adc.w	r3, r2, r3
 80053ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	663b      	str	r3, [r7, #96]	; 0x60
 80053b8:	667a      	str	r2, [r7, #100]	; 0x64
 80053ba:	f04f 0200 	mov.w	r2, #0
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80053c6:	4649      	mov	r1, r9
 80053c8:	008b      	lsls	r3, r1, #2
 80053ca:	4641      	mov	r1, r8
 80053cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053d0:	4641      	mov	r1, r8
 80053d2:	008a      	lsls	r2, r1, #2
 80053d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053d8:	f7fa fefe 	bl	80001d8 <__aeabi_uldivmod>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4b0d      	ldr	r3, [pc, #52]	; (8005418 <UART_SetConfig+0x4e4>)
 80053e2:	fba3 1302 	umull	r1, r3, r3, r2
 80053e6:	095b      	lsrs	r3, r3, #5
 80053e8:	2164      	movs	r1, #100	; 0x64
 80053ea:	fb01 f303 	mul.w	r3, r1, r3
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	3332      	adds	r3, #50	; 0x32
 80053f4:	4a08      	ldr	r2, [pc, #32]	; (8005418 <UART_SetConfig+0x4e4>)
 80053f6:	fba2 2303 	umull	r2, r3, r2, r3
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	f003 020f 	and.w	r2, r3, #15
 8005400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4422      	add	r2, r4
 8005408:	609a      	str	r2, [r3, #8]
}
 800540a:	bf00      	nop
 800540c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005410:	46bd      	mov	sp, r7
 8005412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005416:	bf00      	nop
 8005418:	51eb851f 	.word	0x51eb851f

0800541c <__libc_init_array>:
 800541c:	b570      	push	{r4, r5, r6, lr}
 800541e:	4d0d      	ldr	r5, [pc, #52]	; (8005454 <__libc_init_array+0x38>)
 8005420:	4c0d      	ldr	r4, [pc, #52]	; (8005458 <__libc_init_array+0x3c>)
 8005422:	1b64      	subs	r4, r4, r5
 8005424:	10a4      	asrs	r4, r4, #2
 8005426:	2600      	movs	r6, #0
 8005428:	42a6      	cmp	r6, r4
 800542a:	d109      	bne.n	8005440 <__libc_init_array+0x24>
 800542c:	4d0b      	ldr	r5, [pc, #44]	; (800545c <__libc_init_array+0x40>)
 800542e:	4c0c      	ldr	r4, [pc, #48]	; (8005460 <__libc_init_array+0x44>)
 8005430:	f000 f820 	bl	8005474 <_init>
 8005434:	1b64      	subs	r4, r4, r5
 8005436:	10a4      	asrs	r4, r4, #2
 8005438:	2600      	movs	r6, #0
 800543a:	42a6      	cmp	r6, r4
 800543c:	d105      	bne.n	800544a <__libc_init_array+0x2e>
 800543e:	bd70      	pop	{r4, r5, r6, pc}
 8005440:	f855 3b04 	ldr.w	r3, [r5], #4
 8005444:	4798      	blx	r3
 8005446:	3601      	adds	r6, #1
 8005448:	e7ee      	b.n	8005428 <__libc_init_array+0xc>
 800544a:	f855 3b04 	ldr.w	r3, [r5], #4
 800544e:	4798      	blx	r3
 8005450:	3601      	adds	r6, #1
 8005452:	e7f2      	b.n	800543a <__libc_init_array+0x1e>
 8005454:	080054ac 	.word	0x080054ac
 8005458:	080054ac 	.word	0x080054ac
 800545c:	080054ac 	.word	0x080054ac
 8005460:	080054b0 	.word	0x080054b0

08005464 <memset>:
 8005464:	4402      	add	r2, r0
 8005466:	4603      	mov	r3, r0
 8005468:	4293      	cmp	r3, r2
 800546a:	d100      	bne.n	800546e <memset+0xa>
 800546c:	4770      	bx	lr
 800546e:	f803 1b01 	strb.w	r1, [r3], #1
 8005472:	e7f9      	b.n	8005468 <memset+0x4>

08005474 <_init>:
 8005474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005476:	bf00      	nop
 8005478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800547a:	bc08      	pop	{r3}
 800547c:	469e      	mov	lr, r3
 800547e:	4770      	bx	lr

08005480 <_fini>:
 8005480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005482:	bf00      	nop
 8005484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005486:	bc08      	pop	{r3}
 8005488:	469e      	mov	lr, r3
 800548a:	4770      	bx	lr
