
robknob_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000504c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080051e4  080051e4  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051fc  080051fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080051fc  080051fc  000151fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005204  08005204  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005204  08005204  00015204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005208  08005208  00015208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800520c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000000c  08005218  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08005218  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001229a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002080  00000000  00000000  000322d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00034358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  00035448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000385c  00000000  00000000  00036498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132a0  00000000  00000000  00039cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eaf1  00000000  00000000  0004cf94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dba85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000494c  00000000  00000000  000dbad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080051cc 	.word	0x080051cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080051cc 	.word	0x080051cc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fe7c 	bl	80011dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f812 	bl	800050c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 fb42 	bl	8000b70 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80004ec:	f000 f880 	bl	80005f0 <_ZL12MX_I2C1_Initv>
  MX_I2C2_Init();
 80004f0:	f000 f8b2 	bl	8000658 <_ZL12MX_I2C2_Initv>
  MX_SPI1_Init();
 80004f4:	f000 f8e4 	bl	80006c0 <_ZL12MX_SPI1_Initv>
  MX_TIM1_Init();
 80004f8:	f000 f91e 	bl	8000738 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 80004fc:	f000 fa6a 	bl	80009d4 <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 8000500:	f000 fb08 	bl	8000b14 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8000504:	f000 fa0a 	bl	800091c <_ZL12MX_TIM2_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000508:	e7fe      	b.n	8000508 <main+0x2c>
	...

0800050c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	; 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2230      	movs	r2, #48	; 0x30
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f004 fe4e 	bl	80051bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	4b2c      	ldr	r3, [pc, #176]	; (80005e8 <_Z18SystemClock_Configv+0xdc>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	4a2b      	ldr	r2, [pc, #172]	; (80005e8 <_Z18SystemClock_Configv+0xdc>)
 800053a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053e:	6413      	str	r3, [r2, #64]	; 0x40
 8000540:	4b29      	ldr	r3, [pc, #164]	; (80005e8 <_Z18SystemClock_Configv+0xdc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b26      	ldr	r3, [pc, #152]	; (80005ec <_Z18SystemClock_Configv+0xe0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a25      	ldr	r2, [pc, #148]	; (80005ec <_Z18SystemClock_Configv+0xe0>)
 8000556:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4b23      	ldr	r3, [pc, #140]	; (80005ec <_Z18SystemClock_Configv+0xe0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000568:	2302      	movs	r3, #2
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	2301      	movs	r3, #1
 800056e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000570:	2310      	movs	r3, #16
 8000572:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000574:	2302      	movs	r3, #2
 8000576:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000578:	2300      	movs	r3, #0
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800057c:	2308      	movs	r3, #8
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000580:	2364      	movs	r3, #100	; 0x64
 8000582:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000584:	2302      	movs	r3, #2
 8000586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000588:	2304      	movs	r3, #4
 800058a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	f107 0320 	add.w	r3, r7, #32
 8000590:	4618      	mov	r0, r3
 8000592:	f002 ff95 	bl	80034c0 <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	bf14      	ite	ne
 800059c:	2301      	movne	r3, #1
 800059e:	2300      	moveq	r3, #0
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80005a6:	f000 fb43 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	230f      	movs	r3, #15
 80005ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ae:	2302      	movs	r3, #2
 80005b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2103      	movs	r1, #3
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 f9f2 	bl	80039b0 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	bf14      	ite	ne
 80005d2:	2301      	movne	r3, #1
 80005d4:	2300      	moveq	r3, #0
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80005dc:	f000 fb28 	bl	8000c30 <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	; 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <_ZL12MX_I2C1_Initv+0x5c>)
 80005f6:	4a16      	ldr	r2, [pc, #88]	; (8000650 <_ZL12MX_I2C1_Initv+0x60>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <_ZL12MX_I2C1_Initv+0x5c>)
 80005fc:	4a15      	ldr	r2, [pc, #84]	; (8000654 <_ZL12MX_I2C1_Initv+0x64>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <_ZL12MX_I2C1_Initv+0x5c>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <_ZL12MX_I2C1_Initv+0x5c>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <_ZL12MX_I2C1_Initv+0x5c>)
 800060e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000612:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <_ZL12MX_I2C1_Initv+0x5c>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <_ZL12MX_I2C1_Initv+0x5c>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <_ZL12MX_I2C1_Initv+0x5c>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <_ZL12MX_I2C1_Initv+0x5c>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062c:	4807      	ldr	r0, [pc, #28]	; (800064c <_ZL12MX_I2C1_Initv+0x5c>)
 800062e:	f001 f927 	bl	8001880 <HAL_I2C_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	bf14      	ite	ne
 8000638:	2301      	movne	r3, #1
 800063a:	2300      	moveq	r3, #0
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000642:	f000 faf5 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000028 	.word	0x20000028
 8000650:	40005400 	.word	0x40005400
 8000654:	00061a80 	.word	0x00061a80

08000658 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <_ZL12MX_I2C2_Initv+0x5c>)
 800065e:	4a16      	ldr	r2, [pc, #88]	; (80006b8 <_ZL12MX_I2C2_Initv+0x60>)
 8000660:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <_ZL12MX_I2C2_Initv+0x5c>)
 8000664:	4a15      	ldr	r2, [pc, #84]	; (80006bc <_ZL12MX_I2C2_Initv+0x64>)
 8000666:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <_ZL12MX_I2C2_Initv+0x5c>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <_ZL12MX_I2C2_Initv+0x5c>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <_ZL12MX_I2C2_Initv+0x5c>)
 8000676:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800067a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800067c:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <_ZL12MX_I2C2_Initv+0x5c>)
 800067e:	2200      	movs	r2, #0
 8000680:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <_ZL12MX_I2C2_Initv+0x5c>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <_ZL12MX_I2C2_Initv+0x5c>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <_ZL12MX_I2C2_Initv+0x5c>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000694:	4807      	ldr	r0, [pc, #28]	; (80006b4 <_ZL12MX_I2C2_Initv+0x5c>)
 8000696:	f001 f8f3 	bl	8001880 <HAL_I2C_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	bf14      	ite	ne
 80006a0:	2301      	movne	r3, #1
 80006a2:	2300      	moveq	r3, #0
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 80006aa:	f000 fac1 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	2000007c 	.word	0x2000007c
 80006b8:	40005800 	.word	0x40005800
 80006bc:	00061a80 	.word	0x00061a80

080006c0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c4:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <_ZL12MX_SPI1_Initv+0x70>)
 80006c6:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <_ZL12MX_SPI1_Initv+0x74>)
 80006c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <_ZL12MX_SPI1_Initv+0x70>)
 80006cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <_ZL12MX_SPI1_Initv+0x70>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <_ZL12MX_SPI1_Initv+0x70>)
 80006da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <_ZL12MX_SPI1_Initv+0x70>)
 80006e2:	2202      	movs	r2, #2
 80006e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <_ZL12MX_SPI1_Initv+0x70>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <_ZL12MX_SPI1_Initv+0x70>)
 80006ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <_ZL12MX_SPI1_Initv+0x70>)
 80006f6:	2228      	movs	r2, #40	; 0x28
 80006f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <_ZL12MX_SPI1_Initv+0x70>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000700:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <_ZL12MX_SPI1_Initv+0x70>)
 8000702:	2200      	movs	r2, #0
 8000704:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <_ZL12MX_SPI1_Initv+0x70>)
 8000708:	2200      	movs	r2, #0
 800070a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <_ZL12MX_SPI1_Initv+0x70>)
 800070e:	220a      	movs	r2, #10
 8000710:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <_ZL12MX_SPI1_Initv+0x70>)
 8000714:	f003 fb2c 	bl	8003d70 <HAL_SPI_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	bf14      	ite	ne
 800071e:	2301      	movne	r3, #1
 8000720:	2300      	moveq	r3, #0
 8000722:	b2db      	uxtb	r3, r3
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <_ZL12MX_SPI1_Initv+0x6c>
  {
    Error_Handler();
 8000728:	f000 fa82 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200000d0 	.word	0x200000d0
 8000734:	40013000 	.word	0x40013000

08000738 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b096      	sub	sp, #88	; 0x58
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
 8000766:	615a      	str	r2, [r3, #20]
 8000768:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2220      	movs	r2, #32
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f004 fd23 	bl	80051bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000776:	4b67      	ldr	r3, [pc, #412]	; (8000914 <_ZL12MX_TIM1_Initv+0x1dc>)
 8000778:	4a67      	ldr	r2, [pc, #412]	; (8000918 <_ZL12MX_TIM1_Initv+0x1e0>)
 800077a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800077c:	4b65      	ldr	r3, [pc, #404]	; (8000914 <_ZL12MX_TIM1_Initv+0x1dc>)
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000782:	4b64      	ldr	r3, [pc, #400]	; (8000914 <_ZL12MX_TIM1_Initv+0x1dc>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8000788:	4b62      	ldr	r3, [pc, #392]	; (8000914 <_ZL12MX_TIM1_Initv+0x1dc>)
 800078a:	f241 3287 	movw	r2, #4999	; 0x1387
 800078e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000790:	4b60      	ldr	r3, [pc, #384]	; (8000914 <_ZL12MX_TIM1_Initv+0x1dc>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000796:	4b5f      	ldr	r3, [pc, #380]	; (8000914 <_ZL12MX_TIM1_Initv+0x1dc>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079c:	4b5d      	ldr	r3, [pc, #372]	; (8000914 <_ZL12MX_TIM1_Initv+0x1dc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007a2:	485c      	ldr	r0, [pc, #368]	; (8000914 <_ZL12MX_TIM1_Initv+0x1dc>)
 80007a4:	f003 fc8c 	bl	80040c0 <HAL_TIM_Base_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	bf14      	ite	ne
 80007ae:	2301      	movne	r3, #1
 80007b0:	2300      	moveq	r3, #0
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 80007b8:	f000 fa3a 	bl	8000c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007c6:	4619      	mov	r1, r3
 80007c8:	4852      	ldr	r0, [pc, #328]	; (8000914 <_ZL12MX_TIM1_Initv+0x1dc>)
 80007ca:	f003 fde3 	bl	8004394 <HAL_TIM_ConfigClockSource>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	bf14      	ite	ne
 80007d4:	2301      	movne	r3, #1
 80007d6:	2300      	moveq	r3, #0
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 80007de:	f000 fa27 	bl	8000c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007e2:	484c      	ldr	r0, [pc, #304]	; (8000914 <_ZL12MX_TIM1_Initv+0x1dc>)
 80007e4:	f003 fcbb 	bl	800415e <HAL_TIM_PWM_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	bf14      	ite	ne
 80007ee:	2301      	movne	r3, #1
 80007f0:	2300      	moveq	r3, #0
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 80007f8:	f000 fa1a 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fc:	2300      	movs	r3, #0
 80007fe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000804:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000808:	4619      	mov	r1, r3
 800080a:	4842      	ldr	r0, [pc, #264]	; (8000914 <_ZL12MX_TIM1_Initv+0x1dc>)
 800080c:	f004 f930 	bl	8004a70 <HAL_TIMEx_MasterConfigSynchronization>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	bf14      	ite	ne
 8000816:	2301      	movne	r3, #1
 8000818:	2300      	moveq	r3, #0
 800081a:	b2db      	uxtb	r3, r3
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 8000820:	f000 fa06 	bl	8000c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000824:	2360      	movs	r3, #96	; 0x60
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800082c:	2300      	movs	r3, #0
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000830:	2300      	movs	r3, #0
 8000832:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800083c:	2300      	movs	r3, #0
 800083e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000844:	2200      	movs	r2, #0
 8000846:	4619      	mov	r1, r3
 8000848:	4832      	ldr	r0, [pc, #200]	; (8000914 <_ZL12MX_TIM1_Initv+0x1dc>)
 800084a:	f003 fce1 	bl	8004210 <HAL_TIM_PWM_ConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	bf14      	ite	ne
 8000854:	2301      	movne	r3, #1
 8000856:	2300      	moveq	r3, #0
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 800085e:	f000 f9e7 	bl	8000c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000866:	2204      	movs	r2, #4
 8000868:	4619      	mov	r1, r3
 800086a:	482a      	ldr	r0, [pc, #168]	; (8000914 <_ZL12MX_TIM1_Initv+0x1dc>)
 800086c:	f003 fcd0 	bl	8004210 <HAL_TIM_PWM_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	bf14      	ite	ne
 8000876:	2301      	movne	r3, #1
 8000878:	2300      	moveq	r3, #0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 8000880:	f000 f9d6 	bl	8000c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000888:	2208      	movs	r2, #8
 800088a:	4619      	mov	r1, r3
 800088c:	4821      	ldr	r0, [pc, #132]	; (8000914 <_ZL12MX_TIM1_Initv+0x1dc>)
 800088e:	f003 fcbf 	bl	8004210 <HAL_TIM_PWM_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	bf14      	ite	ne
 8000898:	2301      	movne	r3, #1
 800089a:	2300      	moveq	r3, #0
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 80008a2:	f000 f9c5 	bl	8000c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008aa:	220c      	movs	r2, #12
 80008ac:	4619      	mov	r1, r3
 80008ae:	4819      	ldr	r0, [pc, #100]	; (8000914 <_ZL12MX_TIM1_Initv+0x1dc>)
 80008b0:	f003 fcae 	bl	8004210 <HAL_TIM_PWM_ConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bf14      	ite	ne
 80008ba:	2301      	movne	r3, #1
 80008bc:	2300      	moveq	r3, #0
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <_ZL12MX_TIM1_Initv+0x190>
  {
    Error_Handler();
 80008c4:	f000 f9b4 	bl	8000c30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	4619      	mov	r1, r3
 80008ea:	480a      	ldr	r0, [pc, #40]	; (8000914 <_ZL12MX_TIM1_Initv+0x1dc>)
 80008ec:	f004 f92e 	bl	8004b4c <HAL_TIMEx_ConfigBreakDeadTime>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	bf14      	ite	ne
 80008f6:	2301      	movne	r3, #1
 80008f8:	2300      	moveq	r3, #0
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <_ZL12MX_TIM1_Initv+0x1cc>
  {
    Error_Handler();
 8000900:	f000 f996 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000904:	4803      	ldr	r0, [pc, #12]	; (8000914 <_ZL12MX_TIM1_Initv+0x1dc>)
 8000906:	f000 fb29 	bl	8000f5c <HAL_TIM_MspPostInit>

}
 800090a:	bf00      	nop
 800090c:	3758      	adds	r7, #88	; 0x58
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000128 	.word	0x20000128
 8000918:	40010000 	.word	0x40010000

0800091c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000938:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <_ZL12MX_TIM2_Initv+0xb4>)
 800093a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800093e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000940:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000942:	2263      	movs	r2, #99	; 0x63
 8000944:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000946:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800094c:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <_ZL12MX_TIM2_Initv+0xb4>)
 800094e:	f04f 32ff 	mov.w	r2, #4294967295
 8000952:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000954:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095a:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <_ZL12MX_TIM2_Initv+0xb4>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000960:	481b      	ldr	r0, [pc, #108]	; (80009d0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000962:	f003 fbad 	bl	80040c0 <HAL_TIM_Base_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	bf14      	ite	ne
 800096c:	2301      	movne	r3, #1
 800096e:	2300      	moveq	r3, #0
 8000970:	b2db      	uxtb	r3, r3
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8000976:	f000 f95b 	bl	8000c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000980:	f107 0308 	add.w	r3, r7, #8
 8000984:	4619      	mov	r1, r3
 8000986:	4812      	ldr	r0, [pc, #72]	; (80009d0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000988:	f003 fd04 	bl	8004394 <HAL_TIM_ConfigClockSource>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	bf14      	ite	ne
 8000992:	2301      	movne	r3, #1
 8000994:	2300      	moveq	r3, #0
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 800099c:	f000 f948 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a0:	2300      	movs	r3, #0
 80009a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	4619      	mov	r1, r3
 80009ac:	4808      	ldr	r0, [pc, #32]	; (80009d0 <_ZL12MX_TIM2_Initv+0xb4>)
 80009ae:	f004 f85f 	bl	8004a70 <HAL_TIMEx_MasterConfigSynchronization>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	bf14      	ite	ne
 80009b8:	2301      	movne	r3, #1
 80009ba:	2300      	moveq	r3, #0
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 80009c2:	f000 f935 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	3718      	adds	r7, #24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000170 	.word	0x20000170

080009d4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08e      	sub	sp, #56	; 0x38
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e8:	f107 0320 	add.w	r3, r7, #32
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
 8000a00:	615a      	str	r2, [r3, #20]
 8000a02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a04:	4b41      	ldr	r3, [pc, #260]	; (8000b0c <_ZL12MX_TIM3_Initv+0x138>)
 8000a06:	4a42      	ldr	r2, [pc, #264]	; (8000b10 <_ZL12MX_TIM3_Initv+0x13c>)
 8000a08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a0a:	4b40      	ldr	r3, [pc, #256]	; (8000b0c <_ZL12MX_TIM3_Initv+0x138>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a10:	4b3e      	ldr	r3, [pc, #248]	; (8000b0c <_ZL12MX_TIM3_Initv+0x138>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8000a16:	4b3d      	ldr	r3, [pc, #244]	; (8000b0c <_ZL12MX_TIM3_Initv+0x138>)
 8000a18:	f241 3287 	movw	r2, #4999	; 0x1387
 8000a1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1e:	4b3b      	ldr	r3, [pc, #236]	; (8000b0c <_ZL12MX_TIM3_Initv+0x138>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a24:	4b39      	ldr	r3, [pc, #228]	; (8000b0c <_ZL12MX_TIM3_Initv+0x138>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a2a:	4838      	ldr	r0, [pc, #224]	; (8000b0c <_ZL12MX_TIM3_Initv+0x138>)
 8000a2c:	f003 fb48 	bl	80040c0 <HAL_TIM_Base_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	bf14      	ite	ne
 8000a36:	2301      	movne	r3, #1
 8000a38:	2300      	moveq	r3, #0
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8000a40:	f000 f8f6 	bl	8000c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	482e      	ldr	r0, [pc, #184]	; (8000b0c <_ZL12MX_TIM3_Initv+0x138>)
 8000a52:	f003 fc9f 	bl	8004394 <HAL_TIM_ConfigClockSource>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	bf14      	ite	ne
 8000a5c:	2301      	movne	r3, #1
 8000a5e:	2300      	moveq	r3, #0
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8000a66:	f000 f8e3 	bl	8000c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a6a:	4828      	ldr	r0, [pc, #160]	; (8000b0c <_ZL12MX_TIM3_Initv+0x138>)
 8000a6c:	f003 fb77 	bl	800415e <HAL_TIM_PWM_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bf14      	ite	ne
 8000a76:	2301      	movne	r3, #1
 8000a78:	2300      	moveq	r3, #0
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8000a80:	f000 f8d6 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a8c:	f107 0320 	add.w	r3, r7, #32
 8000a90:	4619      	mov	r1, r3
 8000a92:	481e      	ldr	r0, [pc, #120]	; (8000b0c <_ZL12MX_TIM3_Initv+0x138>)
 8000a94:	f003 ffec 	bl	8004a70 <HAL_TIMEx_MasterConfigSynchronization>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	bf14      	ite	ne
 8000a9e:	2301      	movne	r3, #1
 8000aa0:	2300      	moveq	r3, #0
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8000aa8:	f000 f8c2 	bl	8000c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aac:	2360      	movs	r3, #96	; 0x60
 8000aae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4812      	ldr	r0, [pc, #72]	; (8000b0c <_ZL12MX_TIM3_Initv+0x138>)
 8000ac4:	f003 fba4 	bl	8004210 <HAL_TIM_PWM_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	bf14      	ite	ne
 8000ace:	2301      	movne	r3, #1
 8000ad0:	2300      	moveq	r3, #0
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8000ad8:	f000 f8aa 	bl	8000c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2204      	movs	r2, #4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480a      	ldr	r0, [pc, #40]	; (8000b0c <_ZL12MX_TIM3_Initv+0x138>)
 8000ae4:	f003 fb94 	bl	8004210 <HAL_TIM_PWM_ConfigChannel>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	bf14      	ite	ne
 8000aee:	2301      	movne	r3, #1
 8000af0:	2300      	moveq	r3, #0
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 8000af8:	f000 f89a 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000afc:	4803      	ldr	r0, [pc, #12]	; (8000b0c <_ZL12MX_TIM3_Initv+0x138>)
 8000afe:	f000 fa2d 	bl	8000f5c <HAL_TIM_MspPostInit>

}
 8000b02:	bf00      	nop
 8000b04:	3738      	adds	r7, #56	; 0x38
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200001b8 	.word	0x200001b8
 8000b10:	40000400 	.word	0x40000400

08000b14 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b1a:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <_ZL19MX_USART2_UART_Initv+0x58>)
 8000b1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b4a:	4807      	ldr	r0, [pc, #28]	; (8000b68 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b4c:	f004 f850 	bl	8004bf0 <HAL_UART_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	bf14      	ite	ne
 8000b56:	2301      	movne	r3, #1
 8000b58:	2300      	moveq	r3, #0
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000b60:	f000 f866 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000200 	.word	0x20000200
 8000b6c:	40004400 	.word	0x40004400

08000b70 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <_ZL12MX_GPIO_Initv+0xb4>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a25      	ldr	r2, [pc, #148]	; (8000c24 <_ZL12MX_GPIO_Initv+0xb4>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <_ZL12MX_GPIO_Initv+0xb4>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <_ZL12MX_GPIO_Initv+0xb4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a1e      	ldr	r2, [pc, #120]	; (8000c24 <_ZL12MX_GPIO_Initv+0xb4>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <_ZL12MX_GPIO_Initv+0xb4>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bc4:	4818      	ldr	r0, [pc, #96]	; (8000c28 <_ZL12MX_GPIO_Initv+0xb8>)
 8000bc6:	f000 fe41 	bl	800184c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd6:	f107 030c 	add.w	r3, r7, #12
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4813      	ldr	r0, [pc, #76]	; (8000c2c <_ZL12MX_GPIO_Initv+0xbc>)
 8000bde:	f000 fcb1 	bl	8001544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480c      	ldr	r0, [pc, #48]	; (8000c28 <_ZL12MX_GPIO_Initv+0xb8>)
 8000bf8:	f000 fca4 	bl	8001544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	4619      	mov	r1, r3
 8000c14:	4804      	ldr	r0, [pc, #16]	; (8000c28 <_ZL12MX_GPIO_Initv+0xb8>)
 8000c16:	f000 fc95 	bl	8001544 <HAL_GPIO_Init>

}
 8000c1a:	bf00      	nop
 8000c1c:	3720      	adds	r7, #32
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40020400 	.word	0x40020400

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <Error_Handler+0x8>
	...

08000c3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a0f      	ldr	r2, [pc, #60]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800

08000c8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a4a      	ldr	r2, [pc, #296]	; (8000dd4 <HAL_I2C_MspInit+0x148>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d13c      	bne.n	8000d28 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	4b49      	ldr	r3, [pc, #292]	; (8000dd8 <HAL_I2C_MspInit+0x14c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a48      	ldr	r2, [pc, #288]	; (8000dd8 <HAL_I2C_MspInit+0x14c>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b46      	ldr	r3, [pc, #280]	; (8000dd8 <HAL_I2C_MspInit+0x14c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	61bb      	str	r3, [r7, #24]
 8000cc8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cca:	23c0      	movs	r3, #192	; 0xc0
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cce:	2312      	movs	r3, #18
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cda:	2304      	movs	r3, #4
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	483d      	ldr	r0, [pc, #244]	; (8000ddc <HAL_I2C_MspInit+0x150>)
 8000ce6:	f000 fc2d 	bl	8001544 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	4b3a      	ldr	r3, [pc, #232]	; (8000dd8 <HAL_I2C_MspInit+0x14c>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	4a39      	ldr	r2, [pc, #228]	; (8000dd8 <HAL_I2C_MspInit+0x14c>)
 8000cf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfa:	4b37      	ldr	r3, [pc, #220]	; (8000dd8 <HAL_I2C_MspInit+0x14c>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	201f      	movs	r0, #31
 8000d0c:	f000 fbb3 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d10:	201f      	movs	r0, #31
 8000d12:	f000 fbcc 	bl	80014ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2020      	movs	r0, #32
 8000d1c:	f000 fbab 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d20:	2020      	movs	r0, #32
 8000d22:	f000 fbc4 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d26:	e051      	b.n	8000dcc <HAL_I2C_MspInit+0x140>
  else if(hi2c->Instance==I2C2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a2c      	ldr	r2, [pc, #176]	; (8000de0 <HAL_I2C_MspInit+0x154>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d14c      	bne.n	8000dcc <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <HAL_I2C_MspInit+0x14c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a27      	ldr	r2, [pc, #156]	; (8000dd8 <HAL_I2C_MspInit+0x14c>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b25      	ldr	r3, [pc, #148]	; (8000dd8 <HAL_I2C_MspInit+0x14c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d54:	2312      	movs	r3, #18
 8000d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d60:	2304      	movs	r3, #4
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	481c      	ldr	r0, [pc, #112]	; (8000ddc <HAL_I2C_MspInit+0x150>)
 8000d6c:	f000 fbea 	bl	8001544 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d70:	2308      	movs	r3, #8
 8000d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d74:	2312      	movs	r3, #18
 8000d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000d80:	2309      	movs	r3, #9
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4814      	ldr	r0, [pc, #80]	; (8000ddc <HAL_I2C_MspInit+0x150>)
 8000d8c:	f000 fbda 	bl	8001544 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <HAL_I2C_MspInit+0x14c>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <HAL_I2C_MspInit+0x14c>)
 8000d9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <HAL_I2C_MspInit+0x14c>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2100      	movs	r1, #0
 8000db0:	2021      	movs	r0, #33	; 0x21
 8000db2:	f000 fb60 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000db6:	2021      	movs	r0, #33	; 0x21
 8000db8:	f000 fb79 	bl	80014ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2022      	movs	r0, #34	; 0x22
 8000dc2:	f000 fb58 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000dc6:	2022      	movs	r0, #34	; 0x22
 8000dc8:	f000 fb71 	bl	80014ae <HAL_NVIC_EnableIRQ>
}
 8000dcc:	bf00      	nop
 8000dce:	3730      	adds	r7, #48	; 0x30
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40005400 	.word	0x40005400
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	40005800 	.word	0x40005800

08000de4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a2c      	ldr	r2, [pc, #176]	; (8000eb4 <HAL_SPI_MspInit+0xd0>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d151      	bne.n	8000eaa <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <HAL_SPI_MspInit+0xd4>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	4a2a      	ldr	r2, [pc, #168]	; (8000eb8 <HAL_SPI_MspInit+0xd4>)
 8000e10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e14:	6453      	str	r3, [r2, #68]	; 0x44
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <HAL_SPI_MspInit+0xd4>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <HAL_SPI_MspInit+0xd4>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a23      	ldr	r2, [pc, #140]	; (8000eb8 <HAL_SPI_MspInit+0xd4>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <HAL_SPI_MspInit+0xd4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <HAL_SPI_MspInit+0xd4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a1c      	ldr	r2, [pc, #112]	; (8000eb8 <HAL_SPI_MspInit+0xd4>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <HAL_SPI_MspInit+0xd4>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e5a:	2320      	movs	r3, #32
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4811      	ldr	r0, [pc, #68]	; (8000ebc <HAL_SPI_MspInit+0xd8>)
 8000e76:	f000 fb65 	bl	8001544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e7a:	2330      	movs	r3, #48	; 0x30
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	480a      	ldr	r0, [pc, #40]	; (8000ec0 <HAL_SPI_MspInit+0xdc>)
 8000e96:	f000 fb55 	bl	8001544 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2023      	movs	r0, #35	; 0x23
 8000ea0:	f000 fae9 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ea4:	2023      	movs	r0, #35	; 0x23
 8000ea6:	f000 fb02 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	; 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40013000 	.word	0x40013000
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	40020400 	.word	0x40020400

08000ec4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a1f      	ldr	r2, [pc, #124]	; (8000f50 <HAL_TIM_Base_MspInit+0x8c>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d10e      	bne.n	8000ef4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <HAL_TIM_Base_MspInit+0x90>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	4a1d      	ldr	r2, [pc, #116]	; (8000f54 <HAL_TIM_Base_MspInit+0x90>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <HAL_TIM_Base_MspInit+0x90>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ef2:	e026      	b.n	8000f42 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000efc:	d10e      	bne.n	8000f1c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <HAL_TIM_Base_MspInit+0x90>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a13      	ldr	r2, [pc, #76]	; (8000f54 <HAL_TIM_Base_MspInit+0x90>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HAL_TIM_Base_MspInit+0x90>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
}
 8000f1a:	e012      	b.n	8000f42 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0d      	ldr	r2, [pc, #52]	; (8000f58 <HAL_TIM_Base_MspInit+0x94>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d10d      	bne.n	8000f42 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_TIM_Base_MspInit+0x90>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	4a09      	ldr	r2, [pc, #36]	; (8000f54 <HAL_TIM_Base_MspInit+0x90>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6413      	str	r3, [r2, #64]	; 0x40
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <HAL_TIM_Base_MspInit+0x90>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
}
 8000f42:	bf00      	nop
 8000f44:	371c      	adds	r7, #28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40010000 	.word	0x40010000
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40000400 	.word	0x40000400

08000f5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a24      	ldr	r2, [pc, #144]	; (800100c <HAL_TIM_MspPostInit+0xb0>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d11f      	bne.n	8000fbe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	4b23      	ldr	r3, [pc, #140]	; (8001010 <HAL_TIM_MspPostInit+0xb4>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a22      	ldr	r2, [pc, #136]	; (8001010 <HAL_TIM_MspPostInit+0xb4>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <HAL_TIM_MspPostInit+0xb4>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000f9a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4817      	ldr	r0, [pc, #92]	; (8001014 <HAL_TIM_MspPostInit+0xb8>)
 8000fb8:	f000 fac4 	bl	8001544 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fbc:	e022      	b.n	8001004 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a15      	ldr	r2, [pc, #84]	; (8001018 <HAL_TIM_MspPostInit+0xbc>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d11d      	bne.n	8001004 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	4b10      	ldr	r3, [pc, #64]	; (8001010 <HAL_TIM_MspPostInit+0xb4>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <HAL_TIM_MspPostInit+0xb4>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <HAL_TIM_MspPostInit+0xb4>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fe4:	23c0      	movs	r3, #192	; 0xc0
 8000fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <HAL_TIM_MspPostInit+0xb8>)
 8001000:	f000 faa0 	bl	8001544 <HAL_GPIO_Init>
}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	; 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40010000 	.word	0x40010000
 8001010:	40023800 	.word	0x40023800
 8001014:	40020000 	.word	0x40020000
 8001018:	40000400 	.word	0x40000400

0800101c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a19      	ldr	r2, [pc, #100]	; (80010a0 <HAL_UART_MspInit+0x84>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d12b      	bne.n	8001096 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <HAL_UART_MspInit+0x88>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <HAL_UART_MspInit+0x88>)
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_UART_MspInit+0x88>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_UART_MspInit+0x88>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <HAL_UART_MspInit+0x88>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <HAL_UART_MspInit+0x88>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001076:	230c      	movs	r3, #12
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001086:	2307      	movs	r3, #7
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <HAL_UART_MspInit+0x8c>)
 8001092:	f000 fa57 	bl	8001544 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001096:	bf00      	nop
 8001098:	3728      	adds	r7, #40	; 0x28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40004400 	.word	0x40004400
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020000 	.word	0x40020000

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <NMI_Handler+0x4>

080010b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <HardFault_Handler+0x4>

080010b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <MemManage_Handler+0x4>

080010be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <BusFault_Handler+0x4>

080010c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <UsageFault_Handler+0x4>

080010ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f8:	f000 f8c2 	bl	8001280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <I2C1_EV_IRQHandler+0x10>)
 8001106:	f000 fcff 	bl	8001b08 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000028 	.word	0x20000028

08001114 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <I2C1_ER_IRQHandler+0x10>)
 800111a:	f000 fe66 	bl	8001dea <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000028 	.word	0x20000028

08001128 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <I2C2_EV_IRQHandler+0x10>)
 800112e:	f000 fceb 	bl	8001b08 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000007c 	.word	0x2000007c

0800113c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <I2C2_ER_IRQHandler+0x10>)
 8001142:	f000 fe52 	bl	8001dea <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000007c 	.word	0x2000007c

08001150 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001154:	4802      	ldr	r0, [pc, #8]	; (8001160 <SPI1_IRQHandler+0x10>)
 8001156:	f002 fe95 	bl	8003e84 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200000d0 	.word	0x200000d0

08001164 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <SystemInit+0x20>)
 800116a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116e:	4a05      	ldr	r2, [pc, #20]	; (8001184 <SystemInit+0x20>)
 8001170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800118e:	490e      	ldr	r1, [pc, #56]	; (80011c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001190:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011a4:	4c0b      	ldr	r4, [pc, #44]	; (80011d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011b2:	f7ff ffd7 	bl	8001164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b6:	f003 ffdd 	bl	8005174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ba:	f7ff f98f 	bl	80004dc <main>
  bx  lr    
 80011be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011cc:	0800520c 	.word	0x0800520c
  ldr r2, =_sbss
 80011d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011d4:	20000248 	.word	0x20000248

080011d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC_IRQHandler>
	...

080011dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <HAL_Init+0x40>)
 80011e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0a      	ldr	r2, [pc, #40]	; (800121c <HAL_Init+0x40>)
 80011f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a07      	ldr	r2, [pc, #28]	; (800121c <HAL_Init+0x40>)
 80011fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001202:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001204:	2003      	movs	r0, #3
 8001206:	f000 f92b 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120a:	200f      	movs	r0, #15
 800120c:	f000 f808 	bl	8001220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001210:	f7ff fd14 	bl	8000c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023c00 	.word	0x40023c00

08001220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_InitTick+0x54>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_InitTick+0x58>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001236:	fbb3 f3f1 	udiv	r3, r3, r1
 800123a:	fbb2 f3f3 	udiv	r3, r2, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f943 	bl	80014ca <HAL_SYSTICK_Config>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e00e      	b.n	800126c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b0f      	cmp	r3, #15
 8001252:	d80a      	bhi.n	800126a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001254:	2200      	movs	r2, #0
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f000 f90b 	bl	8001476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001260:	4a06      	ldr	r2, [pc, #24]	; (800127c <HAL_InitTick+0x5c>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	e000      	b.n	800126c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000000 	.word	0x20000000
 8001278:	20000008 	.word	0x20000008
 800127c:	20000004 	.word	0x20000004

08001280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_IncTick+0x20>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x24>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4413      	add	r3, r2
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <HAL_IncTick+0x24>)
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000008 	.word	0x20000008
 80012a4:	20000244 	.word	0x20000244

080012a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <HAL_GetTick+0x14>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000244 	.word	0x20000244

080012c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db0b      	blt.n	800134e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	f003 021f 	and.w	r2, r3, #31
 800133c:	4907      	ldr	r1, [pc, #28]	; (800135c <__NVIC_EnableIRQ+0x38>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f202 	lsl.w	r2, r0, r2
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000e100 	.word	0xe000e100

08001360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db0a      	blt.n	800138a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	490c      	ldr	r1, [pc, #48]	; (80013ac <__NVIC_SetPriority+0x4c>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	0112      	lsls	r2, r2, #4
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	440b      	add	r3, r1
 8001384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001388:	e00a      	b.n	80013a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4908      	ldr	r1, [pc, #32]	; (80013b0 <__NVIC_SetPriority+0x50>)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	3b04      	subs	r3, #4
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	440b      	add	r3, r1
 800139e:	761a      	strb	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000e100 	.word	0xe000e100
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f1c3 0307 	rsb	r3, r3, #7
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	bf28      	it	cs
 80013d2:	2304      	movcs	r3, #4
 80013d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3304      	adds	r3, #4
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d902      	bls.n	80013e4 <NVIC_EncodePriority+0x30>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3b03      	subs	r3, #3
 80013e2:	e000      	b.n	80013e6 <NVIC_EncodePriority+0x32>
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43d9      	mvns	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	4313      	orrs	r3, r2
         );
}
 800140e:	4618      	mov	r0, r3
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800142c:	d301      	bcc.n	8001432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142e:	2301      	movs	r3, #1
 8001430:	e00f      	b.n	8001452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <SysTick_Config+0x40>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143a:	210f      	movs	r1, #15
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f7ff ff8e 	bl	8001360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <SysTick_Config+0x40>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <SysTick_Config+0x40>)
 800144c:	2207      	movs	r2, #7
 800144e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010

08001460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff29 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001488:	f7ff ff3e 	bl	8001308 <__NVIC_GetPriorityGrouping>
 800148c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	f7ff ff8e 	bl	80013b4 <NVIC_EncodePriority>
 8001498:	4602      	mov	r2, r0
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff5d 	bl	8001360 <__NVIC_SetPriority>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff31 	bl	8001324 <__NVIC_EnableIRQ>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffa2 	bl	800141c <SysTick_Config>
 80014d8:	4603      	mov	r3, r0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d004      	beq.n	8001500 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2280      	movs	r2, #128	; 0x80
 80014fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e00c      	b.n	800151a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2205      	movs	r2, #5
 8001504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0201 	bic.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001534:	b2db      	uxtb	r3, r3
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001544:	b480      	push	{r7}
 8001546:	b089      	sub	sp, #36	; 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
 800155e:	e159      	b.n	8001814 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001560:	2201      	movs	r2, #1
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	429a      	cmp	r2, r3
 800157a:	f040 8148 	bne.w	800180e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	2b01      	cmp	r3, #1
 8001588:	d005      	beq.n	8001596 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001592:	2b02      	cmp	r3, #2
 8001594:	d130      	bne.n	80015f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	2203      	movs	r2, #3
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015cc:	2201      	movs	r2, #1
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	091b      	lsrs	r3, r3, #4
 80015e2:	f003 0201 	and.w	r2, r3, #1
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b03      	cmp	r3, #3
 8001602:	d017      	beq.n	8001634 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	2203      	movs	r2, #3
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d123      	bne.n	8001688 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	08da      	lsrs	r2, r3, #3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3208      	adds	r2, #8
 8001648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	220f      	movs	r2, #15
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	691a      	ldr	r2, [r3, #16]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	08da      	lsrs	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3208      	adds	r2, #8
 8001682:	69b9      	ldr	r1, [r7, #24]
 8001684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	2203      	movs	r2, #3
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0203 	and.w	r2, r3, #3
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 80a2 	beq.w	800180e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b57      	ldr	r3, [pc, #348]	; (800182c <HAL_GPIO_Init+0x2e8>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	4a56      	ldr	r2, [pc, #344]	; (800182c <HAL_GPIO_Init+0x2e8>)
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d8:	6453      	str	r3, [r2, #68]	; 0x44
 80016da:	4b54      	ldr	r3, [pc, #336]	; (800182c <HAL_GPIO_Init+0x2e8>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016e6:	4a52      	ldr	r2, [pc, #328]	; (8001830 <HAL_GPIO_Init+0x2ec>)
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	089b      	lsrs	r3, r3, #2
 80016ec:	3302      	adds	r3, #2
 80016ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	220f      	movs	r2, #15
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a49      	ldr	r2, [pc, #292]	; (8001834 <HAL_GPIO_Init+0x2f0>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d019      	beq.n	8001746 <HAL_GPIO_Init+0x202>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a48      	ldr	r2, [pc, #288]	; (8001838 <HAL_GPIO_Init+0x2f4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_GPIO_Init+0x1fe>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a47      	ldr	r2, [pc, #284]	; (800183c <HAL_GPIO_Init+0x2f8>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d00d      	beq.n	800173e <HAL_GPIO_Init+0x1fa>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a46      	ldr	r2, [pc, #280]	; (8001840 <HAL_GPIO_Init+0x2fc>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d007      	beq.n	800173a <HAL_GPIO_Init+0x1f6>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a45      	ldr	r2, [pc, #276]	; (8001844 <HAL_GPIO_Init+0x300>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d101      	bne.n	8001736 <HAL_GPIO_Init+0x1f2>
 8001732:	2304      	movs	r3, #4
 8001734:	e008      	b.n	8001748 <HAL_GPIO_Init+0x204>
 8001736:	2307      	movs	r3, #7
 8001738:	e006      	b.n	8001748 <HAL_GPIO_Init+0x204>
 800173a:	2303      	movs	r3, #3
 800173c:	e004      	b.n	8001748 <HAL_GPIO_Init+0x204>
 800173e:	2302      	movs	r3, #2
 8001740:	e002      	b.n	8001748 <HAL_GPIO_Init+0x204>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <HAL_GPIO_Init+0x204>
 8001746:	2300      	movs	r3, #0
 8001748:	69fa      	ldr	r2, [r7, #28]
 800174a:	f002 0203 	and.w	r2, r2, #3
 800174e:	0092      	lsls	r2, r2, #2
 8001750:	4093      	lsls	r3, r2
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001758:	4935      	ldr	r1, [pc, #212]	; (8001830 <HAL_GPIO_Init+0x2ec>)
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	089b      	lsrs	r3, r3, #2
 800175e:	3302      	adds	r3, #2
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001766:	4b38      	ldr	r3, [pc, #224]	; (8001848 <HAL_GPIO_Init+0x304>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800178a:	4a2f      	ldr	r2, [pc, #188]	; (8001848 <HAL_GPIO_Init+0x304>)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001790:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <HAL_GPIO_Init+0x304>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017b4:	4a24      	ldr	r2, [pc, #144]	; (8001848 <HAL_GPIO_Init+0x304>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017ba:	4b23      	ldr	r3, [pc, #140]	; (8001848 <HAL_GPIO_Init+0x304>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017de:	4a1a      	ldr	r2, [pc, #104]	; (8001848 <HAL_GPIO_Init+0x304>)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <HAL_GPIO_Init+0x304>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001808:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <HAL_GPIO_Init+0x304>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3301      	adds	r3, #1
 8001812:	61fb      	str	r3, [r7, #28]
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	2b0f      	cmp	r3, #15
 8001818:	f67f aea2 	bls.w	8001560 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	40013800 	.word	0x40013800
 8001834:	40020000 	.word	0x40020000
 8001838:	40020400 	.word	0x40020400
 800183c:	40020800 	.word	0x40020800
 8001840:	40020c00 	.word	0x40020c00
 8001844:	40021000 	.word	0x40021000
 8001848:	40013c00 	.word	0x40013c00

0800184c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
 8001858:	4613      	mov	r3, r2
 800185a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800185c:	787b      	ldrb	r3, [r7, #1]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001862:	887a      	ldrh	r2, [r7, #2]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001868:	e003      	b.n	8001872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	041a      	lsls	r2, r3, #16
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	619a      	str	r2, [r3, #24]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e12b      	b.n	8001aea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d106      	bne.n	80018ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff f9f0 	bl	8000c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2224      	movs	r2, #36	; 0x24
 80018b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0201 	bic.w	r2, r2, #1
 80018c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018e4:	f002 fa1c 	bl	8003d20 <HAL_RCC_GetPCLK1Freq>
 80018e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	4a81      	ldr	r2, [pc, #516]	; (8001af4 <HAL_I2C_Init+0x274>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d807      	bhi.n	8001904 <HAL_I2C_Init+0x84>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4a80      	ldr	r2, [pc, #512]	; (8001af8 <HAL_I2C_Init+0x278>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	bf94      	ite	ls
 80018fc:	2301      	movls	r3, #1
 80018fe:	2300      	movhi	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	e006      	b.n	8001912 <HAL_I2C_Init+0x92>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4a7d      	ldr	r2, [pc, #500]	; (8001afc <HAL_I2C_Init+0x27c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	bf94      	ite	ls
 800190c:	2301      	movls	r3, #1
 800190e:	2300      	movhi	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e0e7      	b.n	8001aea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4a78      	ldr	r2, [pc, #480]	; (8001b00 <HAL_I2C_Init+0x280>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	0c9b      	lsrs	r3, r3, #18
 8001924:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	430a      	orrs	r2, r1
 8001938:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4a6a      	ldr	r2, [pc, #424]	; (8001af4 <HAL_I2C_Init+0x274>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d802      	bhi.n	8001954 <HAL_I2C_Init+0xd4>
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	3301      	adds	r3, #1
 8001952:	e009      	b.n	8001968 <HAL_I2C_Init+0xe8>
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800195a:	fb02 f303 	mul.w	r3, r2, r3
 800195e:	4a69      	ldr	r2, [pc, #420]	; (8001b04 <HAL_I2C_Init+0x284>)
 8001960:	fba2 2303 	umull	r2, r3, r2, r3
 8001964:	099b      	lsrs	r3, r3, #6
 8001966:	3301      	adds	r3, #1
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	430b      	orrs	r3, r1
 800196e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800197a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	495c      	ldr	r1, [pc, #368]	; (8001af4 <HAL_I2C_Init+0x274>)
 8001984:	428b      	cmp	r3, r1
 8001986:	d819      	bhi.n	80019bc <HAL_I2C_Init+0x13c>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	1e59      	subs	r1, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	fbb1 f3f3 	udiv	r3, r1, r3
 8001996:	1c59      	adds	r1, r3, #1
 8001998:	f640 73fc 	movw	r3, #4092	; 0xffc
 800199c:	400b      	ands	r3, r1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00a      	beq.n	80019b8 <HAL_I2C_Init+0x138>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1e59      	subs	r1, r3, #1
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80019b0:	3301      	adds	r3, #1
 80019b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b6:	e051      	b.n	8001a5c <HAL_I2C_Init+0x1dc>
 80019b8:	2304      	movs	r3, #4
 80019ba:	e04f      	b.n	8001a5c <HAL_I2C_Init+0x1dc>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d111      	bne.n	80019e8 <HAL_I2C_Init+0x168>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	1e58      	subs	r0, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6859      	ldr	r1, [r3, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	440b      	add	r3, r1
 80019d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d6:	3301      	adds	r3, #1
 80019d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf0c      	ite	eq
 80019e0:	2301      	moveq	r3, #1
 80019e2:	2300      	movne	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	e012      	b.n	8001a0e <HAL_I2C_Init+0x18e>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	1e58      	subs	r0, r3, #1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6859      	ldr	r1, [r3, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	0099      	lsls	r1, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80019fe:	3301      	adds	r3, #1
 8001a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	bf0c      	ite	eq
 8001a08:	2301      	moveq	r3, #1
 8001a0a:	2300      	movne	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2C_Init+0x196>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e022      	b.n	8001a5c <HAL_I2C_Init+0x1dc>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10e      	bne.n	8001a3c <HAL_I2C_Init+0x1bc>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1e58      	subs	r0, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6859      	ldr	r1, [r3, #4]
 8001a26:	460b      	mov	r3, r1
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	440b      	add	r3, r1
 8001a2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a30:	3301      	adds	r3, #1
 8001a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a3a:	e00f      	b.n	8001a5c <HAL_I2C_Init+0x1dc>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1e58      	subs	r0, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6859      	ldr	r1, [r3, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	0099      	lsls	r1, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a52:	3301      	adds	r3, #1
 8001a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	6809      	ldr	r1, [r1, #0]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69da      	ldr	r2, [r3, #28]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6911      	ldr	r1, [r2, #16]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68d2      	ldr	r2, [r2, #12]
 8001a96:	4311      	orrs	r1, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	430b      	orrs	r3, r1
 8001a9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695a      	ldr	r2, [r3, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0201 	orr.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	000186a0 	.word	0x000186a0
 8001af8:	001e847f 	.word	0x001e847f
 8001afc:	003d08ff 	.word	0x003d08ff
 8001b00:	431bde83 	.word	0x431bde83
 8001b04:	10624dd3 	.word	0x10624dd3

08001b08 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b28:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b30:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	2b10      	cmp	r3, #16
 8001b36:	d003      	beq.n	8001b40 <HAL_I2C_EV_IRQHandler+0x38>
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	2b40      	cmp	r3, #64	; 0x40
 8001b3c:	f040 80c1 	bne.w	8001cc2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10d      	bne.n	8001b76 <HAL_I2C_EV_IRQHandler+0x6e>
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001b60:	d003      	beq.n	8001b6a <HAL_I2C_EV_IRQHandler+0x62>
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001b68:	d101      	bne.n	8001b6e <HAL_I2C_EV_IRQHandler+0x66>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <HAL_I2C_EV_IRQHandler+0x68>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	f000 8132 	beq.w	8001dda <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00c      	beq.n	8001b9a <HAL_I2C_EV_IRQHandler+0x92>
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	0a5b      	lsrs	r3, r3, #9
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d006      	beq.n	8001b9a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f001 fc7b 	bl	8003488 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 fd83 	bl	800269e <I2C_Master_SB>
 8001b98:	e092      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	08db      	lsrs	r3, r3, #3
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d009      	beq.n	8001bba <HAL_I2C_EV_IRQHandler+0xb2>
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	0a5b      	lsrs	r3, r3, #9
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 fdf9 	bl	80027aa <I2C_Master_ADD10>
 8001bb8:	e082      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	085b      	lsrs	r3, r3, #1
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d009      	beq.n	8001bda <HAL_I2C_EV_IRQHandler+0xd2>
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	0a5b      	lsrs	r3, r3, #9
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 fe13 	bl	80027fe <I2C_Master_ADDR>
 8001bd8:	e072      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d03b      	beq.n	8001c5e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bf4:	f000 80f3 	beq.w	8001dde <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	09db      	lsrs	r3, r3, #7
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00f      	beq.n	8001c24 <HAL_I2C_EV_IRQHandler+0x11c>
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	0a9b      	lsrs	r3, r3, #10
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d009      	beq.n	8001c24 <HAL_I2C_EV_IRQHandler+0x11c>
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	089b      	lsrs	r3, r3, #2
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d103      	bne.n	8001c24 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f9f3 	bl	8002008 <I2C_MasterTransmit_TXE>
 8001c22:	e04d      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	089b      	lsrs	r3, r3, #2
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80d6 	beq.w	8001dde <HAL_I2C_EV_IRQHandler+0x2d6>
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	0a5b      	lsrs	r3, r3, #9
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 80cf 	beq.w	8001dde <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001c40:	7bbb      	ldrb	r3, [r7, #14]
 8001c42:	2b21      	cmp	r3, #33	; 0x21
 8001c44:	d103      	bne.n	8001c4e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 fa7a 	bl	8002140 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c4c:	e0c7      	b.n	8001dde <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	2b40      	cmp	r3, #64	; 0x40
 8001c52:	f040 80c4 	bne.w	8001dde <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 fae8 	bl	800222c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c5c:	e0bf      	b.n	8001dde <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c6c:	f000 80b7 	beq.w	8001dde <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	099b      	lsrs	r3, r3, #6
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00f      	beq.n	8001c9c <HAL_I2C_EV_IRQHandler+0x194>
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	0a9b      	lsrs	r3, r3, #10
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d009      	beq.n	8001c9c <HAL_I2C_EV_IRQHandler+0x194>
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d103      	bne.n	8001c9c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fb5d 	bl	8002354 <I2C_MasterReceive_RXNE>
 8001c9a:	e011      	b.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	089b      	lsrs	r3, r3, #2
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 809a 	beq.w	8001dde <HAL_I2C_EV_IRQHandler+0x2d6>
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	0a5b      	lsrs	r3, r3, #9
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8093 	beq.w	8001dde <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 fc06 	bl	80024ca <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cbe:	e08e      	b.n	8001dde <HAL_I2C_EV_IRQHandler+0x2d6>
 8001cc0:	e08d      	b.n	8001dde <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d004      	beq.n	8001cd4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	e007      	b.n	8001ce4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	085b      	lsrs	r3, r3, #1
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d012      	beq.n	8001d16 <HAL_I2C_EV_IRQHandler+0x20e>
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	0a5b      	lsrs	r3, r3, #9
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00c      	beq.n	8001d16 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001d0c:	69b9      	ldr	r1, [r7, #24]
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 ffc4 	bl	8002c9c <I2C_Slave_ADDR>
 8001d14:	e066      	b.n	8001de4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d009      	beq.n	8001d36 <HAL_I2C_EV_IRQHandler+0x22e>
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	0a5b      	lsrs	r3, r3, #9
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 fffe 	bl	8002d30 <I2C_Slave_STOPF>
 8001d34:	e056      	b.n	8001de4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001d36:	7bbb      	ldrb	r3, [r7, #14]
 8001d38:	2b21      	cmp	r3, #33	; 0x21
 8001d3a:	d002      	beq.n	8001d42 <HAL_I2C_EV_IRQHandler+0x23a>
 8001d3c:	7bbb      	ldrb	r3, [r7, #14]
 8001d3e:	2b29      	cmp	r3, #41	; 0x29
 8001d40:	d125      	bne.n	8001d8e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	09db      	lsrs	r3, r3, #7
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00f      	beq.n	8001d6e <HAL_I2C_EV_IRQHandler+0x266>
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	0a9b      	lsrs	r3, r3, #10
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d009      	beq.n	8001d6e <HAL_I2C_EV_IRQHandler+0x266>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d103      	bne.n	8001d6e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 feda 	bl	8002b20 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d6c:	e039      	b.n	8001de2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d033      	beq.n	8001de2 <HAL_I2C_EV_IRQHandler+0x2da>
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	0a5b      	lsrs	r3, r3, #9
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d02d      	beq.n	8001de2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 ff07 	bl	8002b9a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d8c:	e029      	b.n	8001de2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	099b      	lsrs	r3, r3, #6
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00f      	beq.n	8001dba <HAL_I2C_EV_IRQHandler+0x2b2>
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	0a9b      	lsrs	r3, r3, #10
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d009      	beq.n	8001dba <HAL_I2C_EV_IRQHandler+0x2b2>
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	089b      	lsrs	r3, r3, #2
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d103      	bne.n	8001dba <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 ff12 	bl	8002bdc <I2C_SlaveReceive_RXNE>
 8001db8:	e014      	b.n	8001de4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	089b      	lsrs	r3, r3, #2
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00e      	beq.n	8001de4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	0a5b      	lsrs	r3, r3, #9
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d008      	beq.n	8001de4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 ff40 	bl	8002c58 <I2C_SlaveReceive_BTF>
 8001dd8:	e004      	b.n	8001de4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001dda:	bf00      	nop
 8001ddc:	e002      	b.n	8001de4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dde:	bf00      	nop
 8001de0:	e000      	b.n	8001de4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001de2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001de4:	3720      	adds	r7, #32
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b08a      	sub	sp, #40	; 0x28
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e0c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00e      	beq.n	8001e38 <HAL_I2C_ER_IRQHandler+0x4e>
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d008      	beq.n	8001e38 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e36:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	0a5b      	lsrs	r3, r3, #9
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00e      	beq.n	8001e62 <HAL_I2C_ER_IRQHandler+0x78>
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	0a1b      	lsrs	r3, r3, #8
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	f043 0302 	orr.w	r3, r3, #2
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001e60:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	0a9b      	lsrs	r3, r3, #10
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d03f      	beq.n	8001eee <HAL_I2C_ER_IRQHandler+0x104>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d039      	beq.n	8001eee <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001e7a:	7efb      	ldrb	r3, [r7, #27]
 8001e7c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001e94:	7ebb      	ldrb	r3, [r7, #26]
 8001e96:	2b20      	cmp	r3, #32
 8001e98:	d112      	bne.n	8001ec0 <HAL_I2C_ER_IRQHandler+0xd6>
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10f      	bne.n	8001ec0 <HAL_I2C_ER_IRQHandler+0xd6>
 8001ea0:	7cfb      	ldrb	r3, [r7, #19]
 8001ea2:	2b21      	cmp	r3, #33	; 0x21
 8001ea4:	d008      	beq.n	8001eb8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001ea6:	7cfb      	ldrb	r3, [r7, #19]
 8001ea8:	2b29      	cmp	r3, #41	; 0x29
 8001eaa:	d005      	beq.n	8001eb8 <HAL_I2C_ER_IRQHandler+0xce>
 8001eac:	7cfb      	ldrb	r3, [r7, #19]
 8001eae:	2b28      	cmp	r3, #40	; 0x28
 8001eb0:	d106      	bne.n	8001ec0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b21      	cmp	r3, #33	; 0x21
 8001eb6:	d103      	bne.n	8001ec0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f001 f869 	bl	8002f90 <I2C_Slave_AF>
 8001ebe:	e016      	b.n	8001eee <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ec8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	f043 0304 	orr.w	r3, r3, #4
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001ed2:	7efb      	ldrb	r3, [r7, #27]
 8001ed4:	2b10      	cmp	r3, #16
 8001ed6:	d002      	beq.n	8001ede <HAL_I2C_ER_IRQHandler+0xf4>
 8001ed8:	7efb      	ldrb	r3, [r7, #27]
 8001eda:	2b40      	cmp	r3, #64	; 0x40
 8001edc:	d107      	bne.n	8001eee <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eec:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	0adb      	lsrs	r3, r3, #11
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00e      	beq.n	8001f18 <HAL_I2C_ER_IRQHandler+0x12e>
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d008      	beq.n	8001f18 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	f043 0308 	orr.w	r3, r3, #8
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001f16:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d008      	beq.n	8001f30 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f001 f8a0 	bl	8003070 <I2C_ITError>
  }
}
 8001f30:	bf00      	nop
 8001f32:	3728      	adds	r7, #40	; 0x28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	70fb      	strb	r3, [r7, #3]
 8001f94:	4613      	mov	r3, r2
 8001f96:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002016:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800201e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202a:	2b00      	cmp	r3, #0
 800202c:	d150      	bne.n	80020d0 <I2C_MasterTransmit_TXE+0xc8>
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	2b21      	cmp	r3, #33	; 0x21
 8002032:	d14d      	bne.n	80020d0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b08      	cmp	r3, #8
 8002038:	d01d      	beq.n	8002076 <I2C_MasterTransmit_TXE+0x6e>
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b20      	cmp	r3, #32
 800203e:	d01a      	beq.n	8002076 <I2C_MasterTransmit_TXE+0x6e>
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002046:	d016      	beq.n	8002076 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002056:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2211      	movs	r2, #17
 800205c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2220      	movs	r2, #32
 800206a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ff62 	bl	8001f38 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002074:	e060      	b.n	8002138 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002084:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002094:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2220      	movs	r2, #32
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b40      	cmp	r3, #64	; 0x40
 80020ae:	d107      	bne.n	80020c0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ff7d 	bl	8001fb8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020be:	e03b      	b.n	8002138 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ff35 	bl	8001f38 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020ce:	e033      	b.n	8002138 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	2b21      	cmp	r3, #33	; 0x21
 80020d4:	d005      	beq.n	80020e2 <I2C_MasterTransmit_TXE+0xda>
 80020d6:	7bbb      	ldrb	r3, [r7, #14]
 80020d8:	2b40      	cmp	r3, #64	; 0x40
 80020da:	d12d      	bne.n	8002138 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	2b22      	cmp	r3, #34	; 0x22
 80020e0:	d12a      	bne.n	8002138 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d108      	bne.n	80020fe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020fa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80020fc:	e01c      	b.n	8002138 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b40      	cmp	r3, #64	; 0x40
 8002108:	d103      	bne.n	8002112 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f88e 	bl	800222c <I2C_MemoryTransmit_TXE_BTF>
}
 8002110:	e012      	b.n	8002138 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	781a      	ldrb	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212c:	b29b      	uxth	r3, r3
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002136:	e7ff      	b.n	8002138 <I2C_MasterTransmit_TXE+0x130>
 8002138:	bf00      	nop
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b21      	cmp	r3, #33	; 0x21
 8002158:	d164      	bne.n	8002224 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215e:	b29b      	uxth	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d012      	beq.n	800218a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	781a      	ldrb	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217e:	b29b      	uxth	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002188:	e04c      	b.n	8002224 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b08      	cmp	r3, #8
 800218e:	d01d      	beq.n	80021cc <I2C_MasterTransmit_BTF+0x8c>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b20      	cmp	r3, #32
 8002194:	d01a      	beq.n	80021cc <I2C_MasterTransmit_BTF+0x8c>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800219c:	d016      	beq.n	80021cc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021ac:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2211      	movs	r2, #17
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff feb7 	bl	8001f38 <HAL_I2C_MasterTxCpltCallback>
}
 80021ca:	e02b      	b.n	8002224 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021da:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2220      	movs	r2, #32
 80021f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b40      	cmp	r3, #64	; 0x40
 8002204:	d107      	bne.n	8002216 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff fed2 	bl	8001fb8 <HAL_I2C_MemTxCpltCallback>
}
 8002214:	e006      	b.n	8002224 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff fe8a 	bl	8001f38 <HAL_I2C_MasterTxCpltCallback>
}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800223a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002240:	2b00      	cmp	r3, #0
 8002242:	d11d      	bne.n	8002280 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002248:	2b01      	cmp	r3, #1
 800224a:	d10b      	bne.n	8002264 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002250:	b2da      	uxtb	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800225c:	1c9a      	adds	r2, r3, #2
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002262:	e073      	b.n	800234c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002268:	b29b      	uxth	r3, r3
 800226a:	121b      	asrs	r3, r3, #8
 800226c:	b2da      	uxtb	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800227e:	e065      	b.n	800234c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002284:	2b01      	cmp	r3, #1
 8002286:	d10b      	bne.n	80022a0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228c:	b2da      	uxtb	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800229e:	e055      	b.n	800234c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d151      	bne.n	800234c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	2b22      	cmp	r3, #34	; 0x22
 80022ac:	d10d      	bne.n	80022ca <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022bc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022c8:	e040      	b.n	800234c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d015      	beq.n	8002300 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	2b21      	cmp	r3, #33	; 0x21
 80022d8:	d112      	bne.n	8002300 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	781a      	ldrb	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80022fe:	e025      	b.n	800234c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002304:	b29b      	uxth	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d120      	bne.n	800234c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	2b21      	cmp	r3, #33	; 0x21
 800230e:	d11d      	bne.n	800234c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800231e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2220      	movs	r2, #32
 800233a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff fe36 	bl	8001fb8 <HAL_I2C_MemTxCpltCallback>
}
 800234c:	bf00      	nop
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b22      	cmp	r3, #34	; 0x22
 8002366:	f040 80ac 	bne.w	80024c2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d921      	bls.n	80023bc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002394:	b29b      	uxth	r3, r3
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	f040 808c 	bne.w	80024c2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80023ba:	e082      	b.n	80024c2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d075      	beq.n	80024b0 <I2C_MasterReceive_RXNE+0x15c>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d002      	beq.n	80023d0 <I2C_MasterReceive_RXNE+0x7c>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d16f      	bne.n	80024b0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f001 f827 	bl	8003424 <I2C_WaitOnSTOPRequestThroughIT>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d142      	bne.n	8002462 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ea:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023fa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2220      	movs	r2, #32
 8002426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b40      	cmp	r3, #64	; 0x40
 8002434:	d10a      	bne.n	800244c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff fdc1 	bl	8001fcc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800244a:	e03a      	b.n	80024c2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2212      	movs	r2, #18
 8002458:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff fd76 	bl	8001f4c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002460:	e02f      	b.n	80024c2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002470:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff fd99 	bl	8001fe0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024ae:	e008      	b.n	80024c2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024be:	605a      	str	r2, [r3, #4]
}
 80024c0:	e7ff      	b.n	80024c2 <I2C_MasterReceive_RXNE+0x16e>
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d11b      	bne.n	800251a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250e:	b29b      	uxth	r3, r3
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002518:	e0bd      	b.n	8002696 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	2b03      	cmp	r3, #3
 8002522:	d129      	bne.n	8002578 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002532:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b04      	cmp	r3, #4
 8002538:	d00a      	beq.n	8002550 <I2C_MasterReceive_BTF+0x86>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d007      	beq.n	8002550 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800254e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691a      	ldr	r2, [r3, #16]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002576:	e08e      	b.n	8002696 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d176      	bne.n	8002670 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d002      	beq.n	800258e <I2C_MasterReceive_BTF+0xc4>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b10      	cmp	r3, #16
 800258c:	d108      	bne.n	80025a0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	e019      	b.n	80025d4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d002      	beq.n	80025ac <I2C_MasterReceive_BTF+0xe2>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d108      	bne.n	80025be <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	e00a      	b.n	80025d4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b10      	cmp	r3, #16
 80025c2:	d007      	beq.n	80025d4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800262e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b40      	cmp	r3, #64	; 0x40
 8002642:	d10a      	bne.n	800265a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff fcba 	bl	8001fcc <HAL_I2C_MemRxCpltCallback>
}
 8002658:	e01d      	b.n	8002696 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2212      	movs	r2, #18
 8002666:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff fc6f 	bl	8001f4c <HAL_I2C_MasterRxCpltCallback>
}
 800266e:	e012      	b.n	8002696 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268c:	b29b      	uxth	r3, r3
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b40      	cmp	r3, #64	; 0x40
 80026b0:	d117      	bne.n	80026e2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026ca:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80026cc:	e067      	b.n	800279e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	611a      	str	r2, [r3, #16]
}
 80026e0:	e05d      	b.n	800279e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026ea:	d133      	bne.n	8002754 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b21      	cmp	r3, #33	; 0x21
 80026f6:	d109      	bne.n	800270c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	461a      	mov	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002708:	611a      	str	r2, [r3, #16]
 800270a:	e008      	b.n	800271e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002710:	b2db      	uxtb	r3, r3
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	b2da      	uxtb	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002722:	2b00      	cmp	r3, #0
 8002724:	d004      	beq.n	8002730 <I2C_Master_SB+0x92>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d108      	bne.n	8002742 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002734:	2b00      	cmp	r3, #0
 8002736:	d032      	beq.n	800279e <I2C_Master_SB+0x100>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273e:	2b00      	cmp	r3, #0
 8002740:	d02d      	beq.n	800279e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002750:	605a      	str	r2, [r3, #4]
}
 8002752:	e024      	b.n	800279e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10e      	bne.n	800277a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002760:	b29b      	uxth	r3, r3
 8002762:	11db      	asrs	r3, r3, #7
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f003 0306 	and.w	r3, r3, #6
 800276a:	b2db      	uxtb	r3, r3
 800276c:	f063 030f 	orn	r3, r3, #15
 8002770:	b2da      	uxtb	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	611a      	str	r2, [r3, #16]
}
 8002778:	e011      	b.n	800279e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800277e:	2b01      	cmp	r3, #1
 8002780:	d10d      	bne.n	800279e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	b29b      	uxth	r3, r3
 8002788:	11db      	asrs	r3, r3, #7
 800278a:	b2db      	uxtb	r3, r3
 800278c:	f003 0306 	and.w	r3, r3, #6
 8002790:	b2db      	uxtb	r3, r3
 8002792:	f063 030e 	orn	r3, r3, #14
 8002796:	b2da      	uxtb	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	611a      	str	r2, [r3, #16]
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d004      	beq.n	80027d0 <I2C_Master_ADD10+0x26>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d108      	bne.n	80027e2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00c      	beq.n	80027f2 <I2C_Master_ADD10+0x48>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d007      	beq.n	80027f2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027f0:	605a      	str	r2, [r3, #4]
  }
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80027fe:	b480      	push	{r7}
 8002800:	b091      	sub	sp, #68	; 0x44
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800280c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b22      	cmp	r3, #34	; 0x22
 8002826:	f040 8169 	bne.w	8002afc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10f      	bne.n	8002852 <I2C_Master_ADDR+0x54>
 8002832:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002836:	2b40      	cmp	r3, #64	; 0x40
 8002838:	d10b      	bne.n	8002852 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800283a:	2300      	movs	r3, #0
 800283c:	633b      	str	r3, [r7, #48]	; 0x30
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	633b      	str	r3, [r7, #48]	; 0x30
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	633b      	str	r3, [r7, #48]	; 0x30
 800284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002850:	e160      	b.n	8002b14 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002856:	2b00      	cmp	r3, #0
 8002858:	d11d      	bne.n	8002896 <I2C_Master_ADDR+0x98>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002862:	d118      	bne.n	8002896 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002864:	2300      	movs	r3, #0
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002878:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002888:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	651a      	str	r2, [r3, #80]	; 0x50
 8002894:	e13e      	b.n	8002b14 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289a:	b29b      	uxth	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d113      	bne.n	80028c8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a0:	2300      	movs	r3, #0
 80028a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80028b4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	e115      	b.n	8002af4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	f040 808a 	bne.w	80029e8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80028d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028da:	d137      	bne.n	800294c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ea:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028fa:	d113      	bne.n	8002924 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800290a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	e0e7      	b.n	8002af4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002924:	2300      	movs	r3, #0
 8002926:	623b      	str	r3, [r7, #32]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	623b      	str	r3, [r7, #32]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	623b      	str	r3, [r7, #32]
 8002938:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	e0d3      	b.n	8002af4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800294c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294e:	2b08      	cmp	r3, #8
 8002950:	d02e      	beq.n	80029b0 <I2C_Master_ADDR+0x1b2>
 8002952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002954:	2b20      	cmp	r3, #32
 8002956:	d02b      	beq.n	80029b0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295a:	2b12      	cmp	r3, #18
 800295c:	d102      	bne.n	8002964 <I2C_Master_ADDR+0x166>
 800295e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002960:	2b01      	cmp	r3, #1
 8002962:	d125      	bne.n	80029b0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002966:	2b04      	cmp	r3, #4
 8002968:	d00e      	beq.n	8002988 <I2C_Master_ADDR+0x18a>
 800296a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296c:	2b02      	cmp	r3, #2
 800296e:	d00b      	beq.n	8002988 <I2C_Master_ADDR+0x18a>
 8002970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002972:	2b10      	cmp	r3, #16
 8002974:	d008      	beq.n	8002988 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e007      	b.n	8002998 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002996:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002998:	2300      	movs	r3, #0
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	61fb      	str	r3, [r7, #28]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	61fb      	str	r3, [r7, #28]
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	e0a1      	b.n	8002af4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029be:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c0:	2300      	movs	r3, #0
 80029c2:	61bb      	str	r3, [r7, #24]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	61bb      	str	r3, [r7, #24]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	e085      	b.n	8002af4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d14d      	bne.n	8002a8e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80029f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d016      	beq.n	8002a26 <I2C_Master_ADDR+0x228>
 80029f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d013      	beq.n	8002a26 <I2C_Master_ADDR+0x228>
 80029fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a00:	2b10      	cmp	r3, #16
 8002a02:	d010      	beq.n	8002a26 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a12:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	e007      	b.n	8002a36 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a34:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a44:	d117      	bne.n	8002a76 <I2C_Master_ADDR+0x278>
 8002a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a4c:	d00b      	beq.n	8002a66 <I2C_Master_ADDR+0x268>
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d008      	beq.n	8002a66 <I2C_Master_ADDR+0x268>
 8002a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d005      	beq.n	8002a66 <I2C_Master_ADDR+0x268>
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d002      	beq.n	8002a66 <I2C_Master_ADDR+0x268>
 8002a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	d107      	bne.n	8002a76 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a74:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	e032      	b.n	8002af4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a9c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aac:	d117      	bne.n	8002ade <I2C_Master_ADDR+0x2e0>
 8002aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ab4:	d00b      	beq.n	8002ace <I2C_Master_ADDR+0x2d0>
 8002ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d008      	beq.n	8002ace <I2C_Master_ADDR+0x2d0>
 8002abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d005      	beq.n	8002ace <I2C_Master_ADDR+0x2d0>
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d002      	beq.n	8002ace <I2C_Master_ADDR+0x2d0>
 8002ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	d107      	bne.n	8002ade <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002adc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002afa:	e00b      	b.n	8002b14 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afc:	2300      	movs	r3, #0
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
}
 8002b12:	e7ff      	b.n	8002b14 <I2C_Master_ADDR+0x316>
 8002b14:	bf00      	nop
 8002b16:	3744      	adds	r7, #68	; 0x44
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b2e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d02b      	beq.n	8002b92 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	781a      	ldrb	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d114      	bne.n	8002b92 <I2C_SlaveTransmit_TXE+0x72>
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	2b29      	cmp	r3, #41	; 0x29
 8002b6c:	d111      	bne.n	8002b92 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2221      	movs	r2, #33	; 0x21
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2228      	movs	r2, #40	; 0x28
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff f9e7 	bl	8001f60 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002b92:	bf00      	nop
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d011      	beq.n	8002bd0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	781a      	ldrb	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d02c      	beq.n	8002c50 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d114      	bne.n	8002c50 <I2C_SlaveReceive_RXNE+0x74>
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
 8002c28:	2b2a      	cmp	r3, #42	; 0x2a
 8002c2a:	d111      	bne.n	8002c50 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c3a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2222      	movs	r2, #34	; 0x22
 8002c40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2228      	movs	r2, #40	; 0x28
 8002c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff f992 	bl	8001f74 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d012      	beq.n	8002c90 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cb6:	2b28      	cmp	r3, #40	; 0x28
 8002cb8:	d127      	bne.n	8002d0a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	089b      	lsrs	r3, r3, #2
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	09db      	lsrs	r3, r3, #7
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d103      	bne.n	8002cee <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	81bb      	strh	r3, [r7, #12]
 8002cec:	e002      	b.n	8002cf4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002cfc:	89ba      	ldrh	r2, [r7, #12]
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	4619      	mov	r1, r3
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff f940 	bl	8001f88 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d08:	e00e      	b.n	8002d28 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	60bb      	str	r3, [r7, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002d28:	bf00      	nop
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d4e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002d50:	2300      	movs	r3, #0
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0201 	orr.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d8c:	d172      	bne.n	8002e74 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	2b22      	cmp	r3, #34	; 0x22
 8002d92:	d002      	beq.n	8002d9a <I2C_Slave_STOPF+0x6a>
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2b2a      	cmp	r3, #42	; 0x2a
 8002d98:	d135      	bne.n	8002e06 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d005      	beq.n	8002dbe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f043 0204 	orr.w	r2, r3, #4
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dcc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe fba7 	bl	8001526 <HAL_DMA_GetState>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d049      	beq.n	8002e72 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	4a69      	ldr	r2, [pc, #420]	; (8002f88 <I2C_Slave_STOPF+0x258>)
 8002de4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fb79 	bl	80014e2 <HAL_DMA_Abort_IT>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d03d      	beq.n	8002e72 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e00:	4610      	mov	r0, r2
 8002e02:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e04:	e035      	b.n	8002e72 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d005      	beq.n	8002e2a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f043 0204 	orr.w	r2, r3, #4
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e38:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe fb71 	bl	8001526 <HAL_DMA_GetState>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d014      	beq.n	8002e74 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4e:	4a4e      	ldr	r2, [pc, #312]	; (8002f88 <I2C_Slave_STOPF+0x258>)
 8002e50:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe fb43 	bl	80014e2 <HAL_DMA_Abort_IT>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d008      	beq.n	8002e74 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	4798      	blx	r3
 8002e70:	e000      	b.n	8002e74 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e72:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d03e      	beq.n	8002efc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d112      	bne.n	8002eb2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebc:	2b40      	cmp	r3, #64	; 0x40
 8002ebe:	d112      	bne.n	8002ee6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	f043 0204 	orr.w	r2, r3, #4
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f8b3 	bl	8003070 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002f0a:	e039      	b.n	8002f80 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8002f10:	d109      	bne.n	8002f26 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2228      	movs	r2, #40	; 0x28
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff f827 	bl	8001f74 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b28      	cmp	r3, #40	; 0x28
 8002f30:	d111      	bne.n	8002f56 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a15      	ldr	r2, [pc, #84]	; (8002f8c <I2C_Slave_STOPF+0x25c>)
 8002f36:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff f828 	bl	8001fa4 <HAL_I2C_ListenCpltCallback>
}
 8002f54:	e014      	b.n	8002f80 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	2b22      	cmp	r3, #34	; 0x22
 8002f5c:	d002      	beq.n	8002f64 <I2C_Slave_STOPF+0x234>
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	2b22      	cmp	r3, #34	; 0x22
 8002f62:	d10d      	bne.n	8002f80 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7fe fffa 	bl	8001f74 <HAL_I2C_SlaveRxCpltCallback>
}
 8002f80:	bf00      	nop
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	080032d5 	.word	0x080032d5
 8002f8c:	ffff0000 	.word	0xffff0000

08002f90 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d002      	beq.n	8002fb2 <I2C_Slave_AF+0x22>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b20      	cmp	r3, #32
 8002fb0:	d129      	bne.n	8003006 <I2C_Slave_AF+0x76>
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	2b28      	cmp	r3, #40	; 0x28
 8002fb6:	d126      	bne.n	8003006 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a2c      	ldr	r2, [pc, #176]	; (800306c <I2C_Slave_AF+0xdc>)
 8002fbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fcc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fd6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fe ffd0 	bl	8001fa4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003004:	e02e      	b.n	8003064 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	2b21      	cmp	r3, #33	; 0x21
 800300a:	d126      	bne.n	800305a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a17      	ldr	r2, [pc, #92]	; (800306c <I2C_Slave_AF+0xdc>)
 8003010:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2221      	movs	r2, #33	; 0x21
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003036:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003040:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003050:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7fe ff84 	bl	8001f60 <HAL_I2C_SlaveTxCpltCallback>
}
 8003058:	e004      	b.n	8003064 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003062:	615a      	str	r2, [r3, #20]
}
 8003064:	bf00      	nop
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	ffff0000 	.word	0xffff0000

08003070 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003086:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003088:	7bbb      	ldrb	r3, [r7, #14]
 800308a:	2b10      	cmp	r3, #16
 800308c:	d002      	beq.n	8003094 <I2C_ITError+0x24>
 800308e:	7bbb      	ldrb	r3, [r7, #14]
 8003090:	2b40      	cmp	r3, #64	; 0x40
 8003092:	d10a      	bne.n	80030aa <I2C_ITError+0x3a>
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	2b22      	cmp	r3, #34	; 0x22
 8003098:	d107      	bne.n	80030aa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030a8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030b0:	2b28      	cmp	r3, #40	; 0x28
 80030b2:	d107      	bne.n	80030c4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2228      	movs	r2, #40	; 0x28
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80030c2:	e015      	b.n	80030f0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d2:	d00a      	beq.n	80030ea <I2C_ITError+0x7a>
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	2b60      	cmp	r3, #96	; 0x60
 80030d8:	d007      	beq.n	80030ea <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2220      	movs	r2, #32
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030fe:	d162      	bne.n	80031c6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800310e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b01      	cmp	r3, #1
 800311c:	d020      	beq.n	8003160 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003122:	4a6a      	ldr	r2, [pc, #424]	; (80032cc <I2C_ITError+0x25c>)
 8003124:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312a:	4618      	mov	r0, r3
 800312c:	f7fe f9d9 	bl	80014e2 <HAL_DMA_Abort_IT>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8089 	beq.w	800324a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800315a:	4610      	mov	r0, r2
 800315c:	4798      	blx	r3
 800315e:	e074      	b.n	800324a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003164:	4a59      	ldr	r2, [pc, #356]	; (80032cc <I2C_ITError+0x25c>)
 8003166:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316c:	4618      	mov	r0, r3
 800316e:	f7fe f9b8 	bl	80014e2 <HAL_DMA_Abort_IT>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d068      	beq.n	800324a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003182:	2b40      	cmp	r3, #64	; 0x40
 8003184:	d10b      	bne.n	800319e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031c0:	4610      	mov	r0, r2
 80031c2:	4798      	blx	r3
 80031c4:	e041      	b.n	800324a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b60      	cmp	r3, #96	; 0x60
 80031d0:	d125      	bne.n	800321e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b40      	cmp	r3, #64	; 0x40
 80031ec:	d10b      	bne.n	8003206 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0201 	bic.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7fe feec 	bl	8001ff4 <HAL_I2C_AbortCpltCallback>
 800321c:	e015      	b.n	800324a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003228:	2b40      	cmp	r3, #64	; 0x40
 800322a:	d10b      	bne.n	8003244 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691a      	ldr	r2, [r3, #16]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7fe fecb 	bl	8001fe0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10e      	bne.n	8003278 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003260:	2b00      	cmp	r3, #0
 8003262:	d109      	bne.n	8003278 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800326a:	2b00      	cmp	r3, #0
 800326c:	d104      	bne.n	8003278 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003274:	2b00      	cmp	r3, #0
 8003276:	d007      	beq.n	8003288 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003286:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b04      	cmp	r3, #4
 800329a:	d113      	bne.n	80032c4 <I2C_ITError+0x254>
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	2b28      	cmp	r3, #40	; 0x28
 80032a0:	d110      	bne.n	80032c4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <I2C_ITError+0x260>)
 80032a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fe fe70 	bl	8001fa4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80032c4:	bf00      	nop
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	080032d5 	.word	0x080032d5
 80032d0:	ffff0000 	.word	0xffff0000

080032d4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ec:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80032ee:	4b4b      	ldr	r3, [pc, #300]	; (800341c <I2C_DMAAbort+0x148>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	08db      	lsrs	r3, r3, #3
 80032f4:	4a4a      	ldr	r2, [pc, #296]	; (8003420 <I2C_DMAAbort+0x14c>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	0a1a      	lsrs	r2, r3, #8
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	00da      	lsls	r2, r3, #3
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d106      	bne.n	800331c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f043 0220 	orr.w	r2, r3, #32
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800331a:	e00a      	b.n	8003332 <I2C_DMAAbort+0x5e>
    }
    count--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3b01      	subs	r3, #1
 8003320:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003330:	d0ea      	beq.n	8003308 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333e:	2200      	movs	r2, #0
 8003340:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	2200      	movs	r2, #0
 8003350:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003360:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2200      	movs	r2, #0
 8003366:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003374:	2200      	movs	r2, #0
 8003376:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	2200      	movs	r2, #0
 8003386:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0201 	bic.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b60      	cmp	r3, #96	; 0x60
 80033a2:	d10e      	bne.n	80033c2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2200      	movs	r2, #0
 80033b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80033ba:	6978      	ldr	r0, [r7, #20]
 80033bc:	f7fe fe1a 	bl	8001ff4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033c0:	e027      	b.n	8003412 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033c2:	7cfb      	ldrb	r3, [r7, #19]
 80033c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033c8:	2b28      	cmp	r3, #40	; 0x28
 80033ca:	d117      	bne.n	80033fc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033ea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2200      	movs	r2, #0
 80033f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2228      	movs	r2, #40	; 0x28
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80033fa:	e007      	b.n	800340c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800340c:	6978      	ldr	r0, [r7, #20]
 800340e:	f7fe fde7 	bl	8001fe0 <HAL_I2C_ErrorCallback>
}
 8003412:	bf00      	nop
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000000 	.word	0x20000000
 8003420:	14f8b589 	.word	0x14f8b589

08003424 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003430:	4b13      	ldr	r3, [pc, #76]	; (8003480 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	08db      	lsrs	r3, r3, #3
 8003436:	4a13      	ldr	r2, [pc, #76]	; (8003484 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003438:	fba2 2303 	umull	r2, r3, r2, r3
 800343c:	0a1a      	lsrs	r2, r3, #8
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	3b01      	subs	r3, #1
 800344a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d107      	bne.n	8003462 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f043 0220 	orr.w	r2, r3, #32
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e008      	b.n	8003474 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800346c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003470:	d0e9      	beq.n	8003446 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	20000000 	.word	0x20000000
 8003484:	14f8b589 	.word	0x14f8b589

08003488 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003498:	d103      	bne.n	80034a2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80034a0:	e007      	b.n	80034b2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80034aa:	d102      	bne.n	80034b2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2208      	movs	r2, #8
 80034b0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
	...

080034c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e267      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d075      	beq.n	80035ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034de:	4b88      	ldr	r3, [pc, #544]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d00c      	beq.n	8003504 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ea:	4b85      	ldr	r3, [pc, #532]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d112      	bne.n	800351c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f6:	4b82      	ldr	r3, [pc, #520]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003502:	d10b      	bne.n	800351c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003504:	4b7e      	ldr	r3, [pc, #504]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d05b      	beq.n	80035c8 <HAL_RCC_OscConfig+0x108>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d157      	bne.n	80035c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e242      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003524:	d106      	bne.n	8003534 <HAL_RCC_OscConfig+0x74>
 8003526:	4b76      	ldr	r3, [pc, #472]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a75      	ldr	r2, [pc, #468]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e01d      	b.n	8003570 <HAL_RCC_OscConfig+0xb0>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0x98>
 800353e:	4b70      	ldr	r3, [pc, #448]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a6f      	ldr	r2, [pc, #444]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	4b6d      	ldr	r3, [pc, #436]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a6c      	ldr	r2, [pc, #432]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e00b      	b.n	8003570 <HAL_RCC_OscConfig+0xb0>
 8003558:	4b69      	ldr	r3, [pc, #420]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a68      	ldr	r2, [pc, #416]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 800355e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	4b66      	ldr	r3, [pc, #408]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a65      	ldr	r2, [pc, #404]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 800356a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800356e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d013      	beq.n	80035a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fd fe96 	bl	80012a8 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003580:	f7fd fe92 	bl	80012a8 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	; 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e207      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003592:	4b5b      	ldr	r3, [pc, #364]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0xc0>
 800359e:	e014      	b.n	80035ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a0:	f7fd fe82 	bl	80012a8 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fd fe7e 	bl	80012a8 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e1f3      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ba:	4b51      	ldr	r3, [pc, #324]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0xe8>
 80035c6:	e000      	b.n	80035ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d063      	beq.n	800369e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035d6:	4b4a      	ldr	r3, [pc, #296]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00b      	beq.n	80035fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035e2:	4b47      	ldr	r3, [pc, #284]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d11c      	bne.n	8003628 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ee:	4b44      	ldr	r3, [pc, #272]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d116      	bne.n	8003628 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fa:	4b41      	ldr	r3, [pc, #260]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_RCC_OscConfig+0x152>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d001      	beq.n	8003612 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e1c7      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003612:	4b3b      	ldr	r3, [pc, #236]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4937      	ldr	r1, [pc, #220]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003626:	e03a      	b.n	800369e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d020      	beq.n	8003672 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003630:	4b34      	ldr	r3, [pc, #208]	; (8003704 <HAL_RCC_OscConfig+0x244>)
 8003632:	2201      	movs	r2, #1
 8003634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003636:	f7fd fe37 	bl	80012a8 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800363e:	f7fd fe33 	bl	80012a8 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e1a8      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003650:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0f0      	beq.n	800363e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365c:	4b28      	ldr	r3, [pc, #160]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4925      	ldr	r1, [pc, #148]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 800366c:	4313      	orrs	r3, r2
 800366e:	600b      	str	r3, [r1, #0]
 8003670:	e015      	b.n	800369e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003672:	4b24      	ldr	r3, [pc, #144]	; (8003704 <HAL_RCC_OscConfig+0x244>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fd fe16 	bl	80012a8 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003680:	f7fd fe12 	bl	80012a8 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e187      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003692:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d036      	beq.n	8003718 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d016      	beq.n	80036e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036b2:	4b15      	ldr	r3, [pc, #84]	; (8003708 <HAL_RCC_OscConfig+0x248>)
 80036b4:	2201      	movs	r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fd fdf6 	bl	80012a8 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036c0:	f7fd fdf2 	bl	80012a8 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e167      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d2:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80036d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f0      	beq.n	80036c0 <HAL_RCC_OscConfig+0x200>
 80036de:	e01b      	b.n	8003718 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e0:	4b09      	ldr	r3, [pc, #36]	; (8003708 <HAL_RCC_OscConfig+0x248>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e6:	f7fd fddf 	bl	80012a8 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ec:	e00e      	b.n	800370c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ee:	f7fd fddb 	bl	80012a8 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d907      	bls.n	800370c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e150      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
 8003700:	40023800 	.word	0x40023800
 8003704:	42470000 	.word	0x42470000
 8003708:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370c:	4b88      	ldr	r3, [pc, #544]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 800370e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ea      	bne.n	80036ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 8097 	beq.w	8003854 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003726:	2300      	movs	r3, #0
 8003728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372a:	4b81      	ldr	r3, [pc, #516]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10f      	bne.n	8003756 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	4b7d      	ldr	r3, [pc, #500]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	4a7c      	ldr	r2, [pc, #496]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 8003740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003744:	6413      	str	r3, [r2, #64]	; 0x40
 8003746:	4b7a      	ldr	r3, [pc, #488]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374e:	60bb      	str	r3, [r7, #8]
 8003750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003752:	2301      	movs	r3, #1
 8003754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003756:	4b77      	ldr	r3, [pc, #476]	; (8003934 <HAL_RCC_OscConfig+0x474>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d118      	bne.n	8003794 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003762:	4b74      	ldr	r3, [pc, #464]	; (8003934 <HAL_RCC_OscConfig+0x474>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a73      	ldr	r2, [pc, #460]	; (8003934 <HAL_RCC_OscConfig+0x474>)
 8003768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800376e:	f7fd fd9b 	bl	80012a8 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003776:	f7fd fd97 	bl	80012a8 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e10c      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003788:	4b6a      	ldr	r3, [pc, #424]	; (8003934 <HAL_RCC_OscConfig+0x474>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d106      	bne.n	80037aa <HAL_RCC_OscConfig+0x2ea>
 800379c:	4b64      	ldr	r3, [pc, #400]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	4a63      	ldr	r2, [pc, #396]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6713      	str	r3, [r2, #112]	; 0x70
 80037a8:	e01c      	b.n	80037e4 <HAL_RCC_OscConfig+0x324>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b05      	cmp	r3, #5
 80037b0:	d10c      	bne.n	80037cc <HAL_RCC_OscConfig+0x30c>
 80037b2:	4b5f      	ldr	r3, [pc, #380]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	4a5e      	ldr	r2, [pc, #376]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037b8:	f043 0304 	orr.w	r3, r3, #4
 80037bc:	6713      	str	r3, [r2, #112]	; 0x70
 80037be:	4b5c      	ldr	r3, [pc, #368]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	4a5b      	ldr	r2, [pc, #364]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ca:	e00b      	b.n	80037e4 <HAL_RCC_OscConfig+0x324>
 80037cc:	4b58      	ldr	r3, [pc, #352]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d0:	4a57      	ldr	r2, [pc, #348]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	6713      	str	r3, [r2, #112]	; 0x70
 80037d8:	4b55      	ldr	r3, [pc, #340]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037dc:	4a54      	ldr	r2, [pc, #336]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037de:	f023 0304 	bic.w	r3, r3, #4
 80037e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d015      	beq.n	8003818 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fd fd5c 	bl	80012a8 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f2:	e00a      	b.n	800380a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f4:	f7fd fd58 	bl	80012a8 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e0cb      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380a:	4b49      	ldr	r3, [pc, #292]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0ee      	beq.n	80037f4 <HAL_RCC_OscConfig+0x334>
 8003816:	e014      	b.n	8003842 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003818:	f7fd fd46 	bl	80012a8 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381e:	e00a      	b.n	8003836 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003820:	f7fd fd42 	bl	80012a8 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	; 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e0b5      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003836:	4b3e      	ldr	r3, [pc, #248]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1ee      	bne.n	8003820 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003842:	7dfb      	ldrb	r3, [r7, #23]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d105      	bne.n	8003854 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003848:	4b39      	ldr	r3, [pc, #228]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	4a38      	ldr	r2, [pc, #224]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 800384e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003852:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80a1 	beq.w	80039a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800385e:	4b34      	ldr	r3, [pc, #208]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b08      	cmp	r3, #8
 8003868:	d05c      	beq.n	8003924 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d141      	bne.n	80038f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003872:	4b31      	ldr	r3, [pc, #196]	; (8003938 <HAL_RCC_OscConfig+0x478>)
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003878:	f7fd fd16 	bl	80012a8 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003880:	f7fd fd12 	bl	80012a8 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e087      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003892:	4b27      	ldr	r3, [pc, #156]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69da      	ldr	r2, [r3, #28]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	019b      	lsls	r3, r3, #6
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b4:	085b      	lsrs	r3, r3, #1
 80038b6:	3b01      	subs	r3, #1
 80038b8:	041b      	lsls	r3, r3, #16
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	061b      	lsls	r3, r3, #24
 80038c2:	491b      	ldr	r1, [pc, #108]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038c8:	4b1b      	ldr	r3, [pc, #108]	; (8003938 <HAL_RCC_OscConfig+0x478>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ce:	f7fd fceb 	bl	80012a8 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d6:	f7fd fce7 	bl	80012a8 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e05c      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e8:	4b11      	ldr	r3, [pc, #68]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCC_OscConfig+0x416>
 80038f4:	e054      	b.n	80039a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <HAL_RCC_OscConfig+0x478>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7fd fcd4 	bl	80012a8 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003904:	f7fd fcd0 	bl	80012a8 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e045      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003916:	4b06      	ldr	r3, [pc, #24]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x444>
 8003922:	e03d      	b.n	80039a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d107      	bne.n	800393c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e038      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
 8003930:	40023800 	.word	0x40023800
 8003934:	40007000 	.word	0x40007000
 8003938:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800393c:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <HAL_RCC_OscConfig+0x4ec>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d028      	beq.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003954:	429a      	cmp	r2, r3
 8003956:	d121      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d11a      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800396c:	4013      	ands	r3, r2
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003972:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003974:	4293      	cmp	r3, r2
 8003976:	d111      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	085b      	lsrs	r3, r3, #1
 8003984:	3b01      	subs	r3, #1
 8003986:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d107      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800

080039b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0cc      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039c4:	4b68      	ldr	r3, [pc, #416]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d90c      	bls.n	80039ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b65      	ldr	r3, [pc, #404]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b63      	ldr	r3, [pc, #396]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0b8      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d020      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a04:	4b59      	ldr	r3, [pc, #356]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4a58      	ldr	r2, [pc, #352]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a1c:	4b53      	ldr	r3, [pc, #332]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4a52      	ldr	r2, [pc, #328]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a28:	4b50      	ldr	r3, [pc, #320]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	494d      	ldr	r1, [pc, #308]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d044      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d107      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4e:	4b47      	ldr	r3, [pc, #284]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d119      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e07f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d003      	beq.n	8003a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d107      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6e:	4b3f      	ldr	r3, [pc, #252]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e06f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7e:	4b3b      	ldr	r3, [pc, #236]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e067      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a8e:	4b37      	ldr	r3, [pc, #220]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f023 0203 	bic.w	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4934      	ldr	r1, [pc, #208]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa0:	f7fd fc02 	bl	80012a8 <HAL_GetTick>
 8003aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa6:	e00a      	b.n	8003abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa8:	f7fd fbfe 	bl	80012a8 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e04f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abe:	4b2b      	ldr	r3, [pc, #172]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 020c 	and.w	r2, r3, #12
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d1eb      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad0:	4b25      	ldr	r3, [pc, #148]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d20c      	bcs.n	8003af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	4b22      	ldr	r3, [pc, #136]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b20      	ldr	r3, [pc, #128]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e032      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b04:	4b19      	ldr	r3, [pc, #100]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4916      	ldr	r1, [pc, #88]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d009      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b22:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	490e      	ldr	r1, [pc, #56]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b36:	f000 f821 	bl	8003b7c <HAL_RCC_GetSysClockFreq>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	490a      	ldr	r1, [pc, #40]	; (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 8003b48:	5ccb      	ldrb	r3, [r1, r3]
 8003b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4e:	4a09      	ldr	r2, [pc, #36]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b52:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fd fb62 	bl	8001220 <HAL_InitTick>

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023c00 	.word	0x40023c00
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	080051e4 	.word	0x080051e4
 8003b74:	20000000 	.word	0x20000000
 8003b78:	20000004 	.word	0x20000004

08003b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b80:	b090      	sub	sp, #64	; 0x40
 8003b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	637b      	str	r3, [r7, #52]	; 0x34
 8003b88:	2300      	movs	r3, #0
 8003b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b94:	4b59      	ldr	r3, [pc, #356]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 030c 	and.w	r3, r3, #12
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d00d      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x40>
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	f200 80a1 	bhi.w	8003ce8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d003      	beq.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bae:	e09b      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bb0:	4b53      	ldr	r3, [pc, #332]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bb2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003bb4:	e09b      	b.n	8003cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bb6:	4b53      	ldr	r3, [pc, #332]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bba:	e098      	b.n	8003cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bbc:	4b4f      	ldr	r3, [pc, #316]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bc4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bc6:	4b4d      	ldr	r3, [pc, #308]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d028      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd2:	4b4a      	ldr	r3, [pc, #296]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	099b      	lsrs	r3, r3, #6
 8003bd8:	2200      	movs	r2, #0
 8003bda:	623b      	str	r3, [r7, #32]
 8003bdc:	627a      	str	r2, [r7, #36]	; 0x24
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003be4:	2100      	movs	r1, #0
 8003be6:	4b47      	ldr	r3, [pc, #284]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8003be8:	fb03 f201 	mul.w	r2, r3, r1
 8003bec:	2300      	movs	r3, #0
 8003bee:	fb00 f303 	mul.w	r3, r0, r3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	4a43      	ldr	r2, [pc, #268]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bf6:	fba0 1202 	umull	r1, r2, r0, r2
 8003bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bfc:	460a      	mov	r2, r1
 8003bfe:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c02:	4413      	add	r3, r2
 8003c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c08:	2200      	movs	r2, #0
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	61fa      	str	r2, [r7, #28]
 8003c0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c16:	f7fc fadf 	bl	80001d8 <__aeabi_uldivmod>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4613      	mov	r3, r2
 8003c20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c22:	e053      	b.n	8003ccc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c24:	4b35      	ldr	r3, [pc, #212]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	099b      	lsrs	r3, r3, #6
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	617a      	str	r2, [r7, #20]
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c36:	f04f 0b00 	mov.w	fp, #0
 8003c3a:	4652      	mov	r2, sl
 8003c3c:	465b      	mov	r3, fp
 8003c3e:	f04f 0000 	mov.w	r0, #0
 8003c42:	f04f 0100 	mov.w	r1, #0
 8003c46:	0159      	lsls	r1, r3, #5
 8003c48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c4c:	0150      	lsls	r0, r2, #5
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	ebb2 080a 	subs.w	r8, r2, sl
 8003c56:	eb63 090b 	sbc.w	r9, r3, fp
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c6e:	ebb2 0408 	subs.w	r4, r2, r8
 8003c72:	eb63 0509 	sbc.w	r5, r3, r9
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	00eb      	lsls	r3, r5, #3
 8003c80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c84:	00e2      	lsls	r2, r4, #3
 8003c86:	4614      	mov	r4, r2
 8003c88:	461d      	mov	r5, r3
 8003c8a:	eb14 030a 	adds.w	r3, r4, sl
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	eb45 030b 	adc.w	r3, r5, fp
 8003c94:	607b      	str	r3, [r7, #4]
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ca2:	4629      	mov	r1, r5
 8003ca4:	028b      	lsls	r3, r1, #10
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cac:	4621      	mov	r1, r4
 8003cae:	028a      	lsls	r2, r1, #10
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	60fa      	str	r2, [r7, #12]
 8003cbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cc0:	f7fc fa8a 	bl	80001d8 <__aeabi_uldivmod>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4613      	mov	r3, r2
 8003cca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ccc:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	0c1b      	lsrs	r3, r3, #16
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003cdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ce6:	e002      	b.n	8003cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ce8:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3740      	adds	r7, #64	; 0x40
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	00f42400 	.word	0x00f42400
 8003d04:	017d7840 	.word	0x017d7840

08003d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d0c:	4b03      	ldr	r3, [pc, #12]	; (8003d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20000000 	.word	0x20000000

08003d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d24:	f7ff fff0 	bl	8003d08 <HAL_RCC_GetHCLKFreq>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	0a9b      	lsrs	r3, r3, #10
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	4903      	ldr	r1, [pc, #12]	; (8003d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d36:	5ccb      	ldrb	r3, [r1, r3]
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40023800 	.word	0x40023800
 8003d44:	080051f4 	.word	0x080051f4

08003d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d4c:	f7ff ffdc 	bl	8003d08 <HAL_RCC_GetHCLKFreq>
 8003d50:	4602      	mov	r2, r0
 8003d52:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	0b5b      	lsrs	r3, r3, #13
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	4903      	ldr	r1, [pc, #12]	; (8003d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d5e:	5ccb      	ldrb	r3, [r1, r3]
 8003d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	080051f4 	.word	0x080051f4

08003d70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e07b      	b.n	8003e7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d108      	bne.n	8003d9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d92:	d009      	beq.n	8003da8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	61da      	str	r2, [r3, #28]
 8003d9a:	e005      	b.n	8003da8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fd f80e 	bl	8000de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2c:	ea42 0103 	orr.w	r1, r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	0c1b      	lsrs	r3, r3, #16
 8003e46:	f003 0104 	and.w	r1, r3, #4
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	f003 0210 	and.w	r2, r3, #16
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	099b      	lsrs	r3, r3, #6
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10f      	bne.n	8003ec8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	099b      	lsrs	r3, r3, #6
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d004      	beq.n	8003ec8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	4798      	blx	r3
    return;
 8003ec6:	e0d7      	b.n	8004078 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <HAL_SPI_IRQHandler+0x66>
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	09db      	lsrs	r3, r3, #7
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d004      	beq.n	8003eea <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	4798      	blx	r3
    return;
 8003ee8:	e0c6      	b.n	8004078 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10c      	bne.n	8003f10 <HAL_SPI_IRQHandler+0x8c>
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	099b      	lsrs	r3, r3, #6
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	0a1b      	lsrs	r3, r3, #8
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 80b4 	beq.w	8004078 <HAL_SPI_IRQHandler+0x1f4>
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 80ad 	beq.w	8004078 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	099b      	lsrs	r3, r3, #6
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d023      	beq.n	8003f72 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	d011      	beq.n	8003f5a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3a:	f043 0204 	orr.w	r2, r3, #4
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	e00b      	b.n	8003f72 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	613b      	str	r3, [r7, #16]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	693b      	ldr	r3, [r7, #16]
        return;
 8003f70:	e082      	b.n	8004078 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	095b      	lsrs	r3, r3, #5
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d014      	beq.n	8003fa8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	f043 0201 	orr.w	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	0a1b      	lsrs	r3, r3, #8
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00c      	beq.n	8003fce <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb8:	f043 0208 	orr.w	r2, r3, #8
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60bb      	str	r3, [r7, #8]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d04f      	beq.n	8004076 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fe4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d104      	bne.n	8004002 <HAL_SPI_IRQHandler+0x17e>
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d034      	beq.n	800406c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0203 	bic.w	r2, r2, #3
 8004010:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d011      	beq.n	800403e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401e:	4a18      	ldr	r2, [pc, #96]	; (8004080 <HAL_SPI_IRQHandler+0x1fc>)
 8004020:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004026:	4618      	mov	r0, r3
 8004028:	f7fd fa5b 	bl	80014e2 <HAL_DMA_Abort_IT>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004036:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004042:	2b00      	cmp	r3, #0
 8004044:	d016      	beq.n	8004074 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404a:	4a0d      	ldr	r2, [pc, #52]	; (8004080 <HAL_SPI_IRQHandler+0x1fc>)
 800404c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004052:	4618      	mov	r0, r3
 8004054:	f7fd fa45 	bl	80014e2 <HAL_DMA_Abort_IT>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004062:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800406a:	e003      	b.n	8004074 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f809 	bl	8004084 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004072:	e000      	b.n	8004076 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004074:	bf00      	nop
    return;
 8004076:	bf00      	nop
  }
}
 8004078:	3720      	adds	r7, #32
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	08004099 	.word	0x08004099

08004084 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f7ff ffe6 	bl	8004084 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040b8:	bf00      	nop
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e041      	b.n	8004156 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fc feec 	bl	8000ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3304      	adds	r3, #4
 80040fc:	4619      	mov	r1, r3
 80040fe:	4610      	mov	r0, r2
 8004100:	f000 fa10 	bl	8004524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e041      	b.n	80041f4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d106      	bne.n	800418a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f839 	bl	80041fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2202      	movs	r2, #2
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3304      	adds	r3, #4
 800419a:	4619      	mov	r1, r3
 800419c:	4610      	mov	r0, r2
 800419e:	f000 f9c1 	bl	8004524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800422a:	2302      	movs	r3, #2
 800422c:	e0ae      	b.n	800438c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b0c      	cmp	r3, #12
 800423a:	f200 809f 	bhi.w	800437c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800423e:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004244:	08004279 	.word	0x08004279
 8004248:	0800437d 	.word	0x0800437d
 800424c:	0800437d 	.word	0x0800437d
 8004250:	0800437d 	.word	0x0800437d
 8004254:	080042b9 	.word	0x080042b9
 8004258:	0800437d 	.word	0x0800437d
 800425c:	0800437d 	.word	0x0800437d
 8004260:	0800437d 	.word	0x0800437d
 8004264:	080042fb 	.word	0x080042fb
 8004268:	0800437d 	.word	0x0800437d
 800426c:	0800437d 	.word	0x0800437d
 8004270:	0800437d 	.word	0x0800437d
 8004274:	0800433b 	.word	0x0800433b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	4618      	mov	r0, r3
 8004280:	f000 f9d0 	bl	8004624 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0208 	orr.w	r2, r2, #8
 8004292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699a      	ldr	r2, [r3, #24]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0204 	bic.w	r2, r2, #4
 80042a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6999      	ldr	r1, [r3, #24]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	619a      	str	r2, [r3, #24]
      break;
 80042b6:	e064      	b.n	8004382 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68b9      	ldr	r1, [r7, #8]
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fa16 	bl	80046f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699a      	ldr	r2, [r3, #24]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699a      	ldr	r2, [r3, #24]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6999      	ldr	r1, [r3, #24]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	021a      	lsls	r2, r3, #8
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	619a      	str	r2, [r3, #24]
      break;
 80042f8:	e043      	b.n	8004382 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68b9      	ldr	r1, [r7, #8]
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fa61 	bl	80047c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69da      	ldr	r2, [r3, #28]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f042 0208 	orr.w	r2, r2, #8
 8004314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69da      	ldr	r2, [r3, #28]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0204 	bic.w	r2, r2, #4
 8004324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69d9      	ldr	r1, [r3, #28]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	61da      	str	r2, [r3, #28]
      break;
 8004338:	e023      	b.n	8004382 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68b9      	ldr	r1, [r7, #8]
 8004340:	4618      	mov	r0, r3
 8004342:	f000 faab 	bl	800489c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69da      	ldr	r2, [r3, #28]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	69da      	ldr	r2, [r3, #28]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69d9      	ldr	r1, [r3, #28]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	021a      	lsls	r2, r3, #8
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	61da      	str	r2, [r3, #28]
      break;
 800437a:	e002      	b.n	8004382 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	75fb      	strb	r3, [r7, #23]
      break;
 8004380:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800438a:	7dfb      	ldrb	r3, [r7, #23]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_TIM_ConfigClockSource+0x1c>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e0b4      	b.n	800451a <HAL_TIM_ConfigClockSource+0x186>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e8:	d03e      	beq.n	8004468 <HAL_TIM_ConfigClockSource+0xd4>
 80043ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ee:	f200 8087 	bhi.w	8004500 <HAL_TIM_ConfigClockSource+0x16c>
 80043f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f6:	f000 8086 	beq.w	8004506 <HAL_TIM_ConfigClockSource+0x172>
 80043fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043fe:	d87f      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x16c>
 8004400:	2b70      	cmp	r3, #112	; 0x70
 8004402:	d01a      	beq.n	800443a <HAL_TIM_ConfigClockSource+0xa6>
 8004404:	2b70      	cmp	r3, #112	; 0x70
 8004406:	d87b      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x16c>
 8004408:	2b60      	cmp	r3, #96	; 0x60
 800440a:	d050      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x11a>
 800440c:	2b60      	cmp	r3, #96	; 0x60
 800440e:	d877      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x16c>
 8004410:	2b50      	cmp	r3, #80	; 0x50
 8004412:	d03c      	beq.n	800448e <HAL_TIM_ConfigClockSource+0xfa>
 8004414:	2b50      	cmp	r3, #80	; 0x50
 8004416:	d873      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x16c>
 8004418:	2b40      	cmp	r3, #64	; 0x40
 800441a:	d058      	beq.n	80044ce <HAL_TIM_ConfigClockSource+0x13a>
 800441c:	2b40      	cmp	r3, #64	; 0x40
 800441e:	d86f      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x16c>
 8004420:	2b30      	cmp	r3, #48	; 0x30
 8004422:	d064      	beq.n	80044ee <HAL_TIM_ConfigClockSource+0x15a>
 8004424:	2b30      	cmp	r3, #48	; 0x30
 8004426:	d86b      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x16c>
 8004428:	2b20      	cmp	r3, #32
 800442a:	d060      	beq.n	80044ee <HAL_TIM_ConfigClockSource+0x15a>
 800442c:	2b20      	cmp	r3, #32
 800442e:	d867      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x16c>
 8004430:	2b00      	cmp	r3, #0
 8004432:	d05c      	beq.n	80044ee <HAL_TIM_ConfigClockSource+0x15a>
 8004434:	2b10      	cmp	r3, #16
 8004436:	d05a      	beq.n	80044ee <HAL_TIM_ConfigClockSource+0x15a>
 8004438:	e062      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6899      	ldr	r1, [r3, #8]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f000 faf1 	bl	8004a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800445c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	609a      	str	r2, [r3, #8]
      break;
 8004466:	e04f      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6818      	ldr	r0, [r3, #0]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	6899      	ldr	r1, [r3, #8]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f000 fada 	bl	8004a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800448a:	609a      	str	r2, [r3, #8]
      break;
 800448c:	e03c      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	6859      	ldr	r1, [r3, #4]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	461a      	mov	r2, r3
 800449c:	f000 fa4e 	bl	800493c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2150      	movs	r1, #80	; 0x50
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 faa7 	bl	80049fa <TIM_ITRx_SetConfig>
      break;
 80044ac:	e02c      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	6859      	ldr	r1, [r3, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	461a      	mov	r2, r3
 80044bc:	f000 fa6d 	bl	800499a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2160      	movs	r1, #96	; 0x60
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fa97 	bl	80049fa <TIM_ITRx_SetConfig>
      break;
 80044cc:	e01c      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	6859      	ldr	r1, [r3, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	461a      	mov	r2, r3
 80044dc:	f000 fa2e 	bl	800493c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2140      	movs	r1, #64	; 0x40
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fa87 	bl	80049fa <TIM_ITRx_SetConfig>
      break;
 80044ec:	e00c      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4619      	mov	r1, r3
 80044f8:	4610      	mov	r0, r2
 80044fa:	f000 fa7e 	bl	80049fa <TIM_ITRx_SetConfig>
      break;
 80044fe:	e003      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	73fb      	strb	r3, [r7, #15]
      break;
 8004504:	e000      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004506:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004518:	7bfb      	ldrb	r3, [r7, #15]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
	...

08004524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a34      	ldr	r2, [pc, #208]	; (8004608 <TIM_Base_SetConfig+0xe4>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00f      	beq.n	800455c <TIM_Base_SetConfig+0x38>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004542:	d00b      	beq.n	800455c <TIM_Base_SetConfig+0x38>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a31      	ldr	r2, [pc, #196]	; (800460c <TIM_Base_SetConfig+0xe8>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d007      	beq.n	800455c <TIM_Base_SetConfig+0x38>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a30      	ldr	r2, [pc, #192]	; (8004610 <TIM_Base_SetConfig+0xec>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d003      	beq.n	800455c <TIM_Base_SetConfig+0x38>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a2f      	ldr	r2, [pc, #188]	; (8004614 <TIM_Base_SetConfig+0xf0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d108      	bne.n	800456e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a25      	ldr	r2, [pc, #148]	; (8004608 <TIM_Base_SetConfig+0xe4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d01b      	beq.n	80045ae <TIM_Base_SetConfig+0x8a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457c:	d017      	beq.n	80045ae <TIM_Base_SetConfig+0x8a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a22      	ldr	r2, [pc, #136]	; (800460c <TIM_Base_SetConfig+0xe8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d013      	beq.n	80045ae <TIM_Base_SetConfig+0x8a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a21      	ldr	r2, [pc, #132]	; (8004610 <TIM_Base_SetConfig+0xec>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00f      	beq.n	80045ae <TIM_Base_SetConfig+0x8a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a20      	ldr	r2, [pc, #128]	; (8004614 <TIM_Base_SetConfig+0xf0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00b      	beq.n	80045ae <TIM_Base_SetConfig+0x8a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a1f      	ldr	r2, [pc, #124]	; (8004618 <TIM_Base_SetConfig+0xf4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d007      	beq.n	80045ae <TIM_Base_SetConfig+0x8a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a1e      	ldr	r2, [pc, #120]	; (800461c <TIM_Base_SetConfig+0xf8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d003      	beq.n	80045ae <TIM_Base_SetConfig+0x8a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a1d      	ldr	r2, [pc, #116]	; (8004620 <TIM_Base_SetConfig+0xfc>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d108      	bne.n	80045c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a08      	ldr	r2, [pc, #32]	; (8004608 <TIM_Base_SetConfig+0xe4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d103      	bne.n	80045f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	615a      	str	r2, [r3, #20]
}
 80045fa:	bf00      	nop
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40010000 	.word	0x40010000
 800460c:	40000400 	.word	0x40000400
 8004610:	40000800 	.word	0x40000800
 8004614:	40000c00 	.word	0x40000c00
 8004618:	40014000 	.word	0x40014000
 800461c:	40014400 	.word	0x40014400
 8004620:	40014800 	.word	0x40014800

08004624 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	f023 0201 	bic.w	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0303 	bic.w	r3, r3, #3
 800465a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f023 0302 	bic.w	r3, r3, #2
 800466c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a1c      	ldr	r2, [pc, #112]	; (80046ec <TIM_OC1_SetConfig+0xc8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d10c      	bne.n	800469a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f023 0308 	bic.w	r3, r3, #8
 8004686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	4313      	orrs	r3, r2
 8004690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f023 0304 	bic.w	r3, r3, #4
 8004698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a13      	ldr	r2, [pc, #76]	; (80046ec <TIM_OC1_SetConfig+0xc8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d111      	bne.n	80046c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	621a      	str	r2, [r3, #32]
}
 80046e0:	bf00      	nop
 80046e2:	371c      	adds	r7, #28
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	40010000 	.word	0x40010000

080046f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	f023 0210 	bic.w	r2, r3, #16
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800471e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	021b      	lsls	r3, r3, #8
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f023 0320 	bic.w	r3, r3, #32
 800473a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	4313      	orrs	r3, r2
 8004746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a1e      	ldr	r2, [pc, #120]	; (80047c4 <TIM_OC2_SetConfig+0xd4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d10d      	bne.n	800476c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4313      	orrs	r3, r2
 8004762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800476a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a15      	ldr	r2, [pc, #84]	; (80047c4 <TIM_OC2_SetConfig+0xd4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d113      	bne.n	800479c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800477a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004782:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	621a      	str	r2, [r3, #32]
}
 80047b6:	bf00      	nop
 80047b8:	371c      	adds	r7, #28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40010000 	.word	0x40010000

080047c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 0303 	bic.w	r3, r3, #3
 80047fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	021b      	lsls	r3, r3, #8
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a1d      	ldr	r2, [pc, #116]	; (8004898 <TIM_OC3_SetConfig+0xd0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d10d      	bne.n	8004842 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800482c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	021b      	lsls	r3, r3, #8
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a14      	ldr	r2, [pc, #80]	; (8004898 <TIM_OC3_SetConfig+0xd0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d113      	bne.n	8004872 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	621a      	str	r2, [r3, #32]
}
 800488c:	bf00      	nop
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	40010000 	.word	0x40010000

0800489c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	031b      	lsls	r3, r3, #12
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a10      	ldr	r2, [pc, #64]	; (8004938 <TIM_OC4_SetConfig+0x9c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d109      	bne.n	8004910 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004902:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	019b      	lsls	r3, r3, #6
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	621a      	str	r2, [r3, #32]
}
 800492a:	bf00      	nop
 800492c:	371c      	adds	r7, #28
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40010000 	.word	0x40010000

0800493c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	f023 0201 	bic.w	r2, r3, #1
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	4313      	orrs	r3, r2
 8004970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f023 030a 	bic.w	r3, r3, #10
 8004978:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	4313      	orrs	r3, r2
 8004980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	621a      	str	r2, [r3, #32]
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800499a:	b480      	push	{r7}
 800499c:	b087      	sub	sp, #28
 800499e:	af00      	add	r7, sp, #0
 80049a0:	60f8      	str	r0, [r7, #12]
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f023 0210 	bic.w	r2, r3, #16
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	031b      	lsls	r3, r3, #12
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	4313      	orrs	r3, r2
 80049e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	621a      	str	r2, [r3, #32]
}
 80049ee:	bf00      	nop
 80049f0:	371c      	adds	r7, #28
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b085      	sub	sp, #20
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f043 0307 	orr.w	r3, r3, #7
 8004a1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	609a      	str	r2, [r3, #8]
}
 8004a24:	bf00      	nop
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	021a      	lsls	r2, r3, #8
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	431a      	orrs	r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	609a      	str	r2, [r3, #8]
}
 8004a64:	bf00      	nop
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e050      	b.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a1c      	ldr	r2, [pc, #112]	; (8004b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d018      	beq.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad4:	d013      	beq.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a18      	ldr	r2, [pc, #96]	; (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00e      	beq.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a16      	ldr	r2, [pc, #88]	; (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d009      	beq.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a15      	ldr	r2, [pc, #84]	; (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d004      	beq.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a13      	ldr	r2, [pc, #76]	; (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d10c      	bne.n	8004b18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40010000 	.word	0x40010000
 8004b3c:	40000400 	.word	0x40000400
 8004b40:	40000800 	.word	0x40000800
 8004b44:	40000c00 	.word	0x40000c00
 8004b48:	40014000 	.word	0x40014000

08004b4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e03d      	b.n	8004be4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e03f      	b.n	8004c82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d106      	bne.n	8004c1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fc fa00 	bl	800101c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2224      	movs	r2, #36	; 0x24
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f829 	bl	8004c8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	691a      	ldr	r2, [r3, #16]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695a      	ldr	r2, [r3, #20]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c90:	b0c0      	sub	sp, #256	; 0x100
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca8:	68d9      	ldr	r1, [r3, #12]
 8004caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	ea40 0301 	orr.w	r3, r0, r1
 8004cb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ce4:	f021 010c 	bic.w	r1, r1, #12
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004cf2:	430b      	orrs	r3, r1
 8004cf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d06:	6999      	ldr	r1, [r3, #24]
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	ea40 0301 	orr.w	r3, r0, r1
 8004d12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	4b8f      	ldr	r3, [pc, #572]	; (8004f58 <UART_SetConfig+0x2cc>)
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d005      	beq.n	8004d2c <UART_SetConfig+0xa0>
 8004d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	4b8d      	ldr	r3, [pc, #564]	; (8004f5c <UART_SetConfig+0x2d0>)
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d104      	bne.n	8004d36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d2c:	f7ff f80c 	bl	8003d48 <HAL_RCC_GetPCLK2Freq>
 8004d30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d34:	e003      	b.n	8004d3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d36:	f7fe fff3 	bl	8003d20 <HAL_RCC_GetPCLK1Freq>
 8004d3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d48:	f040 810c 	bne.w	8004f64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d50:	2200      	movs	r2, #0
 8004d52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d5e:	4622      	mov	r2, r4
 8004d60:	462b      	mov	r3, r5
 8004d62:	1891      	adds	r1, r2, r2
 8004d64:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d66:	415b      	adcs	r3, r3
 8004d68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d6e:	4621      	mov	r1, r4
 8004d70:	eb12 0801 	adds.w	r8, r2, r1
 8004d74:	4629      	mov	r1, r5
 8004d76:	eb43 0901 	adc.w	r9, r3, r1
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d8e:	4690      	mov	r8, r2
 8004d90:	4699      	mov	r9, r3
 8004d92:	4623      	mov	r3, r4
 8004d94:	eb18 0303 	adds.w	r3, r8, r3
 8004d98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d9c:	462b      	mov	r3, r5
 8004d9e:	eb49 0303 	adc.w	r3, r9, r3
 8004da2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004db2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004db6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dba:	460b      	mov	r3, r1
 8004dbc:	18db      	adds	r3, r3, r3
 8004dbe:	653b      	str	r3, [r7, #80]	; 0x50
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	eb42 0303 	adc.w	r3, r2, r3
 8004dc6:	657b      	str	r3, [r7, #84]	; 0x54
 8004dc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004dcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004dd0:	f7fb fa02 	bl	80001d8 <__aeabi_uldivmod>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4b61      	ldr	r3, [pc, #388]	; (8004f60 <UART_SetConfig+0x2d4>)
 8004dda:	fba3 2302 	umull	r2, r3, r3, r2
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	011c      	lsls	r4, r3, #4
 8004de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004dec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004df0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004df4:	4642      	mov	r2, r8
 8004df6:	464b      	mov	r3, r9
 8004df8:	1891      	adds	r1, r2, r2
 8004dfa:	64b9      	str	r1, [r7, #72]	; 0x48
 8004dfc:	415b      	adcs	r3, r3
 8004dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e04:	4641      	mov	r1, r8
 8004e06:	eb12 0a01 	adds.w	sl, r2, r1
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e24:	4692      	mov	sl, r2
 8004e26:	469b      	mov	fp, r3
 8004e28:	4643      	mov	r3, r8
 8004e2a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e32:	464b      	mov	r3, r9
 8004e34:	eb4b 0303 	adc.w	r3, fp, r3
 8004e38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e50:	460b      	mov	r3, r1
 8004e52:	18db      	adds	r3, r3, r3
 8004e54:	643b      	str	r3, [r7, #64]	; 0x40
 8004e56:	4613      	mov	r3, r2
 8004e58:	eb42 0303 	adc.w	r3, r2, r3
 8004e5c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e66:	f7fb f9b7 	bl	80001d8 <__aeabi_uldivmod>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4611      	mov	r1, r2
 8004e70:	4b3b      	ldr	r3, [pc, #236]	; (8004f60 <UART_SetConfig+0x2d4>)
 8004e72:	fba3 2301 	umull	r2, r3, r3, r1
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	2264      	movs	r2, #100	; 0x64
 8004e7a:	fb02 f303 	mul.w	r3, r2, r3
 8004e7e:	1acb      	subs	r3, r1, r3
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e86:	4b36      	ldr	r3, [pc, #216]	; (8004f60 <UART_SetConfig+0x2d4>)
 8004e88:	fba3 2302 	umull	r2, r3, r3, r2
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e94:	441c      	add	r4, r3
 8004e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ea0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ea4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ea8:	4642      	mov	r2, r8
 8004eaa:	464b      	mov	r3, r9
 8004eac:	1891      	adds	r1, r2, r2
 8004eae:	63b9      	str	r1, [r7, #56]	; 0x38
 8004eb0:	415b      	adcs	r3, r3
 8004eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004eb8:	4641      	mov	r1, r8
 8004eba:	1851      	adds	r1, r2, r1
 8004ebc:	6339      	str	r1, [r7, #48]	; 0x30
 8004ebe:	4649      	mov	r1, r9
 8004ec0:	414b      	adcs	r3, r1
 8004ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	f04f 0300 	mov.w	r3, #0
 8004ecc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ed0:	4659      	mov	r1, fp
 8004ed2:	00cb      	lsls	r3, r1, #3
 8004ed4:	4651      	mov	r1, sl
 8004ed6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eda:	4651      	mov	r1, sl
 8004edc:	00ca      	lsls	r2, r1, #3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	4642      	mov	r2, r8
 8004ee6:	189b      	adds	r3, r3, r2
 8004ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004eec:	464b      	mov	r3, r9
 8004eee:	460a      	mov	r2, r1
 8004ef0:	eb42 0303 	adc.w	r3, r2, r3
 8004ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	18db      	adds	r3, r3, r3
 8004f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f12:	4613      	mov	r3, r2
 8004f14:	eb42 0303 	adc.w	r3, r2, r3
 8004f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f22:	f7fb f959 	bl	80001d8 <__aeabi_uldivmod>
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4b0d      	ldr	r3, [pc, #52]	; (8004f60 <UART_SetConfig+0x2d4>)
 8004f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f30:	095b      	lsrs	r3, r3, #5
 8004f32:	2164      	movs	r1, #100	; 0x64
 8004f34:	fb01 f303 	mul.w	r3, r1, r3
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	3332      	adds	r3, #50	; 0x32
 8004f3e:	4a08      	ldr	r2, [pc, #32]	; (8004f60 <UART_SetConfig+0x2d4>)
 8004f40:	fba2 2303 	umull	r2, r3, r2, r3
 8004f44:	095b      	lsrs	r3, r3, #5
 8004f46:	f003 0207 	and.w	r2, r3, #7
 8004f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4422      	add	r2, r4
 8004f52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f54:	e105      	b.n	8005162 <UART_SetConfig+0x4d6>
 8004f56:	bf00      	nop
 8004f58:	40011000 	.word	0x40011000
 8004f5c:	40011400 	.word	0x40011400
 8004f60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f76:	4642      	mov	r2, r8
 8004f78:	464b      	mov	r3, r9
 8004f7a:	1891      	adds	r1, r2, r2
 8004f7c:	6239      	str	r1, [r7, #32]
 8004f7e:	415b      	adcs	r3, r3
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
 8004f82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f86:	4641      	mov	r1, r8
 8004f88:	1854      	adds	r4, r2, r1
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	eb43 0501 	adc.w	r5, r3, r1
 8004f90:	f04f 0200 	mov.w	r2, #0
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	00eb      	lsls	r3, r5, #3
 8004f9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f9e:	00e2      	lsls	r2, r4, #3
 8004fa0:	4614      	mov	r4, r2
 8004fa2:	461d      	mov	r5, r3
 8004fa4:	4643      	mov	r3, r8
 8004fa6:	18e3      	adds	r3, r4, r3
 8004fa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fac:	464b      	mov	r3, r9
 8004fae:	eb45 0303 	adc.w	r3, r5, r3
 8004fb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	008b      	lsls	r3, r1, #2
 8004fd6:	4621      	mov	r1, r4
 8004fd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fdc:	4621      	mov	r1, r4
 8004fde:	008a      	lsls	r2, r1, #2
 8004fe0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004fe4:	f7fb f8f8 	bl	80001d8 <__aeabi_uldivmod>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4b60      	ldr	r3, [pc, #384]	; (8005170 <UART_SetConfig+0x4e4>)
 8004fee:	fba3 2302 	umull	r2, r3, r3, r2
 8004ff2:	095b      	lsrs	r3, r3, #5
 8004ff4:	011c      	lsls	r4, r3, #4
 8004ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005000:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005004:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005008:	4642      	mov	r2, r8
 800500a:	464b      	mov	r3, r9
 800500c:	1891      	adds	r1, r2, r2
 800500e:	61b9      	str	r1, [r7, #24]
 8005010:	415b      	adcs	r3, r3
 8005012:	61fb      	str	r3, [r7, #28]
 8005014:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005018:	4641      	mov	r1, r8
 800501a:	1851      	adds	r1, r2, r1
 800501c:	6139      	str	r1, [r7, #16]
 800501e:	4649      	mov	r1, r9
 8005020:	414b      	adcs	r3, r1
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005030:	4659      	mov	r1, fp
 8005032:	00cb      	lsls	r3, r1, #3
 8005034:	4651      	mov	r1, sl
 8005036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800503a:	4651      	mov	r1, sl
 800503c:	00ca      	lsls	r2, r1, #3
 800503e:	4610      	mov	r0, r2
 8005040:	4619      	mov	r1, r3
 8005042:	4603      	mov	r3, r0
 8005044:	4642      	mov	r2, r8
 8005046:	189b      	adds	r3, r3, r2
 8005048:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800504c:	464b      	mov	r3, r9
 800504e:	460a      	mov	r2, r1
 8005050:	eb42 0303 	adc.w	r3, r2, r3
 8005054:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	67bb      	str	r3, [r7, #120]	; 0x78
 8005062:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005070:	4649      	mov	r1, r9
 8005072:	008b      	lsls	r3, r1, #2
 8005074:	4641      	mov	r1, r8
 8005076:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800507a:	4641      	mov	r1, r8
 800507c:	008a      	lsls	r2, r1, #2
 800507e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005082:	f7fb f8a9 	bl	80001d8 <__aeabi_uldivmod>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4b39      	ldr	r3, [pc, #228]	; (8005170 <UART_SetConfig+0x4e4>)
 800508c:	fba3 1302 	umull	r1, r3, r3, r2
 8005090:	095b      	lsrs	r3, r3, #5
 8005092:	2164      	movs	r1, #100	; 0x64
 8005094:	fb01 f303 	mul.w	r3, r1, r3
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	3332      	adds	r3, #50	; 0x32
 800509e:	4a34      	ldr	r2, [pc, #208]	; (8005170 <UART_SetConfig+0x4e4>)
 80050a0:	fba2 2303 	umull	r2, r3, r2, r3
 80050a4:	095b      	lsrs	r3, r3, #5
 80050a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050aa:	441c      	add	r4, r3
 80050ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050b0:	2200      	movs	r2, #0
 80050b2:	673b      	str	r3, [r7, #112]	; 0x70
 80050b4:	677a      	str	r2, [r7, #116]	; 0x74
 80050b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050ba:	4642      	mov	r2, r8
 80050bc:	464b      	mov	r3, r9
 80050be:	1891      	adds	r1, r2, r2
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	415b      	adcs	r3, r3
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050ca:	4641      	mov	r1, r8
 80050cc:	1851      	adds	r1, r2, r1
 80050ce:	6039      	str	r1, [r7, #0]
 80050d0:	4649      	mov	r1, r9
 80050d2:	414b      	adcs	r3, r1
 80050d4:	607b      	str	r3, [r7, #4]
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	f04f 0300 	mov.w	r3, #0
 80050de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050e2:	4659      	mov	r1, fp
 80050e4:	00cb      	lsls	r3, r1, #3
 80050e6:	4651      	mov	r1, sl
 80050e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ec:	4651      	mov	r1, sl
 80050ee:	00ca      	lsls	r2, r1, #3
 80050f0:	4610      	mov	r0, r2
 80050f2:	4619      	mov	r1, r3
 80050f4:	4603      	mov	r3, r0
 80050f6:	4642      	mov	r2, r8
 80050f8:	189b      	adds	r3, r3, r2
 80050fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80050fc:	464b      	mov	r3, r9
 80050fe:	460a      	mov	r2, r1
 8005100:	eb42 0303 	adc.w	r3, r2, r3
 8005104:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	663b      	str	r3, [r7, #96]	; 0x60
 8005110:	667a      	str	r2, [r7, #100]	; 0x64
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	f04f 0300 	mov.w	r3, #0
 800511a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800511e:	4649      	mov	r1, r9
 8005120:	008b      	lsls	r3, r1, #2
 8005122:	4641      	mov	r1, r8
 8005124:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005128:	4641      	mov	r1, r8
 800512a:	008a      	lsls	r2, r1, #2
 800512c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005130:	f7fb f852 	bl	80001d8 <__aeabi_uldivmod>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4b0d      	ldr	r3, [pc, #52]	; (8005170 <UART_SetConfig+0x4e4>)
 800513a:	fba3 1302 	umull	r1, r3, r3, r2
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	2164      	movs	r1, #100	; 0x64
 8005142:	fb01 f303 	mul.w	r3, r1, r3
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	3332      	adds	r3, #50	; 0x32
 800514c:	4a08      	ldr	r2, [pc, #32]	; (8005170 <UART_SetConfig+0x4e4>)
 800514e:	fba2 2303 	umull	r2, r3, r2, r3
 8005152:	095b      	lsrs	r3, r3, #5
 8005154:	f003 020f 	and.w	r2, r3, #15
 8005158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4422      	add	r2, r4
 8005160:	609a      	str	r2, [r3, #8]
}
 8005162:	bf00      	nop
 8005164:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005168:	46bd      	mov	sp, r7
 800516a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800516e:	bf00      	nop
 8005170:	51eb851f 	.word	0x51eb851f

08005174 <__libc_init_array>:
 8005174:	b570      	push	{r4, r5, r6, lr}
 8005176:	4d0d      	ldr	r5, [pc, #52]	; (80051ac <__libc_init_array+0x38>)
 8005178:	4c0d      	ldr	r4, [pc, #52]	; (80051b0 <__libc_init_array+0x3c>)
 800517a:	1b64      	subs	r4, r4, r5
 800517c:	10a4      	asrs	r4, r4, #2
 800517e:	2600      	movs	r6, #0
 8005180:	42a6      	cmp	r6, r4
 8005182:	d109      	bne.n	8005198 <__libc_init_array+0x24>
 8005184:	4d0b      	ldr	r5, [pc, #44]	; (80051b4 <__libc_init_array+0x40>)
 8005186:	4c0c      	ldr	r4, [pc, #48]	; (80051b8 <__libc_init_array+0x44>)
 8005188:	f000 f820 	bl	80051cc <_init>
 800518c:	1b64      	subs	r4, r4, r5
 800518e:	10a4      	asrs	r4, r4, #2
 8005190:	2600      	movs	r6, #0
 8005192:	42a6      	cmp	r6, r4
 8005194:	d105      	bne.n	80051a2 <__libc_init_array+0x2e>
 8005196:	bd70      	pop	{r4, r5, r6, pc}
 8005198:	f855 3b04 	ldr.w	r3, [r5], #4
 800519c:	4798      	blx	r3
 800519e:	3601      	adds	r6, #1
 80051a0:	e7ee      	b.n	8005180 <__libc_init_array+0xc>
 80051a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80051a6:	4798      	blx	r3
 80051a8:	3601      	adds	r6, #1
 80051aa:	e7f2      	b.n	8005192 <__libc_init_array+0x1e>
 80051ac:	08005204 	.word	0x08005204
 80051b0:	08005204 	.word	0x08005204
 80051b4:	08005204 	.word	0x08005204
 80051b8:	08005208 	.word	0x08005208

080051bc <memset>:
 80051bc:	4402      	add	r2, r0
 80051be:	4603      	mov	r3, r0
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d100      	bne.n	80051c6 <memset+0xa>
 80051c4:	4770      	bx	lr
 80051c6:	f803 1b01 	strb.w	r1, [r3], #1
 80051ca:	e7f9      	b.n	80051c0 <memset+0x4>

080051cc <_init>:
 80051cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ce:	bf00      	nop
 80051d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d2:	bc08      	pop	{r3}
 80051d4:	469e      	mov	lr, r3
 80051d6:	4770      	bx	lr

080051d8 <_fini>:
 80051d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051da:	bf00      	nop
 80051dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051de:	bc08      	pop	{r3}
 80051e0:	469e      	mov	lr, r3
 80051e2:	4770      	bx	lr
