/*
 * FOCMotor.cpp
 *
 *  Created on: Jan 10, 2024
 *      Author: putte
 */

 #include "FOCMotor.h"

 FOCMotor::FOCMotor()
 {
   // maximum angular velocity to be used for positioning
   velocity_limit = DEF_VEL_LIM;
   // maximum voltage to be set to the motor
   voltage_limit = DEF_POWER_SUPPLY;
   // not set on the begining
   current_limit = DEF_CURRENT_LIM;

   // index search velocity
   velocity_index_search = DEF_INDEX_SEARCH_TARGET_VELOCITY;
   // sensor and motor align voltage
   voltage_sensor_align = DEF_VOLTAGE_SENSOR_ALIGN;

   // default modulation is SinePWM
   foc_modulation = FOCModulationType::SinePWM;

   // default target value
   target = 0;
   voltage.d = 0;
   voltage.q = 0;
   // current target values
   current_sp = 0;
   current.q = 0;
   current.d = 0;

   //monitor_port
   monitor_port = nullptr;
   //sensor
   sensor = nullptr;
 }


 void FOCMotor::linkSensor(Sensor* _sensor) {
   sensor = _sensor;
 }

 // shaft angle calculation
 float FOCMotor::shaftAngle() {
   // if no sensor linked return previous value ( for open loop )
   if(!sensor) return shaft_angle;
   return sensor_direction*LPF_angle(sensor->getAngle()) - sensor_offset;
 }
 // shaft velocity calculation
 float FOCMotor::shaftVelocity() {
   // if no sensor linked return previous value ( for open loop )
   if(!sensor) return shaft_velocity;
   return sensor_direction*LPF_velocity(sensor->getVelocity());
 }

 float FOCMotor::electricalAngle(){
   return _normalizeAngle((shaft_angle + sensor_offset) * pole_pairs - zero_electric_angle);
 }
