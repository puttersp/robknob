
robknob_stm32_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005780  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005918  08005918  00015918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005930  08005930  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005930  08005930  00015930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005938  08005938  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005938  08005938  00015938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800593c  0800593c  0001593c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000000c  0800594c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  0800594c  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139b4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021a7  00000000  00000000  000339f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00035b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  00036c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a3e  00000000  00000000  00037cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013894  00000000  00000000  0003b716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094ae8  00000000  00000000  0004efaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3a92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000494c  00000000  00000000  000e3ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005900 	.word	0x08005900

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08005900 	.word	0x08005900

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fe72 	bl	80011c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f812 	bl	800050c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 fb38 	bl	8000b5c <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80004ec:	f000 f876 	bl	80005dc <_ZL12MX_I2C1_Initv>
  MX_I2C2_Init();
 80004f0:	f000 f8a8 	bl	8000644 <_ZL12MX_I2C2_Initv>
  MX_SPI1_Init();
 80004f4:	f000 f8da 	bl	80006ac <_ZL12MX_SPI1_Initv>
  MX_TIM1_Init();
 80004f8:	f000 f914 	bl	8000724 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 80004fc:	f000 fa04 	bl	8000908 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000500:	f000 fa5e 	bl	80009c0 <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 8000504:	f000 fafc 	bl	8000b00 <_ZL19MX_USART2_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000508:	e7fe      	b.n	8000508 <main+0x2c>
	...

0800050c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	; 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2230      	movs	r2, #48	; 0x30
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f005 f9e8 	bl	80058f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <_Z18SystemClock_Configv+0xc8>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	4a26      	ldr	r2, [pc, #152]	; (80005d4 <_Z18SystemClock_Configv+0xc8>)
 800053a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053e:	6413      	str	r3, [r2, #64]	; 0x40
 8000540:	4b24      	ldr	r3, [pc, #144]	; (80005d4 <_Z18SystemClock_Configv+0xc8>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <_Z18SystemClock_Configv+0xcc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a20      	ldr	r2, [pc, #128]	; (80005d8 <_Z18SystemClock_Configv+0xcc>)
 8000556:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <_Z18SystemClock_Configv+0xcc>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000568:	2302      	movs	r3, #2
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	2301      	movs	r3, #1
 800056e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000570:	2310      	movs	r3, #16
 8000572:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000574:	2300      	movs	r3, #0
 8000576:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0320 	add.w	r3, r7, #32
 800057c:	4618      	mov	r0, r3
 800057e:	f003 f805 	bl	800358c <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	bf14      	ite	ne
 8000588:	2301      	movne	r3, #1
 800058a:	2300      	moveq	r3, #0
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 8000592:	f000 fb43 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f003 fa63 	bl	8003a7c <HAL_RCC_ClockConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	bf14      	ite	ne
 80005bc:	2301      	movne	r3, #1
 80005be:	2300      	moveq	r3, #0
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 80005c6:	f000 fb29 	bl	8000c1c <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e0:	4b15      	ldr	r3, [pc, #84]	; (8000638 <_ZL12MX_I2C1_Initv+0x5c>)
 80005e2:	4a16      	ldr	r2, [pc, #88]	; (800063c <_ZL12MX_I2C1_Initv+0x60>)
 80005e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80005e6:	4b14      	ldr	r3, [pc, #80]	; (8000638 <_ZL12MX_I2C1_Initv+0x5c>)
 80005e8:	4a15      	ldr	r2, [pc, #84]	; (8000640 <_ZL12MX_I2C1_Initv+0x64>)
 80005ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <_ZL12MX_I2C1_Initv+0x5c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <_ZL12MX_I2C1_Initv+0x5c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <_ZL12MX_I2C1_Initv+0x5c>)
 80005fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <_ZL12MX_I2C1_Initv+0x5c>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <_ZL12MX_I2C1_Initv+0x5c>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <_ZL12MX_I2C1_Initv+0x5c>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <_ZL12MX_I2C1_Initv+0x5c>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000618:	4807      	ldr	r0, [pc, #28]	; (8000638 <_ZL12MX_I2C1_Initv+0x5c>)
 800061a:	f001 f997 	bl	800194c <HAL_I2C_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	bf14      	ite	ne
 8000624:	2301      	movne	r3, #1
 8000626:	2300      	moveq	r3, #0
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800062e:	f000 faf5 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000028 	.word	0x20000028
 800063c:	40005400 	.word	0x40005400
 8000640:	00061a80 	.word	0x00061a80

08000644 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <_ZL12MX_I2C2_Initv+0x5c>)
 800064a:	4a16      	ldr	r2, [pc, #88]	; (80006a4 <_ZL12MX_I2C2_Initv+0x60>)
 800064c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <_ZL12MX_I2C2_Initv+0x5c>)
 8000650:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <_ZL12MX_I2C2_Initv+0x64>)
 8000652:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <_ZL12MX_I2C2_Initv+0x5c>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <_ZL12MX_I2C2_Initv+0x5c>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <_ZL12MX_I2C2_Initv+0x5c>)
 8000662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000666:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <_ZL12MX_I2C2_Initv+0x5c>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <_ZL12MX_I2C2_Initv+0x5c>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <_ZL12MX_I2C2_Initv+0x5c>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <_ZL12MX_I2C2_Initv+0x5c>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000680:	4807      	ldr	r0, [pc, #28]	; (80006a0 <_ZL12MX_I2C2_Initv+0x5c>)
 8000682:	f001 f963 	bl	800194c <HAL_I2C_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	bf14      	ite	ne
 800068c:	2301      	movne	r3, #1
 800068e:	2300      	moveq	r3, #0
 8000690:	b2db      	uxtb	r3, r3
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 8000696:	f000 fac1 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	2000007c 	.word	0x2000007c
 80006a4:	40005800 	.word	0x40005800
 80006a8:	00061a80 	.word	0x00061a80

080006ac <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <_ZL12MX_SPI1_Initv+0x70>)
 80006b2:	4a1b      	ldr	r2, [pc, #108]	; (8000720 <_ZL12MX_SPI1_Initv+0x74>)
 80006b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <_ZL12MX_SPI1_Initv+0x70>)
 80006b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <_ZL12MX_SPI1_Initv+0x70>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <_ZL12MX_SPI1_Initv+0x70>)
 80006c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <_ZL12MX_SPI1_Initv+0x70>)
 80006ce:	2202      	movs	r2, #2
 80006d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <_ZL12MX_SPI1_Initv+0x70>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006d8:	4b10      	ldr	r3, [pc, #64]	; (800071c <_ZL12MX_SPI1_Initv+0x70>)
 80006da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80006e0:	4b0e      	ldr	r3, [pc, #56]	; (800071c <_ZL12MX_SPI1_Initv+0x70>)
 80006e2:	2208      	movs	r2, #8
 80006e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <_ZL12MX_SPI1_Initv+0x70>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ec:	4b0b      	ldr	r3, [pc, #44]	; (800071c <_ZL12MX_SPI1_Initv+0x70>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <_ZL12MX_SPI1_Initv+0x70>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <_ZL12MX_SPI1_Initv+0x70>)
 80006fa:	220a      	movs	r2, #10
 80006fc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006fe:	4807      	ldr	r0, [pc, #28]	; (800071c <_ZL12MX_SPI1_Initv+0x70>)
 8000700:	f003 fb9c 	bl	8003e3c <HAL_SPI_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf14      	ite	ne
 800070a:	2301      	movne	r3, #1
 800070c:	2300      	moveq	r3, #0
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <_ZL12MX_SPI1_Initv+0x6c>
  {
    Error_Handler();
 8000714:	f000 fa82 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200000d0 	.word	0x200000d0
 8000720:	40013000 	.word	0x40013000

08000724 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b096      	sub	sp, #88	; 0x58
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
 8000752:	615a      	str	r2, [r3, #20]
 8000754:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2220      	movs	r2, #32
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f005 f8c7 	bl	80058f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000762:	4b67      	ldr	r3, [pc, #412]	; (8000900 <_ZL12MX_TIM1_Initv+0x1dc>)
 8000764:	4a67      	ldr	r2, [pc, #412]	; (8000904 <_ZL12MX_TIM1_Initv+0x1e0>)
 8000766:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000768:	4b65      	ldr	r3, [pc, #404]	; (8000900 <_ZL12MX_TIM1_Initv+0x1dc>)
 800076a:	2200      	movs	r2, #0
 800076c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076e:	4b64      	ldr	r3, [pc, #400]	; (8000900 <_ZL12MX_TIM1_Initv+0x1dc>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8000774:	4b62      	ldr	r3, [pc, #392]	; (8000900 <_ZL12MX_TIM1_Initv+0x1dc>)
 8000776:	f241 3287 	movw	r2, #4999	; 0x1387
 800077a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077c:	4b60      	ldr	r3, [pc, #384]	; (8000900 <_ZL12MX_TIM1_Initv+0x1dc>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000782:	4b5f      	ldr	r3, [pc, #380]	; (8000900 <_ZL12MX_TIM1_Initv+0x1dc>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000788:	4b5d      	ldr	r3, [pc, #372]	; (8000900 <_ZL12MX_TIM1_Initv+0x1dc>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800078e:	485c      	ldr	r0, [pc, #368]	; (8000900 <_ZL12MX_TIM1_Initv+0x1dc>)
 8000790:	f003 fbdd 	bl	8003f4e <HAL_TIM_Base_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	bf14      	ite	ne
 800079a:	2301      	movne	r3, #1
 800079c:	2300      	moveq	r3, #0
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 80007a4:	f000 fa3a 	bl	8000c1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007b2:	4619      	mov	r1, r3
 80007b4:	4852      	ldr	r0, [pc, #328]	; (8000900 <_ZL12MX_TIM1_Initv+0x1dc>)
 80007b6:	f003 fd35 	bl	8004224 <HAL_TIM_ConfigClockSource>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	bf14      	ite	ne
 80007c0:	2301      	movne	r3, #1
 80007c2:	2300      	moveq	r3, #0
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 80007ca:	f000 fa27 	bl	8000c1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007ce:	484c      	ldr	r0, [pc, #304]	; (8000900 <_ZL12MX_TIM1_Initv+0x1dc>)
 80007d0:	f003 fc0c 	bl	8003fec <HAL_TIM_PWM_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	bf14      	ite	ne
 80007da:	2301      	movne	r3, #1
 80007dc:	2300      	moveq	r3, #0
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 80007e4:	f000 fa1a 	bl	8000c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e8:	2300      	movs	r3, #0
 80007ea:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007f4:	4619      	mov	r1, r3
 80007f6:	4842      	ldr	r0, [pc, #264]	; (8000900 <_ZL12MX_TIM1_Initv+0x1dc>)
 80007f8:	f004 f882 	bl	8004900 <HAL_TIMEx_MasterConfigSynchronization>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	bf14      	ite	ne
 8000802:	2301      	movne	r3, #1
 8000804:	2300      	moveq	r3, #0
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 800080c:	f000 fa06 	bl	8000c1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000810:	2360      	movs	r3, #96	; 0x60
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000818:	2300      	movs	r3, #0
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800081c:	2300      	movs	r3, #0
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000824:	2300      	movs	r3, #0
 8000826:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	2200      	movs	r2, #0
 8000832:	4619      	mov	r1, r3
 8000834:	4832      	ldr	r0, [pc, #200]	; (8000900 <_ZL12MX_TIM1_Initv+0x1dc>)
 8000836:	f003 fc33 	bl	80040a0 <HAL_TIM_PWM_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	bf14      	ite	ne
 8000840:	2301      	movne	r3, #1
 8000842:	2300      	moveq	r3, #0
 8000844:	b2db      	uxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 800084a:	f000 f9e7 	bl	8000c1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	2204      	movs	r2, #4
 8000854:	4619      	mov	r1, r3
 8000856:	482a      	ldr	r0, [pc, #168]	; (8000900 <_ZL12MX_TIM1_Initv+0x1dc>)
 8000858:	f003 fc22 	bl	80040a0 <HAL_TIM_PWM_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	bf14      	ite	ne
 8000862:	2301      	movne	r3, #1
 8000864:	2300      	moveq	r3, #0
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 800086c:	f000 f9d6 	bl	8000c1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000874:	2208      	movs	r2, #8
 8000876:	4619      	mov	r1, r3
 8000878:	4821      	ldr	r0, [pc, #132]	; (8000900 <_ZL12MX_TIM1_Initv+0x1dc>)
 800087a:	f003 fc11 	bl	80040a0 <HAL_TIM_PWM_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	bf14      	ite	ne
 8000884:	2301      	movne	r3, #1
 8000886:	2300      	moveq	r3, #0
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 800088e:	f000 f9c5 	bl	8000c1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000896:	220c      	movs	r2, #12
 8000898:	4619      	mov	r1, r3
 800089a:	4819      	ldr	r0, [pc, #100]	; (8000900 <_ZL12MX_TIM1_Initv+0x1dc>)
 800089c:	f003 fc00 	bl	80040a0 <HAL_TIM_PWM_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	bf14      	ite	ne
 80008a6:	2301      	movne	r3, #1
 80008a8:	2300      	moveq	r3, #0
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <_ZL12MX_TIM1_Initv+0x190>
  {
    Error_Handler();
 80008b0:	f000 f9b4 	bl	8000c1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	4619      	mov	r1, r3
 80008d6:	480a      	ldr	r0, [pc, #40]	; (8000900 <_ZL12MX_TIM1_Initv+0x1dc>)
 80008d8:	f004 f880 	bl	80049dc <HAL_TIMEx_ConfigBreakDeadTime>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	bf14      	ite	ne
 80008e2:	2301      	movne	r3, #1
 80008e4:	2300      	moveq	r3, #0
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <_ZL12MX_TIM1_Initv+0x1cc>
  {
    Error_Handler();
 80008ec:	f000 f996 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <_ZL12MX_TIM1_Initv+0x1dc>)
 80008f2:	f000 fb21 	bl	8000f38 <HAL_TIM_MspPostInit>

}
 80008f6:	bf00      	nop
 80008f8:	3758      	adds	r7, #88	; 0x58
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000128 	.word	0x20000128
 8000904:	40010000 	.word	0x40010000

08000908 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091c:	463b      	mov	r3, r7
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000924:	4b25      	ldr	r3, [pc, #148]	; (80009bc <_ZL12MX_TIM2_Initv+0xb4>)
 8000926:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800092a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 800092c:	4b23      	ldr	r3, [pc, #140]	; (80009bc <_ZL12MX_TIM2_Initv+0xb4>)
 800092e:	2263      	movs	r2, #99	; 0x63
 8000930:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b22      	ldr	r3, [pc, #136]	; (80009bc <_ZL12MX_TIM2_Initv+0xb4>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000938:	4b20      	ldr	r3, [pc, #128]	; (80009bc <_ZL12MX_TIM2_Initv+0xb4>)
 800093a:	f04f 32ff 	mov.w	r2, #4294967295
 800093e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <_ZL12MX_TIM2_Initv+0xb4>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <_ZL12MX_TIM2_Initv+0xb4>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800094c:	481b      	ldr	r0, [pc, #108]	; (80009bc <_ZL12MX_TIM2_Initv+0xb4>)
 800094e:	f003 fafe 	bl	8003f4e <HAL_TIM_Base_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	bf14      	ite	ne
 8000958:	2301      	movne	r3, #1
 800095a:	2300      	moveq	r3, #0
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8000962:	f000 f95b 	bl	8000c1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800096c:	f107 0308 	add.w	r3, r7, #8
 8000970:	4619      	mov	r1, r3
 8000972:	4812      	ldr	r0, [pc, #72]	; (80009bc <_ZL12MX_TIM2_Initv+0xb4>)
 8000974:	f003 fc56 	bl	8004224 <HAL_TIM_ConfigClockSource>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	bf14      	ite	ne
 800097e:	2301      	movne	r3, #1
 8000980:	2300      	moveq	r3, #0
 8000982:	b2db      	uxtb	r3, r3
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8000988:	f000 f948 	bl	8000c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098c:	2300      	movs	r3, #0
 800098e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000994:	463b      	mov	r3, r7
 8000996:	4619      	mov	r1, r3
 8000998:	4808      	ldr	r0, [pc, #32]	; (80009bc <_ZL12MX_TIM2_Initv+0xb4>)
 800099a:	f003 ffb1 	bl	8004900 <HAL_TIMEx_MasterConfigSynchronization>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	bf14      	ite	ne
 80009a4:	2301      	movne	r3, #1
 80009a6:	2300      	moveq	r3, #0
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 80009ae:	f000 f935 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000170 	.word	0x20000170

080009c0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08e      	sub	sp, #56	; 0x38
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d4:	f107 0320 	add.w	r3, r7, #32
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
 80009ec:	615a      	str	r2, [r3, #20]
 80009ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009f0:	4b41      	ldr	r3, [pc, #260]	; (8000af8 <_ZL12MX_TIM3_Initv+0x138>)
 80009f2:	4a42      	ldr	r2, [pc, #264]	; (8000afc <_ZL12MX_TIM3_Initv+0x13c>)
 80009f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009f6:	4b40      	ldr	r3, [pc, #256]	; (8000af8 <_ZL12MX_TIM3_Initv+0x138>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fc:	4b3e      	ldr	r3, [pc, #248]	; (8000af8 <_ZL12MX_TIM3_Initv+0x138>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8000a02:	4b3d      	ldr	r3, [pc, #244]	; (8000af8 <_ZL12MX_TIM3_Initv+0x138>)
 8000a04:	f241 3287 	movw	r2, #4999	; 0x1387
 8000a08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0a:	4b3b      	ldr	r3, [pc, #236]	; (8000af8 <_ZL12MX_TIM3_Initv+0x138>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a10:	4b39      	ldr	r3, [pc, #228]	; (8000af8 <_ZL12MX_TIM3_Initv+0x138>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a16:	4838      	ldr	r0, [pc, #224]	; (8000af8 <_ZL12MX_TIM3_Initv+0x138>)
 8000a18:	f003 fa99 	bl	8003f4e <HAL_TIM_Base_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	bf14      	ite	ne
 8000a22:	2301      	movne	r3, #1
 8000a24:	2300      	moveq	r3, #0
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8000a2c:	f000 f8f6 	bl	8000c1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	482e      	ldr	r0, [pc, #184]	; (8000af8 <_ZL12MX_TIM3_Initv+0x138>)
 8000a3e:	f003 fbf1 	bl	8004224 <HAL_TIM_ConfigClockSource>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	bf14      	ite	ne
 8000a48:	2301      	movne	r3, #1
 8000a4a:	2300      	moveq	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8000a52:	f000 f8e3 	bl	8000c1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a56:	4828      	ldr	r0, [pc, #160]	; (8000af8 <_ZL12MX_TIM3_Initv+0x138>)
 8000a58:	f003 fac8 	bl	8003fec <HAL_TIM_PWM_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	bf14      	ite	ne
 8000a62:	2301      	movne	r3, #1
 8000a64:	2300      	moveq	r3, #0
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8000a6c:	f000 f8d6 	bl	8000c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a78:	f107 0320 	add.w	r3, r7, #32
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	481e      	ldr	r0, [pc, #120]	; (8000af8 <_ZL12MX_TIM3_Initv+0x138>)
 8000a80:	f003 ff3e 	bl	8004900 <HAL_TIMEx_MasterConfigSynchronization>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	bf14      	ite	ne
 8000a8a:	2301      	movne	r3, #1
 8000a8c:	2300      	moveq	r3, #0
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8000a94:	f000 f8c2 	bl	8000c1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a98:	2360      	movs	r3, #96	; 0x60
 8000a9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	4619      	mov	r1, r3
 8000aae:	4812      	ldr	r0, [pc, #72]	; (8000af8 <_ZL12MX_TIM3_Initv+0x138>)
 8000ab0:	f003 faf6 	bl	80040a0 <HAL_TIM_PWM_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	bf14      	ite	ne
 8000aba:	2301      	movne	r3, #1
 8000abc:	2300      	moveq	r3, #0
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8000ac4:	f000 f8aa 	bl	8000c1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2204      	movs	r2, #4
 8000acc:	4619      	mov	r1, r3
 8000ace:	480a      	ldr	r0, [pc, #40]	; (8000af8 <_ZL12MX_TIM3_Initv+0x138>)
 8000ad0:	f003 fae6 	bl	80040a0 <HAL_TIM_PWM_ConfigChannel>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	bf14      	ite	ne
 8000ada:	2301      	movne	r3, #1
 8000adc:	2300      	moveq	r3, #0
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 8000ae4:	f000 f89a 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ae8:	4803      	ldr	r0, [pc, #12]	; (8000af8 <_ZL12MX_TIM3_Initv+0x138>)
 8000aea:	f000 fa25 	bl	8000f38 <HAL_TIM_MspPostInit>

}
 8000aee:	bf00      	nop
 8000af0:	3738      	adds	r7, #56	; 0x38
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200001b8 	.word	0x200001b8
 8000afc:	40000400 	.word	0x40000400

08000b00 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b06:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b0a:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b36:	4807      	ldr	r0, [pc, #28]	; (8000b54 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b38:	f003 ffa2 	bl	8004a80 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	bf14      	ite	ne
 8000b42:	2301      	movne	r3, #1
 8000b44:	2300      	moveq	r3, #0
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000b4c:	f000 f866 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000200 	.word	0x20000200
 8000b58:	40004400 	.word	0x40004400

08000b5c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	4b26      	ldr	r3, [pc, #152]	; (8000c10 <_ZL12MX_GPIO_Initv+0xb4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a25      	ldr	r2, [pc, #148]	; (8000c10 <_ZL12MX_GPIO_Initv+0xb4>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <_ZL12MX_GPIO_Initv+0xb4>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <_ZL12MX_GPIO_Initv+0xb4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a1e      	ldr	r2, [pc, #120]	; (8000c10 <_ZL12MX_GPIO_Initv+0xb4>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <_ZL12MX_GPIO_Initv+0xb4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bb0:	4818      	ldr	r0, [pc, #96]	; (8000c14 <_ZL12MX_GPIO_Initv+0xb8>)
 8000bb2:	f000 feb1 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4813      	ldr	r0, [pc, #76]	; (8000c18 <_ZL12MX_GPIO_Initv+0xbc>)
 8000bca:	f000 fd21 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	4619      	mov	r1, r3
 8000be2:	480c      	ldr	r0, [pc, #48]	; (8000c14 <_ZL12MX_GPIO_Initv+0xb8>)
 8000be4:	f000 fd14 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000be8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4804      	ldr	r0, [pc, #16]	; (8000c14 <_ZL12MX_GPIO_Initv+0xb8>)
 8000c02:	f000 fd05 	bl	8001610 <HAL_GPIO_Init>

}
 8000c06:	bf00      	nop
 8000c08:	3720      	adds	r7, #32
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020000 	.word	0x40020000
 8000c18:	40020400 	.word	0x40020400

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <Error_Handler+0x8>
	...

08000c28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c58:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_MspInit+0x4c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800

08000c78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a4a      	ldr	r2, [pc, #296]	; (8000dc0 <HAL_I2C_MspInit+0x148>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d13c      	bne.n	8000d14 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
 8000c9e:	4b49      	ldr	r3, [pc, #292]	; (8000dc4 <HAL_I2C_MspInit+0x14c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a48      	ldr	r2, [pc, #288]	; (8000dc4 <HAL_I2C_MspInit+0x14c>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b46      	ldr	r3, [pc, #280]	; (8000dc4 <HAL_I2C_MspInit+0x14c>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	61bb      	str	r3, [r7, #24]
 8000cb4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cb6:	23c0      	movs	r3, #192	; 0xc0
 8000cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cba:	2312      	movs	r3, #18
 8000cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	483d      	ldr	r0, [pc, #244]	; (8000dc8 <HAL_I2C_MspInit+0x150>)
 8000cd2:	f000 fc9d 	bl	8001610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	4b3a      	ldr	r3, [pc, #232]	; (8000dc4 <HAL_I2C_MspInit+0x14c>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	4a39      	ldr	r2, [pc, #228]	; (8000dc4 <HAL_I2C_MspInit+0x14c>)
 8000ce0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce6:	4b37      	ldr	r3, [pc, #220]	; (8000dc4 <HAL_I2C_MspInit+0x14c>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	201f      	movs	r0, #31
 8000cf8:	f000 fbb3 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000cfc:	201f      	movs	r0, #31
 8000cfe:	f000 fbcc 	bl	800149a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	2020      	movs	r0, #32
 8000d08:	f000 fbab 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d0c:	2020      	movs	r0, #32
 8000d0e:	f000 fbc4 	bl	800149a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d12:	e051      	b.n	8000db8 <HAL_I2C_MspInit+0x140>
  else if(hi2c->Instance==I2C2)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a2c      	ldr	r2, [pc, #176]	; (8000dcc <HAL_I2C_MspInit+0x154>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d14c      	bne.n	8000db8 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <HAL_I2C_MspInit+0x14c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a27      	ldr	r2, [pc, #156]	; (8000dc4 <HAL_I2C_MspInit+0x14c>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <HAL_I2C_MspInit+0x14c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d40:	2312      	movs	r3, #18
 8000d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	481c      	ldr	r0, [pc, #112]	; (8000dc8 <HAL_I2C_MspInit+0x150>)
 8000d58:	f000 fc5a 	bl	8001610 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d60:	2312      	movs	r3, #18
 8000d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000d6c:	2309      	movs	r3, #9
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	4814      	ldr	r0, [pc, #80]	; (8000dc8 <HAL_I2C_MspInit+0x150>)
 8000d78:	f000 fc4a 	bl	8001610 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_I2C_MspInit+0x14c>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <HAL_I2C_MspInit+0x14c>)
 8000d86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_I2C_MspInit+0x14c>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	2021      	movs	r0, #33	; 0x21
 8000d9e:	f000 fb60 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000da2:	2021      	movs	r0, #33	; 0x21
 8000da4:	f000 fb79 	bl	800149a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2100      	movs	r1, #0
 8000dac:	2022      	movs	r0, #34	; 0x22
 8000dae:	f000 fb58 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000db2:	2022      	movs	r0, #34	; 0x22
 8000db4:	f000 fb71 	bl	800149a <HAL_NVIC_EnableIRQ>
}
 8000db8:	bf00      	nop
 8000dba:	3730      	adds	r7, #48	; 0x30
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40005400 	.word	0x40005400
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020400 	.word	0x40020400
 8000dcc:	40005800 	.word	0x40005800

08000dd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a28      	ldr	r2, [pc, #160]	; (8000e90 <HAL_SPI_MspInit+0xc0>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d149      	bne.n	8000e86 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <HAL_SPI_MspInit+0xc4>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	4a26      	ldr	r2, [pc, #152]	; (8000e94 <HAL_SPI_MspInit+0xc4>)
 8000dfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e00:	6453      	str	r3, [r2, #68]	; 0x44
 8000e02:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <HAL_SPI_MspInit+0xc4>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <HAL_SPI_MspInit+0xc4>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a1f      	ldr	r2, [pc, #124]	; (8000e94 <HAL_SPI_MspInit+0xc4>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <HAL_SPI_MspInit+0xc4>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <HAL_SPI_MspInit+0xc4>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a18      	ldr	r2, [pc, #96]	; (8000e94 <HAL_SPI_MspInit+0xc4>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <HAL_SPI_MspInit+0xc4>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e46:	2320      	movs	r3, #32
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e56:	2305      	movs	r3, #5
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <HAL_SPI_MspInit+0xc8>)
 8000e62:	f000 fbd5 	bl	8001610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e66:	2330      	movs	r3, #48	; 0x30
 8000e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e76:	2305      	movs	r3, #5
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4806      	ldr	r0, [pc, #24]	; (8000e9c <HAL_SPI_MspInit+0xcc>)
 8000e82:	f000 fbc5 	bl	8001610 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	; 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40013000 	.word	0x40013000
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	40020400 	.word	0x40020400

08000ea0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a1f      	ldr	r2, [pc, #124]	; (8000f2c <HAL_TIM_Base_MspInit+0x8c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d10e      	bne.n	8000ed0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <HAL_TIM_Base_MspInit+0x90>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	4a1d      	ldr	r2, [pc, #116]	; (8000f30 <HAL_TIM_Base_MspInit+0x90>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <HAL_TIM_Base_MspInit+0x90>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ece:	e026      	b.n	8000f1e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ed8:	d10e      	bne.n	8000ef8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <HAL_TIM_Base_MspInit+0x90>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <HAL_TIM_Base_MspInit+0x90>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_TIM_Base_MspInit+0x90>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]
}
 8000ef6:	e012      	b.n	8000f1e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <HAL_TIM_Base_MspInit+0x94>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d10d      	bne.n	8000f1e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_TIM_Base_MspInit+0x90>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	4a09      	ldr	r2, [pc, #36]	; (8000f30 <HAL_TIM_Base_MspInit+0x90>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	6413      	str	r3, [r2, #64]	; 0x40
 8000f12:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <HAL_TIM_Base_MspInit+0x90>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
}
 8000f1e:	bf00      	nop
 8000f20:	371c      	adds	r7, #28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40010000 	.word	0x40010000
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40000400 	.word	0x40000400

08000f38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a24      	ldr	r2, [pc, #144]	; (8000fe8 <HAL_TIM_MspPostInit+0xb0>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d11f      	bne.n	8000f9a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	4b23      	ldr	r3, [pc, #140]	; (8000fec <HAL_TIM_MspPostInit+0xb4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a22      	ldr	r2, [pc, #136]	; (8000fec <HAL_TIM_MspPostInit+0xb4>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <HAL_TIM_MspPostInit+0xb4>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000f76:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4619      	mov	r1, r3
 8000f92:	4817      	ldr	r0, [pc, #92]	; (8000ff0 <HAL_TIM_MspPostInit+0xb8>)
 8000f94:	f000 fb3c 	bl	8001610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f98:	e022      	b.n	8000fe0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a15      	ldr	r2, [pc, #84]	; (8000ff4 <HAL_TIM_MspPostInit+0xbc>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d11d      	bne.n	8000fe0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_TIM_MspPostInit+0xb4>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <HAL_TIM_MspPostInit+0xb4>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_TIM_MspPostInit+0xb4>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fc0:	23c0      	movs	r3, #192	; 0xc0
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <HAL_TIM_MspPostInit+0xb8>)
 8000fdc:	f000 fb18 	bl	8001610 <HAL_GPIO_Init>
}
 8000fe0:	bf00      	nop
 8000fe2:	3728      	adds	r7, #40	; 0x28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40010000 	.word	0x40010000
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	40000400 	.word	0x40000400

08000ff8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1d      	ldr	r2, [pc, #116]	; (800108c <HAL_UART_MspInit+0x94>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d133      	bne.n	8001082 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <HAL_UART_MspInit+0x98>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <HAL_UART_MspInit+0x98>)
 8001024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001028:	6413      	str	r3, [r2, #64]	; 0x40
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <HAL_UART_MspInit+0x98>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <HAL_UART_MspInit+0x98>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a14      	ldr	r2, [pc, #80]	; (8001090 <HAL_UART_MspInit+0x98>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_UART_MspInit+0x98>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001052:	230c      	movs	r3, #12
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001062:	2307      	movs	r3, #7
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4809      	ldr	r0, [pc, #36]	; (8001094 <HAL_UART_MspInit+0x9c>)
 800106e:	f000 facf 	bl	8001610 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	2026      	movs	r0, #38	; 0x26
 8001078:	f000 f9f3 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800107c:	2026      	movs	r0, #38	; 0x26
 800107e:	f000 fa0c 	bl	800149a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40004400 	.word	0x40004400
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800109c:	e7fe      	b.n	800109c <NMI_Handler+0x4>

0800109e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <HardFault_Handler+0x4>

080010a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <MemManage_Handler+0x4>

080010aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e4:	f000 f8c2 	bl	800126c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}

080010ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <I2C1_EV_IRQHandler+0x10>)
 80010f2:	f000 fd6f 	bl	8001bd4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000028 	.word	0x20000028

08001100 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <I2C1_ER_IRQHandler+0x10>)
 8001106:	f000 fed6 	bl	8001eb6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000028 	.word	0x20000028

08001114 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <I2C2_EV_IRQHandler+0x10>)
 800111a:	f000 fd5b 	bl	8001bd4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000007c 	.word	0x2000007c

08001128 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <I2C2_ER_IRQHandler+0x10>)
 800112e:	f000 fec2 	bl	8001eb6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000007c 	.word	0x2000007c

0800113c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <USART2_IRQHandler+0x10>)
 8001142:	f003 fceb 	bl	8004b1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000200 	.word	0x20000200

08001150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <SystemInit+0x20>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <SystemInit+0x20>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800117a:	490e      	ldr	r1, [pc, #56]	; (80011b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800117c:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001190:	4c0b      	ldr	r4, [pc, #44]	; (80011c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800119e:	f7ff ffd7 	bl	8001150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a2:	f004 fb81 	bl	80058a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a6:	f7ff f999 	bl	80004dc <main>
  bx  lr    
 80011aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011b8:	08005940 	.word	0x08005940
  ldr r2, =_sbss
 80011bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011c0:	20000248 	.word	0x20000248

080011c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC_IRQHandler>
	...

080011c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011cc:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <HAL_Init+0x40>)
 80011d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_Init+0x40>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <HAL_Init+0x40>)
 80011de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_Init+0x40>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a07      	ldr	r2, [pc, #28]	; (8001208 <HAL_Init+0x40>)
 80011ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f0:	2003      	movs	r0, #3
 80011f2:	f000 f92b 	bl	800144c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f6:	200f      	movs	r0, #15
 80011f8:	f000 f808 	bl	800120c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011fc:	f7ff fd14 	bl	8000c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023c00 	.word	0x40023c00

0800120c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x54>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_InitTick+0x58>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001222:	fbb3 f3f1 	udiv	r3, r3, r1
 8001226:	fbb2 f3f3 	udiv	r3, r2, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f943 	bl	80014b6 <HAL_SYSTICK_Config>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e00e      	b.n	8001258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b0f      	cmp	r3, #15
 800123e:	d80a      	bhi.n	8001256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001240:	2200      	movs	r2, #0
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f000 f90b 	bl	8001462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800124c:	4a06      	ldr	r2, [pc, #24]	; (8001268 <HAL_InitTick+0x5c>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	e000      	b.n	8001258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000000 	.word	0x20000000
 8001264:	20000008 	.word	0x20000008
 8001268:	20000004 	.word	0x20000004

0800126c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x20>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_IncTick+0x24>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <HAL_IncTick+0x24>)
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008
 8001290:	20000244 	.word	0x20000244

08001294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return uwTick;
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <HAL_GetTick+0x14>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000244 	.word	0x20000244

080012ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <__NVIC_GetPriorityGrouping+0x18>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	f003 0307 	and.w	r3, r3, #7
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	db0b      	blt.n	800133a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f003 021f 	and.w	r2, r3, #31
 8001328:	4907      	ldr	r1, [pc, #28]	; (8001348 <__NVIC_EnableIRQ+0x38>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	095b      	lsrs	r3, r3, #5
 8001330:	2001      	movs	r0, #1
 8001332:	fa00 f202 	lsl.w	r2, r0, r2
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000e100 	.word	0xe000e100

0800134c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	db0a      	blt.n	8001376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	490c      	ldr	r1, [pc, #48]	; (8001398 <__NVIC_SetPriority+0x4c>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	0112      	lsls	r2, r2, #4
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	440b      	add	r3, r1
 8001370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001374:	e00a      	b.n	800138c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4908      	ldr	r1, [pc, #32]	; (800139c <__NVIC_SetPriority+0x50>)
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	3b04      	subs	r3, #4
 8001384:	0112      	lsls	r2, r2, #4
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	440b      	add	r3, r1
 800138a:	761a      	strb	r2, [r3, #24]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000e100 	.word	0xe000e100
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	; 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f1c3 0307 	rsb	r3, r3, #7
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	bf28      	it	cs
 80013be:	2304      	movcs	r3, #4
 80013c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3304      	adds	r3, #4
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d902      	bls.n	80013d0 <NVIC_EncodePriority+0x30>
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3b03      	subs	r3, #3
 80013ce:	e000      	b.n	80013d2 <NVIC_EncodePriority+0x32>
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	401a      	ands	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	4313      	orrs	r3, r2
         );
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001418:	d301      	bcc.n	800141e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141a:	2301      	movs	r3, #1
 800141c:	e00f      	b.n	800143e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <SysTick_Config+0x40>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001426:	210f      	movs	r1, #15
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f7ff ff8e 	bl	800134c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <SysTick_Config+0x40>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <SysTick_Config+0x40>)
 8001438:	2207      	movs	r2, #7
 800143a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	e000e010 	.word	0xe000e010

0800144c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff29 	bl	80012ac <__NVIC_SetPriorityGrouping>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001474:	f7ff ff3e 	bl	80012f4 <__NVIC_GetPriorityGrouping>
 8001478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	6978      	ldr	r0, [r7, #20]
 8001480:	f7ff ff8e 	bl	80013a0 <NVIC_EncodePriority>
 8001484:	4602      	mov	r2, r0
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff5d 	bl	800134c <__NVIC_SetPriority>
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff31 	bl	8001310 <__NVIC_EnableIRQ>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ffa2 	bl	8001408 <SysTick_Config>
 80014c4:	4603      	mov	r3, r0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b084      	sub	sp, #16
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff feda 	bl	8001294 <HAL_GetTick>
 80014e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d008      	beq.n	8001500 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2280      	movs	r2, #128	; 0x80
 80014f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e052      	b.n	80015a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0216 	bic.w	r2, r2, #22
 800150e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	695a      	ldr	r2, [r3, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800151e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	2b00      	cmp	r3, #0
 8001526:	d103      	bne.n	8001530 <HAL_DMA_Abort+0x62>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152c:	2b00      	cmp	r3, #0
 800152e:	d007      	beq.n	8001540 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0208 	bic.w	r2, r2, #8
 800153e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0201 	bic.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001550:	e013      	b.n	800157a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001552:	f7ff fe9f 	bl	8001294 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b05      	cmp	r3, #5
 800155e:	d90c      	bls.n	800157a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2220      	movs	r2, #32
 8001564:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2203      	movs	r2, #3
 800156a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e015      	b.n	80015a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1e4      	bne.n	8001552 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158c:	223f      	movs	r2, #63	; 0x3f
 800158e:	409a      	lsls	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d004      	beq.n	80015cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2280      	movs	r2, #128	; 0x80
 80015c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e00c      	b.n	80015e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2205      	movs	r2, #5
 80015d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 0201 	bic.w	r2, r2, #1
 80015e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001600:	b2db      	uxtb	r3, r3
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
 800162a:	e159      	b.n	80018e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800162c:	2201      	movs	r2, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	429a      	cmp	r2, r3
 8001646:	f040 8148 	bne.w	80018da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	2b01      	cmp	r3, #1
 8001654:	d005      	beq.n	8001662 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800165e:	2b02      	cmp	r3, #2
 8001660:	d130      	bne.n	80016c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	2203      	movs	r2, #3
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001698:	2201      	movs	r2, #1
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f003 0201 	and.w	r2, r3, #1
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d017      	beq.n	8001700 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d123      	bne.n	8001754 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	08da      	lsrs	r2, r3, #3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3208      	adds	r2, #8
 8001714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	220f      	movs	r2, #15
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	08da      	lsrs	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3208      	adds	r2, #8
 800174e:	69b9      	ldr	r1, [r7, #24]
 8001750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	2203      	movs	r2, #3
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0203 	and.w	r2, r3, #3
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80a2 	beq.w	80018da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b57      	ldr	r3, [pc, #348]	; (80018f8 <HAL_GPIO_Init+0x2e8>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	4a56      	ldr	r2, [pc, #344]	; (80018f8 <HAL_GPIO_Init+0x2e8>)
 80017a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a4:	6453      	str	r3, [r2, #68]	; 0x44
 80017a6:	4b54      	ldr	r3, [pc, #336]	; (80018f8 <HAL_GPIO_Init+0x2e8>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017b2:	4a52      	ldr	r2, [pc, #328]	; (80018fc <HAL_GPIO_Init+0x2ec>)
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	089b      	lsrs	r3, r3, #2
 80017b8:	3302      	adds	r3, #2
 80017ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	220f      	movs	r2, #15
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a49      	ldr	r2, [pc, #292]	; (8001900 <HAL_GPIO_Init+0x2f0>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d019      	beq.n	8001812 <HAL_GPIO_Init+0x202>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a48      	ldr	r2, [pc, #288]	; (8001904 <HAL_GPIO_Init+0x2f4>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d013      	beq.n	800180e <HAL_GPIO_Init+0x1fe>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a47      	ldr	r2, [pc, #284]	; (8001908 <HAL_GPIO_Init+0x2f8>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d00d      	beq.n	800180a <HAL_GPIO_Init+0x1fa>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a46      	ldr	r2, [pc, #280]	; (800190c <HAL_GPIO_Init+0x2fc>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d007      	beq.n	8001806 <HAL_GPIO_Init+0x1f6>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a45      	ldr	r2, [pc, #276]	; (8001910 <HAL_GPIO_Init+0x300>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d101      	bne.n	8001802 <HAL_GPIO_Init+0x1f2>
 80017fe:	2304      	movs	r3, #4
 8001800:	e008      	b.n	8001814 <HAL_GPIO_Init+0x204>
 8001802:	2307      	movs	r3, #7
 8001804:	e006      	b.n	8001814 <HAL_GPIO_Init+0x204>
 8001806:	2303      	movs	r3, #3
 8001808:	e004      	b.n	8001814 <HAL_GPIO_Init+0x204>
 800180a:	2302      	movs	r3, #2
 800180c:	e002      	b.n	8001814 <HAL_GPIO_Init+0x204>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <HAL_GPIO_Init+0x204>
 8001812:	2300      	movs	r3, #0
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	f002 0203 	and.w	r2, r2, #3
 800181a:	0092      	lsls	r2, r2, #2
 800181c:	4093      	lsls	r3, r2
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001824:	4935      	ldr	r1, [pc, #212]	; (80018fc <HAL_GPIO_Init+0x2ec>)
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	089b      	lsrs	r3, r3, #2
 800182a:	3302      	adds	r3, #2
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001832:	4b38      	ldr	r3, [pc, #224]	; (8001914 <HAL_GPIO_Init+0x304>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001856:	4a2f      	ldr	r2, [pc, #188]	; (8001914 <HAL_GPIO_Init+0x304>)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800185c:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <HAL_GPIO_Init+0x304>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001880:	4a24      	ldr	r2, [pc, #144]	; (8001914 <HAL_GPIO_Init+0x304>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001886:	4b23      	ldr	r3, [pc, #140]	; (8001914 <HAL_GPIO_Init+0x304>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018aa:	4a1a      	ldr	r2, [pc, #104]	; (8001914 <HAL_GPIO_Init+0x304>)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <HAL_GPIO_Init+0x304>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018d4:	4a0f      	ldr	r2, [pc, #60]	; (8001914 <HAL_GPIO_Init+0x304>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3301      	adds	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	2b0f      	cmp	r3, #15
 80018e4:	f67f aea2 	bls.w	800162c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3724      	adds	r7, #36	; 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40013800 	.word	0x40013800
 8001900:	40020000 	.word	0x40020000
 8001904:	40020400 	.word	0x40020400
 8001908:	40020800 	.word	0x40020800
 800190c:	40020c00 	.word	0x40020c00
 8001910:	40021000 	.word	0x40021000
 8001914:	40013c00 	.word	0x40013c00

08001918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
 8001924:	4613      	mov	r3, r2
 8001926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001928:	787b      	ldrb	r3, [r7, #1]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001934:	e003      	b.n	800193e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	041a      	lsls	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	619a      	str	r2, [r3, #24]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e12b      	b.n	8001bb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d106      	bne.n	8001978 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff f980 	bl	8000c78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2224      	movs	r2, #36	; 0x24
 800197c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0201 	bic.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800199e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019b0:	f002 fa1c 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 80019b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4a81      	ldr	r2, [pc, #516]	; (8001bc0 <HAL_I2C_Init+0x274>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d807      	bhi.n	80019d0 <HAL_I2C_Init+0x84>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4a80      	ldr	r2, [pc, #512]	; (8001bc4 <HAL_I2C_Init+0x278>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	bf94      	ite	ls
 80019c8:	2301      	movls	r3, #1
 80019ca:	2300      	movhi	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	e006      	b.n	80019de <HAL_I2C_Init+0x92>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4a7d      	ldr	r2, [pc, #500]	; (8001bc8 <HAL_I2C_Init+0x27c>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	bf94      	ite	ls
 80019d8:	2301      	movls	r3, #1
 80019da:	2300      	movhi	r3, #0
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e0e7      	b.n	8001bb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4a78      	ldr	r2, [pc, #480]	; (8001bcc <HAL_I2C_Init+0x280>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	0c9b      	lsrs	r3, r3, #18
 80019f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	4a6a      	ldr	r2, [pc, #424]	; (8001bc0 <HAL_I2C_Init+0x274>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d802      	bhi.n	8001a20 <HAL_I2C_Init+0xd4>
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	e009      	b.n	8001a34 <HAL_I2C_Init+0xe8>
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a26:	fb02 f303 	mul.w	r3, r2, r3
 8001a2a:	4a69      	ldr	r2, [pc, #420]	; (8001bd0 <HAL_I2C_Init+0x284>)
 8001a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a30:	099b      	lsrs	r3, r3, #6
 8001a32:	3301      	adds	r3, #1
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	430b      	orrs	r3, r1
 8001a3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	495c      	ldr	r1, [pc, #368]	; (8001bc0 <HAL_I2C_Init+0x274>)
 8001a50:	428b      	cmp	r3, r1
 8001a52:	d819      	bhi.n	8001a88 <HAL_I2C_Init+0x13c>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1e59      	subs	r1, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a62:	1c59      	adds	r1, r3, #1
 8001a64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a68:	400b      	ands	r3, r1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00a      	beq.n	8001a84 <HAL_I2C_Init+0x138>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1e59      	subs	r1, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a82:	e051      	b.n	8001b28 <HAL_I2C_Init+0x1dc>
 8001a84:	2304      	movs	r3, #4
 8001a86:	e04f      	b.n	8001b28 <HAL_I2C_Init+0x1dc>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d111      	bne.n	8001ab4 <HAL_I2C_Init+0x168>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1e58      	subs	r0, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6859      	ldr	r1, [r3, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	440b      	add	r3, r1
 8001a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	bf0c      	ite	eq
 8001aac:	2301      	moveq	r3, #1
 8001aae:	2300      	movne	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	e012      	b.n	8001ada <HAL_I2C_Init+0x18e>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1e58      	subs	r0, r3, #1
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6859      	ldr	r1, [r3, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	0099      	lsls	r1, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aca:	3301      	adds	r3, #1
 8001acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	bf0c      	ite	eq
 8001ad4:	2301      	moveq	r3, #1
 8001ad6:	2300      	movne	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_I2C_Init+0x196>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e022      	b.n	8001b28 <HAL_I2C_Init+0x1dc>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10e      	bne.n	8001b08 <HAL_I2C_Init+0x1bc>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1e58      	subs	r0, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6859      	ldr	r1, [r3, #4]
 8001af2:	460b      	mov	r3, r1
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	440b      	add	r3, r1
 8001af8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001afc:	3301      	adds	r3, #1
 8001afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b06:	e00f      	b.n	8001b28 <HAL_I2C_Init+0x1dc>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1e58      	subs	r0, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	0099      	lsls	r1, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b1e:	3301      	adds	r3, #1
 8001b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	6809      	ldr	r1, [r1, #0]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69da      	ldr	r2, [r3, #28]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6911      	ldr	r1, [r2, #16]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68d2      	ldr	r2, [r2, #12]
 8001b62:	4311      	orrs	r1, r2
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	430b      	orrs	r3, r1
 8001b6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695a      	ldr	r2, [r3, #20]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	000186a0 	.word	0x000186a0
 8001bc4:	001e847f 	.word	0x001e847f
 8001bc8:	003d08ff 	.word	0x003d08ff
 8001bcc:	431bde83 	.word	0x431bde83
 8001bd0:	10624dd3 	.word	0x10624dd3

08001bd4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bf4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bfc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	2b10      	cmp	r3, #16
 8001c02:	d003      	beq.n	8001c0c <HAL_I2C_EV_IRQHandler+0x38>
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	2b40      	cmp	r3, #64	; 0x40
 8001c08:	f040 80c1 	bne.w	8001d8e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10d      	bne.n	8001c42 <HAL_I2C_EV_IRQHandler+0x6e>
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001c2c:	d003      	beq.n	8001c36 <HAL_I2C_EV_IRQHandler+0x62>
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001c34:	d101      	bne.n	8001c3a <HAL_I2C_EV_IRQHandler+0x66>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_I2C_EV_IRQHandler+0x68>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	f000 8132 	beq.w	8001ea6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00c      	beq.n	8001c66 <HAL_I2C_EV_IRQHandler+0x92>
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	0a5b      	lsrs	r3, r3, #9
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d006      	beq.n	8001c66 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f001 fc7b 	bl	8003554 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 fd83 	bl	800276a <I2C_Master_SB>
 8001c64:	e092      	b.n	8001d8c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	08db      	lsrs	r3, r3, #3
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d009      	beq.n	8001c86 <HAL_I2C_EV_IRQHandler+0xb2>
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	0a5b      	lsrs	r3, r3, #9
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 fdf9 	bl	8002876 <I2C_Master_ADD10>
 8001c84:	e082      	b.n	8001d8c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	085b      	lsrs	r3, r3, #1
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d009      	beq.n	8001ca6 <HAL_I2C_EV_IRQHandler+0xd2>
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	0a5b      	lsrs	r3, r3, #9
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 fe13 	bl	80028ca <I2C_Master_ADDR>
 8001ca4:	e072      	b.n	8001d8c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	089b      	lsrs	r3, r3, #2
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d03b      	beq.n	8001d2a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cc0:	f000 80f3 	beq.w	8001eaa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	09db      	lsrs	r3, r3, #7
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00f      	beq.n	8001cf0 <HAL_I2C_EV_IRQHandler+0x11c>
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	0a9b      	lsrs	r3, r3, #10
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d009      	beq.n	8001cf0 <HAL_I2C_EV_IRQHandler+0x11c>
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d103      	bne.n	8001cf0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f9f3 	bl	80020d4 <I2C_MasterTransmit_TXE>
 8001cee:	e04d      	b.n	8001d8c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80d6 	beq.w	8001eaa <HAL_I2C_EV_IRQHandler+0x2d6>
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	0a5b      	lsrs	r3, r3, #9
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 80cf 	beq.w	8001eaa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001d0c:	7bbb      	ldrb	r3, [r7, #14]
 8001d0e:	2b21      	cmp	r3, #33	; 0x21
 8001d10:	d103      	bne.n	8001d1a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 fa7a 	bl	800220c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d18:	e0c7      	b.n	8001eaa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	2b40      	cmp	r3, #64	; 0x40
 8001d1e:	f040 80c4 	bne.w	8001eaa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 fae8 	bl	80022f8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d28:	e0bf      	b.n	8001eaa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d38:	f000 80b7 	beq.w	8001eaa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	099b      	lsrs	r3, r3, #6
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00f      	beq.n	8001d68 <HAL_I2C_EV_IRQHandler+0x194>
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	0a9b      	lsrs	r3, r3, #10
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d009      	beq.n	8001d68 <HAL_I2C_EV_IRQHandler+0x194>
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d103      	bne.n	8001d68 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 fb5d 	bl	8002420 <I2C_MasterReceive_RXNE>
 8001d66:	e011      	b.n	8001d8c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 809a 	beq.w	8001eaa <HAL_I2C_EV_IRQHandler+0x2d6>
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	0a5b      	lsrs	r3, r3, #9
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8093 	beq.w	8001eaa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fc06 	bl	8002596 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d8a:	e08e      	b.n	8001eaa <HAL_I2C_EV_IRQHandler+0x2d6>
 8001d8c:	e08d      	b.n	8001eaa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d004      	beq.n	8001da0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	e007      	b.n	8001db0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	085b      	lsrs	r3, r3, #1
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d012      	beq.n	8001de2 <HAL_I2C_EV_IRQHandler+0x20e>
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	0a5b      	lsrs	r3, r3, #9
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00c      	beq.n	8001de2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001dd8:	69b9      	ldr	r1, [r7, #24]
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 ffc4 	bl	8002d68 <I2C_Slave_ADDR>
 8001de0:	e066      	b.n	8001eb0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	091b      	lsrs	r3, r3, #4
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d009      	beq.n	8001e02 <HAL_I2C_EV_IRQHandler+0x22e>
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	0a5b      	lsrs	r3, r3, #9
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 fffe 	bl	8002dfc <I2C_Slave_STOPF>
 8001e00:	e056      	b.n	8001eb0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e02:	7bbb      	ldrb	r3, [r7, #14]
 8001e04:	2b21      	cmp	r3, #33	; 0x21
 8001e06:	d002      	beq.n	8001e0e <HAL_I2C_EV_IRQHandler+0x23a>
 8001e08:	7bbb      	ldrb	r3, [r7, #14]
 8001e0a:	2b29      	cmp	r3, #41	; 0x29
 8001e0c:	d125      	bne.n	8001e5a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	09db      	lsrs	r3, r3, #7
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00f      	beq.n	8001e3a <HAL_I2C_EV_IRQHandler+0x266>
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	0a9b      	lsrs	r3, r3, #10
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d009      	beq.n	8001e3a <HAL_I2C_EV_IRQHandler+0x266>
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	089b      	lsrs	r3, r3, #2
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d103      	bne.n	8001e3a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 feda 	bl	8002bec <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e38:	e039      	b.n	8001eae <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d033      	beq.n	8001eae <HAL_I2C_EV_IRQHandler+0x2da>
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	0a5b      	lsrs	r3, r3, #9
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d02d      	beq.n	8001eae <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 ff07 	bl	8002c66 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e58:	e029      	b.n	8001eae <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	099b      	lsrs	r3, r3, #6
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00f      	beq.n	8001e86 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	0a9b      	lsrs	r3, r3, #10
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d103      	bne.n	8001e86 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 ff12 	bl	8002ca8 <I2C_SlaveReceive_RXNE>
 8001e84:	e014      	b.n	8001eb0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	089b      	lsrs	r3, r3, #2
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00e      	beq.n	8001eb0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	0a5b      	lsrs	r3, r3, #9
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d008      	beq.n	8001eb0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 ff40 	bl	8002d24 <I2C_SlaveReceive_BTF>
 8001ea4:	e004      	b.n	8001eb0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001ea6:	bf00      	nop
 8001ea8:	e002      	b.n	8001eb0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eaa:	bf00      	nop
 8001eac:	e000      	b.n	8001eb0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001eae:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001eb0:	3720      	adds	r7, #32
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b08a      	sub	sp, #40	; 0x28
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ed8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00e      	beq.n	8001f04 <HAL_I2C_ER_IRQHandler+0x4e>
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001f02:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	0a5b      	lsrs	r3, r3, #9
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00e      	beq.n	8001f2e <HAL_I2C_ER_IRQHandler+0x78>
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	0a1b      	lsrs	r3, r3, #8
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	f043 0302 	orr.w	r3, r3, #2
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001f2c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	0a9b      	lsrs	r3, r3, #10
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d03f      	beq.n	8001fba <HAL_I2C_ER_IRQHandler+0x104>
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d039      	beq.n	8001fba <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001f46:	7efb      	ldrb	r3, [r7, #27]
 8001f48:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f58:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001f60:	7ebb      	ldrb	r3, [r7, #26]
 8001f62:	2b20      	cmp	r3, #32
 8001f64:	d112      	bne.n	8001f8c <HAL_I2C_ER_IRQHandler+0xd6>
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10f      	bne.n	8001f8c <HAL_I2C_ER_IRQHandler+0xd6>
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	2b21      	cmp	r3, #33	; 0x21
 8001f70:	d008      	beq.n	8001f84 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001f72:	7cfb      	ldrb	r3, [r7, #19]
 8001f74:	2b29      	cmp	r3, #41	; 0x29
 8001f76:	d005      	beq.n	8001f84 <HAL_I2C_ER_IRQHandler+0xce>
 8001f78:	7cfb      	ldrb	r3, [r7, #19]
 8001f7a:	2b28      	cmp	r3, #40	; 0x28
 8001f7c:	d106      	bne.n	8001f8c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b21      	cmp	r3, #33	; 0x21
 8001f82:	d103      	bne.n	8001f8c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f001 f869 	bl	800305c <I2C_Slave_AF>
 8001f8a:	e016      	b.n	8001fba <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f94:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f9e:	7efb      	ldrb	r3, [r7, #27]
 8001fa0:	2b10      	cmp	r3, #16
 8001fa2:	d002      	beq.n	8001faa <HAL_I2C_ER_IRQHandler+0xf4>
 8001fa4:	7efb      	ldrb	r3, [r7, #27]
 8001fa6:	2b40      	cmp	r3, #64	; 0x40
 8001fa8:	d107      	bne.n	8001fba <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001fba:	6a3b      	ldr	r3, [r7, #32]
 8001fbc:	0adb      	lsrs	r3, r3, #11
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00e      	beq.n	8001fe4 <HAL_I2C_ER_IRQHandler+0x12e>
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d008      	beq.n	8001fe4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	f043 0308 	orr.w	r3, r3, #8
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001fe2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d008      	beq.n	8001ffc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f001 f8a0 	bl	800313c <I2C_ITError>
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	3728      	adds	r7, #40	; 0x28
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	70fb      	strb	r3, [r7, #3]
 8002060:	4613      	mov	r3, r2
 8002062:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d150      	bne.n	800219c <I2C_MasterTransmit_TXE+0xc8>
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	2b21      	cmp	r3, #33	; 0x21
 80020fe:	d14d      	bne.n	800219c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b08      	cmp	r3, #8
 8002104:	d01d      	beq.n	8002142 <I2C_MasterTransmit_TXE+0x6e>
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b20      	cmp	r3, #32
 800210a:	d01a      	beq.n	8002142 <I2C_MasterTransmit_TXE+0x6e>
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002112:	d016      	beq.n	8002142 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002122:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2211      	movs	r2, #17
 8002128:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2220      	movs	r2, #32
 8002136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff ff62 	bl	8002004 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002140:	e060      	b.n	8002204 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002150:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002160:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b40      	cmp	r3, #64	; 0x40
 800217a:	d107      	bne.n	800218c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ff7d 	bl	8002084 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800218a:	e03b      	b.n	8002204 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ff35 	bl	8002004 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800219a:	e033      	b.n	8002204 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	2b21      	cmp	r3, #33	; 0x21
 80021a0:	d005      	beq.n	80021ae <I2C_MasterTransmit_TXE+0xda>
 80021a2:	7bbb      	ldrb	r3, [r7, #14]
 80021a4:	2b40      	cmp	r3, #64	; 0x40
 80021a6:	d12d      	bne.n	8002204 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	2b22      	cmp	r3, #34	; 0x22
 80021ac:	d12a      	bne.n	8002204 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d108      	bne.n	80021ca <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80021c8:	e01c      	b.n	8002204 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b40      	cmp	r3, #64	; 0x40
 80021d4:	d103      	bne.n	80021de <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f88e 	bl	80022f8 <I2C_MemoryTransmit_TXE_BTF>
}
 80021dc:	e012      	b.n	8002204 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	781a      	ldrb	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002202:	e7ff      	b.n	8002204 <I2C_MasterTransmit_TXE+0x130>
 8002204:	bf00      	nop
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b21      	cmp	r3, #33	; 0x21
 8002224:	d164      	bne.n	80022f0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222a:	b29b      	uxth	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d012      	beq.n	8002256 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	781a      	ldrb	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224a:	b29b      	uxth	r3, r3
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002254:	e04c      	b.n	80022f0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2b08      	cmp	r3, #8
 800225a:	d01d      	beq.n	8002298 <I2C_MasterTransmit_BTF+0x8c>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b20      	cmp	r3, #32
 8002260:	d01a      	beq.n	8002298 <I2C_MasterTransmit_BTF+0x8c>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002268:	d016      	beq.n	8002298 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002278:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2211      	movs	r2, #17
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2220      	movs	r2, #32
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff feb7 	bl	8002004 <HAL_I2C_MasterTxCpltCallback>
}
 8002296:	e02b      	b.n	80022f0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80022a6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2220      	movs	r2, #32
 80022c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b40      	cmp	r3, #64	; 0x40
 80022d0:	d107      	bne.n	80022e2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff fed2 	bl	8002084 <HAL_I2C_MemTxCpltCallback>
}
 80022e0:	e006      	b.n	80022f0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff fe8a 	bl	8002004 <HAL_I2C_MasterTxCpltCallback>
}
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002306:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800230c:	2b00      	cmp	r3, #0
 800230e:	d11d      	bne.n	800234c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002314:	2b01      	cmp	r3, #1
 8002316:	d10b      	bne.n	8002330 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800231c:	b2da      	uxtb	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002328:	1c9a      	adds	r2, r3, #2
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800232e:	e073      	b.n	8002418 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002334:	b29b      	uxth	r3, r3
 8002336:	121b      	asrs	r3, r3, #8
 8002338:	b2da      	uxtb	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	651a      	str	r2, [r3, #80]	; 0x50
}
 800234a:	e065      	b.n	8002418 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002350:	2b01      	cmp	r3, #1
 8002352:	d10b      	bne.n	800236c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002358:	b2da      	uxtb	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	651a      	str	r2, [r3, #80]	; 0x50
}
 800236a:	e055      	b.n	8002418 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002370:	2b02      	cmp	r3, #2
 8002372:	d151      	bne.n	8002418 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	2b22      	cmp	r3, #34	; 0x22
 8002378:	d10d      	bne.n	8002396 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002388:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002394:	e040      	b.n	8002418 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d015      	beq.n	80023cc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	2b21      	cmp	r3, #33	; 0x21
 80023a4:	d112      	bne.n	80023cc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	781a      	ldrb	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80023ca:	e025      	b.n	8002418 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d120      	bne.n	8002418 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	2b21      	cmp	r3, #33	; 0x21
 80023da:	d11d      	bne.n	8002418 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023ea:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023fa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff fe36 	bl	8002084 <HAL_I2C_MemTxCpltCallback>
}
 8002418:	bf00      	nop
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b22      	cmp	r3, #34	; 0x22
 8002432:	f040 80ac 	bne.w	800258e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243a:	b29b      	uxth	r3, r3
 800243c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d921      	bls.n	8002488 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002460:	b29b      	uxth	r3, r3
 8002462:	3b01      	subs	r3, #1
 8002464:	b29a      	uxth	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246e:	b29b      	uxth	r3, r3
 8002470:	2b03      	cmp	r3, #3
 8002472:	f040 808c 	bne.w	800258e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002484:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002486:	e082      	b.n	800258e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	2b02      	cmp	r3, #2
 800248e:	d075      	beq.n	800257c <I2C_MasterReceive_RXNE+0x15c>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d002      	beq.n	800249c <I2C_MasterReceive_RXNE+0x7c>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d16f      	bne.n	800257c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f001 f827 	bl	80034f0 <I2C_WaitOnSTOPRequestThroughIT>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d142      	bne.n	800252e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024b6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024c6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691a      	ldr	r2, [r3, #16]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b40      	cmp	r3, #64	; 0x40
 8002500:	d10a      	bne.n	8002518 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff fdc1 	bl	8002098 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002516:	e03a      	b.n	800258e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2212      	movs	r2, #18
 8002524:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff fd76 	bl	8002018 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800252c:	e02f      	b.n	800258e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800253c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff fd99 	bl	80020ac <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800257a:	e008      	b.n	800258e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800258a:	605a      	str	r2, [r3, #4]
}
 800258c:	e7ff      	b.n	800258e <I2C_MasterReceive_RXNE+0x16e>
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d11b      	bne.n	80025e6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025bc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80025e4:	e0bd      	b.n	8002762 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d129      	bne.n	8002644 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fe:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2b04      	cmp	r3, #4
 8002604:	d00a      	beq.n	800261c <I2C_MasterReceive_BTF+0x86>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d007      	beq.n	800261c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800261a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691a      	ldr	r2, [r3, #16]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002642:	e08e      	b.n	8002762 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29b      	uxth	r3, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d176      	bne.n	800273c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d002      	beq.n	800265a <I2C_MasterReceive_BTF+0xc4>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b10      	cmp	r3, #16
 8002658:	d108      	bne.n	800266c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e019      	b.n	80026a0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b04      	cmp	r3, #4
 8002670:	d002      	beq.n	8002678 <I2C_MasterReceive_BTF+0xe2>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d108      	bne.n	800268a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	e00a      	b.n	80026a0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b10      	cmp	r3, #16
 800268e:	d007      	beq.n	80026a0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800269e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691a      	ldr	r2, [r3, #16]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80026fa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b40      	cmp	r3, #64	; 0x40
 800270e:	d10a      	bne.n	8002726 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff fcba 	bl	8002098 <HAL_I2C_MemRxCpltCallback>
}
 8002724:	e01d      	b.n	8002762 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2212      	movs	r2, #18
 8002732:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff fc6f 	bl	8002018 <HAL_I2C_MasterRxCpltCallback>
}
 800273a:	e012      	b.n	8002762 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b40      	cmp	r3, #64	; 0x40
 800277c:	d117      	bne.n	80027ae <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	b2db      	uxtb	r3, r3
 800278c:	461a      	mov	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002796:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002798:	e067      	b.n	800286a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	611a      	str	r2, [r3, #16]
}
 80027ac:	e05d      	b.n	800286a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027b6:	d133      	bne.n	8002820 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b21      	cmp	r3, #33	; 0x21
 80027c2:	d109      	bne.n	80027d8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027d4:	611a      	str	r2, [r3, #16]
 80027d6:	e008      	b.n	80027ea <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d004      	beq.n	80027fc <I2C_Master_SB+0x92>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d108      	bne.n	800280e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002800:	2b00      	cmp	r3, #0
 8002802:	d032      	beq.n	800286a <I2C_Master_SB+0x100>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280a:	2b00      	cmp	r3, #0
 800280c:	d02d      	beq.n	800286a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800281c:	605a      	str	r2, [r3, #4]
}
 800281e:	e024      	b.n	800286a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10e      	bne.n	8002846 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282c:	b29b      	uxth	r3, r3
 800282e:	11db      	asrs	r3, r3, #7
 8002830:	b2db      	uxtb	r3, r3
 8002832:	f003 0306 	and.w	r3, r3, #6
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f063 030f 	orn	r3, r3, #15
 800283c:	b2da      	uxtb	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	611a      	str	r2, [r3, #16]
}
 8002844:	e011      	b.n	800286a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800284a:	2b01      	cmp	r3, #1
 800284c:	d10d      	bne.n	800286a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	b29b      	uxth	r3, r3
 8002854:	11db      	asrs	r3, r3, #7
 8002856:	b2db      	uxtb	r3, r3
 8002858:	f003 0306 	and.w	r3, r3, #6
 800285c:	b2db      	uxtb	r3, r3
 800285e:	f063 030e 	orn	r3, r3, #14
 8002862:	b2da      	uxtb	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	611a      	str	r2, [r3, #16]
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	b2da      	uxtb	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288e:	2b00      	cmp	r3, #0
 8002890:	d004      	beq.n	800289c <I2C_Master_ADD10+0x26>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002898:	2b00      	cmp	r3, #0
 800289a:	d108      	bne.n	80028ae <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00c      	beq.n	80028be <I2C_Master_ADD10+0x48>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d007      	beq.n	80028be <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028bc:	605a      	str	r2, [r3, #4]
  }
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b091      	sub	sp, #68	; 0x44
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b22      	cmp	r3, #34	; 0x22
 80028f2:	f040 8169 	bne.w	8002bc8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10f      	bne.n	800291e <I2C_Master_ADDR+0x54>
 80028fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002902:	2b40      	cmp	r3, #64	; 0x40
 8002904:	d10b      	bne.n	800291e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002906:	2300      	movs	r3, #0
 8002908:	633b      	str	r3, [r7, #48]	; 0x30
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	633b      	str	r3, [r7, #48]	; 0x30
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	633b      	str	r3, [r7, #48]	; 0x30
 800291a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291c:	e160      	b.n	8002be0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002922:	2b00      	cmp	r3, #0
 8002924:	d11d      	bne.n	8002962 <I2C_Master_ADDR+0x98>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800292e:	d118      	bne.n	8002962 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002930:	2300      	movs	r3, #0
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002944:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002954:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	651a      	str	r2, [r3, #80]	; 0x50
 8002960:	e13e      	b.n	8002be0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d113      	bne.n	8002994 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800296c:	2300      	movs	r3, #0
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002980:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	e115      	b.n	8002bc0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b01      	cmp	r3, #1
 800299c:	f040 808a 	bne.w	8002ab4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80029a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029a6:	d137      	bne.n	8002a18 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029c6:	d113      	bne.n	80029f0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029d6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d8:	2300      	movs	r3, #0
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	e0e7      	b.n	8002bc0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f0:	2300      	movs	r3, #0
 80029f2:	623b      	str	r3, [r7, #32]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	623b      	str	r3, [r7, #32]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	623b      	str	r3, [r7, #32]
 8002a04:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	e0d3      	b.n	8002bc0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d02e      	beq.n	8002a7c <I2C_Master_ADDR+0x1b2>
 8002a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	d02b      	beq.n	8002a7c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a26:	2b12      	cmp	r3, #18
 8002a28:	d102      	bne.n	8002a30 <I2C_Master_ADDR+0x166>
 8002a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d125      	bne.n	8002a7c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d00e      	beq.n	8002a54 <I2C_Master_ADDR+0x18a>
 8002a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d00b      	beq.n	8002a54 <I2C_Master_ADDR+0x18a>
 8002a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3e:	2b10      	cmp	r3, #16
 8002a40:	d008      	beq.n	8002a54 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	e007      	b.n	8002a64 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a62:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	61fb      	str	r3, [r7, #28]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	e0a1      	b.n	8002bc0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a8a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61bb      	str	r3, [r7, #24]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	61bb      	str	r3, [r7, #24]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	e085      	b.n	8002bc0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d14d      	bne.n	8002b5a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d016      	beq.n	8002af2 <I2C_Master_ADDR+0x228>
 8002ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d013      	beq.n	8002af2 <I2C_Master_ADDR+0x228>
 8002aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002acc:	2b10      	cmp	r3, #16
 8002ace:	d010      	beq.n	8002af2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ade:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	e007      	b.n	8002b02 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b00:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b10:	d117      	bne.n	8002b42 <I2C_Master_ADDR+0x278>
 8002b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b18:	d00b      	beq.n	8002b32 <I2C_Master_ADDR+0x268>
 8002b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d008      	beq.n	8002b32 <I2C_Master_ADDR+0x268>
 8002b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d005      	beq.n	8002b32 <I2C_Master_ADDR+0x268>
 8002b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b28:	2b10      	cmp	r3, #16
 8002b2a:	d002      	beq.n	8002b32 <I2C_Master_ADDR+0x268>
 8002b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2e:	2b20      	cmp	r3, #32
 8002b30:	d107      	bne.n	8002b42 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b40:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	e032      	b.n	8002bc0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b68:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b78:	d117      	bne.n	8002baa <I2C_Master_ADDR+0x2e0>
 8002b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b80:	d00b      	beq.n	8002b9a <I2C_Master_ADDR+0x2d0>
 8002b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d008      	beq.n	8002b9a <I2C_Master_ADDR+0x2d0>
 8002b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d005      	beq.n	8002b9a <I2C_Master_ADDR+0x2d0>
 8002b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b90:	2b10      	cmp	r3, #16
 8002b92:	d002      	beq.n	8002b9a <I2C_Master_ADDR+0x2d0>
 8002b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b96:	2b20      	cmp	r3, #32
 8002b98:	d107      	bne.n	8002baa <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ba8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002baa:	2300      	movs	r3, #0
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002bc6:	e00b      	b.n	8002be0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
}
 8002bde:	e7ff      	b.n	8002be0 <I2C_Master_ADDR+0x316>
 8002be0:	bf00      	nop
 8002be2:	3744      	adds	r7, #68	; 0x44
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d02b      	beq.n	8002c5e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	781a      	ldrb	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d114      	bne.n	8002c5e <I2C_SlaveTransmit_TXE+0x72>
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	2b29      	cmp	r3, #41	; 0x29
 8002c38:	d111      	bne.n	8002c5e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c48:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2221      	movs	r2, #33	; 0x21
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2228      	movs	r2, #40	; 0x28
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff f9e7 	bl	800202c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002c5e:	bf00      	nop
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d011      	beq.n	8002c9c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	781a      	ldrb	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d02c      	beq.n	8002d1c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d114      	bne.n	8002d1c <I2C_SlaveReceive_RXNE+0x74>
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	2b2a      	cmp	r3, #42	; 0x2a
 8002cf6:	d111      	bne.n	8002d1c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d06:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2222      	movs	r2, #34	; 0x22
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2228      	movs	r2, #40	; 0x28
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff f992 	bl	8002040 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d012      	beq.n	8002d5c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d82:	2b28      	cmp	r3, #40	; 0x28
 8002d84:	d127      	bne.n	8002dd6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d94:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	089b      	lsrs	r3, r3, #2
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002da2:	2301      	movs	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	09db      	lsrs	r3, r3, #7
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d103      	bne.n	8002dba <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	81bb      	strh	r3, [r7, #12]
 8002db8:	e002      	b.n	8002dc0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002dc8:	89ba      	ldrh	r2, [r7, #12]
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	4619      	mov	r1, r3
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff f940 	bl	8002054 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002dd4:	e00e      	b.n	8002df4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002df4:	bf00      	nop
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e1a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e48:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e58:	d172      	bne.n	8002f40 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	2b22      	cmp	r3, #34	; 0x22
 8002e5e:	d002      	beq.n	8002e66 <I2C_Slave_STOPF+0x6a>
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	2b2a      	cmp	r3, #42	; 0x2a
 8002e64:	d135      	bne.n	8002ed2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f043 0204 	orr.w	r2, r3, #4
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e98:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe fba7 	bl	80015f2 <HAL_DMA_GetState>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d049      	beq.n	8002f3e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	4a69      	ldr	r2, [pc, #420]	; (8003054 <I2C_Slave_STOPF+0x258>)
 8002eb0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe fb79 	bl	80015ae <HAL_DMA_Abort_IT>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d03d      	beq.n	8002f3e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ed0:	e035      	b.n	8002f3e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f043 0204 	orr.w	r2, r3, #4
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f04:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fe fb71 	bl	80015f2 <HAL_DMA_GetState>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d014      	beq.n	8002f40 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1a:	4a4e      	ldr	r2, [pc, #312]	; (8003054 <I2C_Slave_STOPF+0x258>)
 8002f1c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe fb43 	bl	80015ae <HAL_DMA_Abort_IT>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d008      	beq.n	8002f40 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4798      	blx	r3
 8002f3c:	e000      	b.n	8002f40 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f3e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d03e      	beq.n	8002fc8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d112      	bne.n	8002f7e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691a      	ldr	r2, [r3, #16]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f88:	2b40      	cmp	r3, #64	; 0x40
 8002f8a:	d112      	bne.n	8002fb2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f043 0204 	orr.w	r2, r3, #4
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f8b3 	bl	800313c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002fd6:	e039      	b.n	800304c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	2b2a      	cmp	r3, #42	; 0x2a
 8002fdc:	d109      	bne.n	8002ff2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2228      	movs	r2, #40	; 0x28
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7ff f827 	bl	8002040 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b28      	cmp	r3, #40	; 0x28
 8002ffc:	d111      	bne.n	8003022 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a15      	ldr	r2, [pc, #84]	; (8003058 <I2C_Slave_STOPF+0x25c>)
 8003002:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff f828 	bl	8002070 <HAL_I2C_ListenCpltCallback>
}
 8003020:	e014      	b.n	800304c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	2b22      	cmp	r3, #34	; 0x22
 8003028:	d002      	beq.n	8003030 <I2C_Slave_STOPF+0x234>
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	2b22      	cmp	r3, #34	; 0x22
 800302e:	d10d      	bne.n	800304c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fe fffa 	bl	8002040 <HAL_I2C_SlaveRxCpltCallback>
}
 800304c:	bf00      	nop
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	080033a1 	.word	0x080033a1
 8003058:	ffff0000 	.word	0xffff0000

0800305c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b08      	cmp	r3, #8
 8003076:	d002      	beq.n	800307e <I2C_Slave_AF+0x22>
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b20      	cmp	r3, #32
 800307c:	d129      	bne.n	80030d2 <I2C_Slave_AF+0x76>
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	2b28      	cmp	r3, #40	; 0x28
 8003082:	d126      	bne.n	80030d2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a2c      	ldr	r2, [pc, #176]	; (8003138 <I2C_Slave_AF+0xdc>)
 8003088:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003098:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030a2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7fe ffd0 	bl	8002070 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80030d0:	e02e      	b.n	8003130 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b21      	cmp	r3, #33	; 0x21
 80030d6:	d126      	bne.n	8003126 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a17      	ldr	r2, [pc, #92]	; (8003138 <I2C_Slave_AF+0xdc>)
 80030dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2221      	movs	r2, #33	; 0x21
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003102:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800310c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800311c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fe ff84 	bl	800202c <HAL_I2C_SlaveTxCpltCallback>
}
 8003124:	e004      	b.n	8003130 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800312e:	615a      	str	r2, [r3, #20]
}
 8003130:	bf00      	nop
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	ffff0000 	.word	0xffff0000

0800313c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800314a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003152:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003154:	7bbb      	ldrb	r3, [r7, #14]
 8003156:	2b10      	cmp	r3, #16
 8003158:	d002      	beq.n	8003160 <I2C_ITError+0x24>
 800315a:	7bbb      	ldrb	r3, [r7, #14]
 800315c:	2b40      	cmp	r3, #64	; 0x40
 800315e:	d10a      	bne.n	8003176 <I2C_ITError+0x3a>
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	2b22      	cmp	r3, #34	; 0x22
 8003164:	d107      	bne.n	8003176 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003174:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800317c:	2b28      	cmp	r3, #40	; 0x28
 800317e:	d107      	bne.n	8003190 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2228      	movs	r2, #40	; 0x28
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800318e:	e015      	b.n	80031bc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800319a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800319e:	d00a      	beq.n	80031b6 <I2C_ITError+0x7a>
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	2b60      	cmp	r3, #96	; 0x60
 80031a4:	d007      	beq.n	80031b6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ca:	d162      	bne.n	8003292 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031da:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d020      	beq.n	800322c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ee:	4a6a      	ldr	r2, [pc, #424]	; (8003398 <I2C_ITError+0x25c>)
 80031f0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe f9d9 	bl	80015ae <HAL_DMA_Abort_IT>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 8089 	beq.w	8003316 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003226:	4610      	mov	r0, r2
 8003228:	4798      	blx	r3
 800322a:	e074      	b.n	8003316 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	4a59      	ldr	r2, [pc, #356]	; (8003398 <I2C_ITError+0x25c>)
 8003232:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003238:	4618      	mov	r0, r3
 800323a:	f7fe f9b8 	bl	80015ae <HAL_DMA_Abort_IT>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d068      	beq.n	8003316 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324e:	2b40      	cmp	r3, #64	; 0x40
 8003250:	d10b      	bne.n	800326a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0201 	bic.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800328c:	4610      	mov	r0, r2
 800328e:	4798      	blx	r3
 8003290:	e041      	b.n	8003316 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b60      	cmp	r3, #96	; 0x60
 800329c:	d125      	bne.n	80032ea <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	2b40      	cmp	r3, #64	; 0x40
 80032b8:	d10b      	bne.n	80032d2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fe feec 	bl	80020c0 <HAL_I2C_AbortCpltCallback>
 80032e8:	e015      	b.n	8003316 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f4:	2b40      	cmp	r3, #64	; 0x40
 80032f6:	d10b      	bne.n	8003310 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691a      	ldr	r2, [r3, #16]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7fe fecb 	bl	80020ac <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10e      	bne.n	8003344 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800332c:	2b00      	cmp	r3, #0
 800332e:	d109      	bne.n	8003344 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003336:	2b00      	cmp	r3, #0
 8003338:	d104      	bne.n	8003344 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003340:	2b00      	cmp	r3, #0
 8003342:	d007      	beq.n	8003354 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003352:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b04      	cmp	r3, #4
 8003366:	d113      	bne.n	8003390 <I2C_ITError+0x254>
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b28      	cmp	r3, #40	; 0x28
 800336c:	d110      	bne.n	8003390 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a0a      	ldr	r2, [pc, #40]	; (800339c <I2C_ITError+0x260>)
 8003372:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fe fe70 	bl	8002070 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003390:	bf00      	nop
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	080033a1 	.word	0x080033a1
 800339c:	ffff0000 	.word	0xffff0000

080033a0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033ba:	4b4b      	ldr	r3, [pc, #300]	; (80034e8 <I2C_DMAAbort+0x148>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	08db      	lsrs	r3, r3, #3
 80033c0:	4a4a      	ldr	r2, [pc, #296]	; (80034ec <I2C_DMAAbort+0x14c>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	0a1a      	lsrs	r2, r3, #8
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	00da      	lsls	r2, r3, #3
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f043 0220 	orr.w	r2, r3, #32
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80033e6:	e00a      	b.n	80033fe <I2C_DMAAbort+0x5e>
    }
    count--;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033fc:	d0ea      	beq.n	80033d4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340a:	2200      	movs	r2, #0
 800340c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341a:	2200      	movs	r2, #0
 800341c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800342c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2200      	movs	r2, #0
 8003432:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003440:	2200      	movs	r2, #0
 8003442:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003450:	2200      	movs	r2, #0
 8003452:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b60      	cmp	r3, #96	; 0x60
 800346e:	d10e      	bne.n	800348e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2200      	movs	r2, #0
 8003484:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003486:	6978      	ldr	r0, [r7, #20]
 8003488:	f7fe fe1a 	bl	80020c0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800348c:	e027      	b.n	80034de <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800348e:	7cfb      	ldrb	r3, [r7, #19]
 8003490:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003494:	2b28      	cmp	r3, #40	; 0x28
 8003496:	d117      	bne.n	80034c8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2200      	movs	r2, #0
 80034bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2228      	movs	r2, #40	; 0x28
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80034c6:	e007      	b.n	80034d8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80034d8:	6978      	ldr	r0, [r7, #20]
 80034da:	f7fe fde7 	bl	80020ac <HAL_I2C_ErrorCallback>
}
 80034de:	bf00      	nop
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000000 	.word	0x20000000
 80034ec:	14f8b589 	.word	0x14f8b589

080034f0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80034fc:	4b13      	ldr	r3, [pc, #76]	; (800354c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	08db      	lsrs	r3, r3, #3
 8003502:	4a13      	ldr	r2, [pc, #76]	; (8003550 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003504:	fba2 2303 	umull	r2, r3, r2, r3
 8003508:	0a1a      	lsrs	r2, r3, #8
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	3b01      	subs	r3, #1
 8003516:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d107      	bne.n	800352e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f043 0220 	orr.w	r2, r3, #32
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e008      	b.n	8003540 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800353c:	d0e9      	beq.n	8003512 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	20000000 	.word	0x20000000
 8003550:	14f8b589 	.word	0x14f8b589

08003554 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003564:	d103      	bne.n	800356e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800356c:	e007      	b.n	800357e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003576:	d102      	bne.n	800357e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2208      	movs	r2, #8
 800357c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
	...

0800358c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e267      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d075      	beq.n	8003696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035aa:	4b88      	ldr	r3, [pc, #544]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d00c      	beq.n	80035d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b6:	4b85      	ldr	r3, [pc, #532]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d112      	bne.n	80035e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035c2:	4b82      	ldr	r3, [pc, #520]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ce:	d10b      	bne.n	80035e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d0:	4b7e      	ldr	r3, [pc, #504]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d05b      	beq.n	8003694 <HAL_RCC_OscConfig+0x108>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d157      	bne.n	8003694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e242      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f0:	d106      	bne.n	8003600 <HAL_RCC_OscConfig+0x74>
 80035f2:	4b76      	ldr	r3, [pc, #472]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a75      	ldr	r2, [pc, #468]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80035f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	e01d      	b.n	800363c <HAL_RCC_OscConfig+0xb0>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003608:	d10c      	bne.n	8003624 <HAL_RCC_OscConfig+0x98>
 800360a:	4b70      	ldr	r3, [pc, #448]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a6f      	ldr	r2, [pc, #444]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 8003610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4b6d      	ldr	r3, [pc, #436]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a6c      	ldr	r2, [pc, #432]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 800361c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	e00b      	b.n	800363c <HAL_RCC_OscConfig+0xb0>
 8003624:	4b69      	ldr	r3, [pc, #420]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a68      	ldr	r2, [pc, #416]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 800362a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	4b66      	ldr	r3, [pc, #408]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a65      	ldr	r2, [pc, #404]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 8003636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800363a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d013      	beq.n	800366c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003644:	f7fd fe26 	bl	8001294 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800364c:	f7fd fe22 	bl	8001294 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b64      	cmp	r3, #100	; 0x64
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e207      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365e:	4b5b      	ldr	r3, [pc, #364]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0xc0>
 800366a:	e014      	b.n	8003696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366c:	f7fd fe12 	bl	8001294 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003674:	f7fd fe0e 	bl	8001294 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	; 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e1f3      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003686:	4b51      	ldr	r3, [pc, #324]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0xe8>
 8003692:	e000      	b.n	8003696 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d063      	beq.n	800376a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036a2:	4b4a      	ldr	r3, [pc, #296]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00b      	beq.n	80036c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ae:	4b47      	ldr	r3, [pc, #284]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d11c      	bne.n	80036f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ba:	4b44      	ldr	r3, [pc, #272]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d116      	bne.n	80036f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c6:	4b41      	ldr	r3, [pc, #260]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <HAL_RCC_OscConfig+0x152>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d001      	beq.n	80036de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e1c7      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036de:	4b3b      	ldr	r3, [pc, #236]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	4937      	ldr	r1, [pc, #220]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f2:	e03a      	b.n	800376a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d020      	beq.n	800373e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036fc:	4b34      	ldr	r3, [pc, #208]	; (80037d0 <HAL_RCC_OscConfig+0x244>)
 80036fe:	2201      	movs	r2, #1
 8003700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003702:	f7fd fdc7 	bl	8001294 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800370a:	f7fd fdc3 	bl	8001294 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e1a8      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371c:	4b2b      	ldr	r3, [pc, #172]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0f0      	beq.n	800370a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003728:	4b28      	ldr	r3, [pc, #160]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4925      	ldr	r1, [pc, #148]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 8003738:	4313      	orrs	r3, r2
 800373a:	600b      	str	r3, [r1, #0]
 800373c:	e015      	b.n	800376a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800373e:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <HAL_RCC_OscConfig+0x244>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fd fda6 	bl	8001294 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800374c:	f7fd fda2 	bl	8001294 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e187      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375e:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d036      	beq.n	80037e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d016      	beq.n	80037ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800377e:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <HAL_RCC_OscConfig+0x248>)
 8003780:	2201      	movs	r2, #1
 8003782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7fd fd86 	bl	8001294 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800378c:	f7fd fd82 	bl	8001294 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e167      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379e:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <HAL_RCC_OscConfig+0x240>)
 80037a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x200>
 80037aa:	e01b      	b.n	80037e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ac:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <HAL_RCC_OscConfig+0x248>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b2:	f7fd fd6f 	bl	8001294 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b8:	e00e      	b.n	80037d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ba:	f7fd fd6b 	bl	8001294 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d907      	bls.n	80037d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e150      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
 80037cc:	40023800 	.word	0x40023800
 80037d0:	42470000 	.word	0x42470000
 80037d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d8:	4b88      	ldr	r3, [pc, #544]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 80037da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1ea      	bne.n	80037ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 8097 	beq.w	8003920 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037f2:	2300      	movs	r3, #0
 80037f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f6:	4b81      	ldr	r3, [pc, #516]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10f      	bne.n	8003822 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	4b7d      	ldr	r3, [pc, #500]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	4a7c      	ldr	r2, [pc, #496]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 800380c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003810:	6413      	str	r3, [r2, #64]	; 0x40
 8003812:	4b7a      	ldr	r3, [pc, #488]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381a:	60bb      	str	r3, [r7, #8]
 800381c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381e:	2301      	movs	r3, #1
 8003820:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003822:	4b77      	ldr	r3, [pc, #476]	; (8003a00 <HAL_RCC_OscConfig+0x474>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382a:	2b00      	cmp	r3, #0
 800382c:	d118      	bne.n	8003860 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800382e:	4b74      	ldr	r3, [pc, #464]	; (8003a00 <HAL_RCC_OscConfig+0x474>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a73      	ldr	r2, [pc, #460]	; (8003a00 <HAL_RCC_OscConfig+0x474>)
 8003834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800383a:	f7fd fd2b 	bl	8001294 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003842:	f7fd fd27 	bl	8001294 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e10c      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003854:	4b6a      	ldr	r3, [pc, #424]	; (8003a00 <HAL_RCC_OscConfig+0x474>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f0      	beq.n	8003842 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d106      	bne.n	8003876 <HAL_RCC_OscConfig+0x2ea>
 8003868:	4b64      	ldr	r3, [pc, #400]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 800386a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386c:	4a63      	ldr	r2, [pc, #396]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	6713      	str	r3, [r2, #112]	; 0x70
 8003874:	e01c      	b.n	80038b0 <HAL_RCC_OscConfig+0x324>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b05      	cmp	r3, #5
 800387c:	d10c      	bne.n	8003898 <HAL_RCC_OscConfig+0x30c>
 800387e:	4b5f      	ldr	r3, [pc, #380]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003882:	4a5e      	ldr	r2, [pc, #376]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 8003884:	f043 0304 	orr.w	r3, r3, #4
 8003888:	6713      	str	r3, [r2, #112]	; 0x70
 800388a:	4b5c      	ldr	r3, [pc, #368]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388e:	4a5b      	ldr	r2, [pc, #364]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 8003890:	f043 0301 	orr.w	r3, r3, #1
 8003894:	6713      	str	r3, [r2, #112]	; 0x70
 8003896:	e00b      	b.n	80038b0 <HAL_RCC_OscConfig+0x324>
 8003898:	4b58      	ldr	r3, [pc, #352]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389c:	4a57      	ldr	r2, [pc, #348]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 800389e:	f023 0301 	bic.w	r3, r3, #1
 80038a2:	6713      	str	r3, [r2, #112]	; 0x70
 80038a4:	4b55      	ldr	r3, [pc, #340]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 80038a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a8:	4a54      	ldr	r2, [pc, #336]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 80038aa:	f023 0304 	bic.w	r3, r3, #4
 80038ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d015      	beq.n	80038e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b8:	f7fd fcec 	bl	8001294 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038be:	e00a      	b.n	80038d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038c0:	f7fd fce8 	bl	8001294 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e0cb      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d6:	4b49      	ldr	r3, [pc, #292]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0ee      	beq.n	80038c0 <HAL_RCC_OscConfig+0x334>
 80038e2:	e014      	b.n	800390e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e4:	f7fd fcd6 	bl	8001294 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ea:	e00a      	b.n	8003902 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ec:	f7fd fcd2 	bl	8001294 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e0b5      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003902:	4b3e      	ldr	r3, [pc, #248]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1ee      	bne.n	80038ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800390e:	7dfb      	ldrb	r3, [r7, #23]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d105      	bne.n	8003920 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003914:	4b39      	ldr	r3, [pc, #228]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	4a38      	ldr	r2, [pc, #224]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 800391a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800391e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 80a1 	beq.w	8003a6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800392a:	4b34      	ldr	r3, [pc, #208]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b08      	cmp	r3, #8
 8003934:	d05c      	beq.n	80039f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d141      	bne.n	80039c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393e:	4b31      	ldr	r3, [pc, #196]	; (8003a04 <HAL_RCC_OscConfig+0x478>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7fd fca6 	bl	8001294 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800394c:	f7fd fca2 	bl	8001294 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e087      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395e:	4b27      	ldr	r3, [pc, #156]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69da      	ldr	r2, [r3, #28]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	019b      	lsls	r3, r3, #6
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003980:	085b      	lsrs	r3, r3, #1
 8003982:	3b01      	subs	r3, #1
 8003984:	041b      	lsls	r3, r3, #16
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	061b      	lsls	r3, r3, #24
 800398e:	491b      	ldr	r1, [pc, #108]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 8003990:	4313      	orrs	r3, r2
 8003992:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003994:	4b1b      	ldr	r3, [pc, #108]	; (8003a04 <HAL_RCC_OscConfig+0x478>)
 8003996:	2201      	movs	r2, #1
 8003998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399a:	f7fd fc7b 	bl	8001294 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a2:	f7fd fc77 	bl	8001294 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e05c      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b4:	4b11      	ldr	r3, [pc, #68]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0f0      	beq.n	80039a2 <HAL_RCC_OscConfig+0x416>
 80039c0:	e054      	b.n	8003a6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c2:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <HAL_RCC_OscConfig+0x478>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c8:	f7fd fc64 	bl	8001294 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d0:	f7fd fc60 	bl	8001294 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e045      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e2:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HAL_RCC_OscConfig+0x470>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f0      	bne.n	80039d0 <HAL_RCC_OscConfig+0x444>
 80039ee:	e03d      	b.n	8003a6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d107      	bne.n	8003a08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e038      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40007000 	.word	0x40007000
 8003a04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a08:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <HAL_RCC_OscConfig+0x4ec>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d028      	beq.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d121      	bne.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d11a      	bne.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a38:	4013      	ands	r3, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d111      	bne.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	085b      	lsrs	r3, r3, #1
 8003a50:	3b01      	subs	r3, #1
 8003a52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d107      	bne.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e000      	b.n	8003a6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40023800 	.word	0x40023800

08003a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0cc      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a90:	4b68      	ldr	r3, [pc, #416]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d90c      	bls.n	8003ab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9e:	4b65      	ldr	r3, [pc, #404]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa6:	4b63      	ldr	r3, [pc, #396]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0b8      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ad0:	4b59      	ldr	r3, [pc, #356]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	4a58      	ldr	r2, [pc, #352]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ada:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ae8:	4b53      	ldr	r3, [pc, #332]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4a52      	ldr	r2, [pc, #328]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003af2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af4:	4b50      	ldr	r3, [pc, #320]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	494d      	ldr	r1, [pc, #308]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d044      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d107      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1a:	4b47      	ldr	r3, [pc, #284]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d119      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e07f      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d003      	beq.n	8003b3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d107      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3a:	4b3f      	ldr	r3, [pc, #252]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e06f      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b4a:	4b3b      	ldr	r3, [pc, #236]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e067      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b5a:	4b37      	ldr	r3, [pc, #220]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f023 0203 	bic.w	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4934      	ldr	r1, [pc, #208]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b6c:	f7fd fb92 	bl	8001294 <HAL_GetTick>
 8003b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b74:	f7fd fb8e 	bl	8001294 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e04f      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8a:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 020c 	and.w	r2, r3, #12
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d1eb      	bne.n	8003b74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b9c:	4b25      	ldr	r3, [pc, #148]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d20c      	bcs.n	8003bc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003baa:	4b22      	ldr	r3, [pc, #136]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e032      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd0:	4b19      	ldr	r3, [pc, #100]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4916      	ldr	r1, [pc, #88]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bee:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	490e      	ldr	r1, [pc, #56]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c02:	f000 f821 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8003c06:	4602      	mov	r2, r0
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	091b      	lsrs	r3, r3, #4
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	490a      	ldr	r1, [pc, #40]	; (8003c3c <HAL_RCC_ClockConfig+0x1c0>)
 8003c14:	5ccb      	ldrb	r3, [r1, r3]
 8003c16:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1a:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c1e:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <HAL_RCC_ClockConfig+0x1c8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fd faf2 	bl	800120c <HAL_InitTick>

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40023c00 	.word	0x40023c00
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	08005918 	.word	0x08005918
 8003c40:	20000000 	.word	0x20000000
 8003c44:	20000004 	.word	0x20000004

08003c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c4c:	b090      	sub	sp, #64	; 0x40
 8003c4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	637b      	str	r3, [r7, #52]	; 0x34
 8003c54:	2300      	movs	r3, #0
 8003c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c58:	2300      	movs	r3, #0
 8003c5a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c60:	4b59      	ldr	r3, [pc, #356]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 030c 	and.w	r3, r3, #12
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d00d      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0x40>
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	f200 80a1 	bhi.w	8003db4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0x34>
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d003      	beq.n	8003c82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c7a:	e09b      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c7c:	4b53      	ldr	r3, [pc, #332]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x184>)
 8003c7e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c80:	e09b      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c82:	4b53      	ldr	r3, [pc, #332]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c86:	e098      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c88:	4b4f      	ldr	r3, [pc, #316]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c90:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c92:	4b4d      	ldr	r3, [pc, #308]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d028      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c9e:	4b4a      	ldr	r3, [pc, #296]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	099b      	lsrs	r3, r3, #6
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	623b      	str	r3, [r7, #32]
 8003ca8:	627a      	str	r2, [r7, #36]	; 0x24
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	4b47      	ldr	r3, [pc, #284]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cb4:	fb03 f201 	mul.w	r2, r3, r1
 8003cb8:	2300      	movs	r3, #0
 8003cba:	fb00 f303 	mul.w	r3, r0, r3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	4a43      	ldr	r2, [pc, #268]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cc2:	fba0 1202 	umull	r1, r2, r0, r2
 8003cc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cc8:	460a      	mov	r2, r1
 8003cca:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cce:	4413      	add	r3, r2
 8003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	61fa      	str	r2, [r7, #28]
 8003cda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ce2:	f7fc fa79 	bl	80001d8 <__aeabi_uldivmod>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4613      	mov	r3, r2
 8003cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cee:	e053      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cf0:	4b35      	ldr	r3, [pc, #212]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	099b      	lsrs	r3, r3, #6
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	617a      	str	r2, [r7, #20]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d02:	f04f 0b00 	mov.w	fp, #0
 8003d06:	4652      	mov	r2, sl
 8003d08:	465b      	mov	r3, fp
 8003d0a:	f04f 0000 	mov.w	r0, #0
 8003d0e:	f04f 0100 	mov.w	r1, #0
 8003d12:	0159      	lsls	r1, r3, #5
 8003d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d18:	0150      	lsls	r0, r2, #5
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	ebb2 080a 	subs.w	r8, r2, sl
 8003d22:	eb63 090b 	sbc.w	r9, r3, fp
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d3a:	ebb2 0408 	subs.w	r4, r2, r8
 8003d3e:	eb63 0509 	sbc.w	r5, r3, r9
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	00eb      	lsls	r3, r5, #3
 8003d4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d50:	00e2      	lsls	r2, r4, #3
 8003d52:	4614      	mov	r4, r2
 8003d54:	461d      	mov	r5, r3
 8003d56:	eb14 030a 	adds.w	r3, r4, sl
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	eb45 030b 	adc.w	r3, r5, fp
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d6e:	4629      	mov	r1, r5
 8003d70:	028b      	lsls	r3, r1, #10
 8003d72:	4621      	mov	r1, r4
 8003d74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d78:	4621      	mov	r1, r4
 8003d7a:	028a      	lsls	r2, r1, #10
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	4619      	mov	r1, r3
 8003d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d82:	2200      	movs	r2, #0
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	60fa      	str	r2, [r7, #12]
 8003d88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d8c:	f7fc fa24 	bl	80001d8 <__aeabi_uldivmod>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4613      	mov	r3, r2
 8003d96:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	0c1b      	lsrs	r3, r3, #16
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	3301      	adds	r3, #1
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003da8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003db2:	e002      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003db4:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x184>)
 8003db6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3740      	adds	r7, #64	; 0x40
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	00f42400 	.word	0x00f42400
 8003dd0:	017d7840 	.word	0x017d7840

08003dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dda:	681b      	ldr	r3, [r3, #0]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20000000 	.word	0x20000000

08003dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003df0:	f7ff fff0 	bl	8003dd4 <HAL_RCC_GetHCLKFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	0a9b      	lsrs	r3, r3, #10
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4903      	ldr	r1, [pc, #12]	; (8003e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	08005928 	.word	0x08005928

08003e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e18:	f7ff ffdc 	bl	8003dd4 <HAL_RCC_GetHCLKFreq>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	0b5b      	lsrs	r3, r3, #13
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	4903      	ldr	r1, [pc, #12]	; (8003e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e2a:	5ccb      	ldrb	r3, [r1, r3]
 8003e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40023800 	.word	0x40023800
 8003e38:	08005928 	.word	0x08005928

08003e3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e07b      	b.n	8003f46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d108      	bne.n	8003e68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e5e:	d009      	beq.n	8003e74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	61da      	str	r2, [r3, #28]
 8003e66:	e005      	b.n	8003e74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d106      	bne.n	8003e94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fc ff9e 	bl	8000dd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eaa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef8:	ea42 0103 	orr.w	r1, r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	0c1b      	lsrs	r3, r3, #16
 8003f12:	f003 0104 	and.w	r1, r3, #4
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	f003 0210 	and.w	r2, r3, #16
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	69da      	ldr	r2, [r3, #28]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e041      	b.n	8003fe4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d106      	bne.n	8003f7a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7fc ff93 	bl	8000ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	f000 fa11 	bl	80043b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e041      	b.n	8004082 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d106      	bne.n	8004018 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f839 	bl	800408a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3304      	adds	r3, #4
 8004028:	4619      	mov	r1, r3
 800402a:	4610      	mov	r0, r2
 800402c:	f000 f9c2 	bl	80043b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
	...

080040a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e0ae      	b.n	800421c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b0c      	cmp	r3, #12
 80040ca:	f200 809f 	bhi.w	800420c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80040ce:	a201      	add	r2, pc, #4	; (adr r2, 80040d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d4:	08004109 	.word	0x08004109
 80040d8:	0800420d 	.word	0x0800420d
 80040dc:	0800420d 	.word	0x0800420d
 80040e0:	0800420d 	.word	0x0800420d
 80040e4:	08004149 	.word	0x08004149
 80040e8:	0800420d 	.word	0x0800420d
 80040ec:	0800420d 	.word	0x0800420d
 80040f0:	0800420d 	.word	0x0800420d
 80040f4:	0800418b 	.word	0x0800418b
 80040f8:	0800420d 	.word	0x0800420d
 80040fc:	0800420d 	.word	0x0800420d
 8004100:	0800420d 	.word	0x0800420d
 8004104:	080041cb 	.word	0x080041cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68b9      	ldr	r1, [r7, #8]
 800410e:	4618      	mov	r0, r3
 8004110:	f000 f9d0 	bl	80044b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699a      	ldr	r2, [r3, #24]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0208 	orr.w	r2, r2, #8
 8004122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0204 	bic.w	r2, r2, #4
 8004132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6999      	ldr	r1, [r3, #24]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	691a      	ldr	r2, [r3, #16]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	619a      	str	r2, [r3, #24]
      break;
 8004146:	e064      	b.n	8004212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68b9      	ldr	r1, [r7, #8]
 800414e:	4618      	mov	r0, r3
 8004150:	f000 fa16 	bl	8004580 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699a      	ldr	r2, [r3, #24]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6999      	ldr	r1, [r3, #24]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	021a      	lsls	r2, r3, #8
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	619a      	str	r2, [r3, #24]
      break;
 8004188:	e043      	b.n	8004212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68b9      	ldr	r1, [r7, #8]
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fa61 	bl	8004658 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69da      	ldr	r2, [r3, #28]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0208 	orr.w	r2, r2, #8
 80041a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69da      	ldr	r2, [r3, #28]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0204 	bic.w	r2, r2, #4
 80041b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	69d9      	ldr	r1, [r3, #28]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	61da      	str	r2, [r3, #28]
      break;
 80041c8:	e023      	b.n	8004212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68b9      	ldr	r1, [r7, #8]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 faab 	bl	800472c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69da      	ldr	r2, [r3, #28]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69da      	ldr	r2, [r3, #28]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69d9      	ldr	r1, [r3, #28]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	021a      	lsls	r2, r3, #8
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	61da      	str	r2, [r3, #28]
      break;
 800420a:	e002      	b.n	8004212 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	75fb      	strb	r3, [r7, #23]
      break;
 8004210:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800421a:	7dfb      	ldrb	r3, [r7, #23]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_TIM_ConfigClockSource+0x1c>
 800423c:	2302      	movs	r3, #2
 800423e:	e0b4      	b.n	80043aa <HAL_TIM_ConfigClockSource+0x186>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800425e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004266:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004278:	d03e      	beq.n	80042f8 <HAL_TIM_ConfigClockSource+0xd4>
 800427a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427e:	f200 8087 	bhi.w	8004390 <HAL_TIM_ConfigClockSource+0x16c>
 8004282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004286:	f000 8086 	beq.w	8004396 <HAL_TIM_ConfigClockSource+0x172>
 800428a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428e:	d87f      	bhi.n	8004390 <HAL_TIM_ConfigClockSource+0x16c>
 8004290:	2b70      	cmp	r3, #112	; 0x70
 8004292:	d01a      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0xa6>
 8004294:	2b70      	cmp	r3, #112	; 0x70
 8004296:	d87b      	bhi.n	8004390 <HAL_TIM_ConfigClockSource+0x16c>
 8004298:	2b60      	cmp	r3, #96	; 0x60
 800429a:	d050      	beq.n	800433e <HAL_TIM_ConfigClockSource+0x11a>
 800429c:	2b60      	cmp	r3, #96	; 0x60
 800429e:	d877      	bhi.n	8004390 <HAL_TIM_ConfigClockSource+0x16c>
 80042a0:	2b50      	cmp	r3, #80	; 0x50
 80042a2:	d03c      	beq.n	800431e <HAL_TIM_ConfigClockSource+0xfa>
 80042a4:	2b50      	cmp	r3, #80	; 0x50
 80042a6:	d873      	bhi.n	8004390 <HAL_TIM_ConfigClockSource+0x16c>
 80042a8:	2b40      	cmp	r3, #64	; 0x40
 80042aa:	d058      	beq.n	800435e <HAL_TIM_ConfigClockSource+0x13a>
 80042ac:	2b40      	cmp	r3, #64	; 0x40
 80042ae:	d86f      	bhi.n	8004390 <HAL_TIM_ConfigClockSource+0x16c>
 80042b0:	2b30      	cmp	r3, #48	; 0x30
 80042b2:	d064      	beq.n	800437e <HAL_TIM_ConfigClockSource+0x15a>
 80042b4:	2b30      	cmp	r3, #48	; 0x30
 80042b6:	d86b      	bhi.n	8004390 <HAL_TIM_ConfigClockSource+0x16c>
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d060      	beq.n	800437e <HAL_TIM_ConfigClockSource+0x15a>
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d867      	bhi.n	8004390 <HAL_TIM_ConfigClockSource+0x16c>
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d05c      	beq.n	800437e <HAL_TIM_ConfigClockSource+0x15a>
 80042c4:	2b10      	cmp	r3, #16
 80042c6:	d05a      	beq.n	800437e <HAL_TIM_ConfigClockSource+0x15a>
 80042c8:	e062      	b.n	8004390 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6899      	ldr	r1, [r3, #8]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f000 faf1 	bl	80048c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	609a      	str	r2, [r3, #8]
      break;
 80042f6:	e04f      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6818      	ldr	r0, [r3, #0]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	6899      	ldr	r1, [r3, #8]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f000 fada 	bl	80048c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800431a:	609a      	str	r2, [r3, #8]
      break;
 800431c:	e03c      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6859      	ldr	r1, [r3, #4]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	461a      	mov	r2, r3
 800432c:	f000 fa4e 	bl	80047cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2150      	movs	r1, #80	; 0x50
 8004336:	4618      	mov	r0, r3
 8004338:	f000 faa7 	bl	800488a <TIM_ITRx_SetConfig>
      break;
 800433c:	e02c      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	6859      	ldr	r1, [r3, #4]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	461a      	mov	r2, r3
 800434c:	f000 fa6d 	bl	800482a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2160      	movs	r1, #96	; 0x60
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fa97 	bl	800488a <TIM_ITRx_SetConfig>
      break;
 800435c:	e01c      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	6859      	ldr	r1, [r3, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	461a      	mov	r2, r3
 800436c:	f000 fa2e 	bl	80047cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2140      	movs	r1, #64	; 0x40
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fa87 	bl	800488a <TIM_ITRx_SetConfig>
      break;
 800437c:	e00c      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4619      	mov	r1, r3
 8004388:	4610      	mov	r0, r2
 800438a:	f000 fa7e 	bl	800488a <TIM_ITRx_SetConfig>
      break;
 800438e:	e003      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
      break;
 8004394:	e000      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004396:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a34      	ldr	r2, [pc, #208]	; (8004498 <TIM_Base_SetConfig+0xe4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00f      	beq.n	80043ec <TIM_Base_SetConfig+0x38>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d2:	d00b      	beq.n	80043ec <TIM_Base_SetConfig+0x38>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a31      	ldr	r2, [pc, #196]	; (800449c <TIM_Base_SetConfig+0xe8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d007      	beq.n	80043ec <TIM_Base_SetConfig+0x38>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a30      	ldr	r2, [pc, #192]	; (80044a0 <TIM_Base_SetConfig+0xec>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <TIM_Base_SetConfig+0x38>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a2f      	ldr	r2, [pc, #188]	; (80044a4 <TIM_Base_SetConfig+0xf0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d108      	bne.n	80043fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a25      	ldr	r2, [pc, #148]	; (8004498 <TIM_Base_SetConfig+0xe4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d01b      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800440c:	d017      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a22      	ldr	r2, [pc, #136]	; (800449c <TIM_Base_SetConfig+0xe8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a21      	ldr	r2, [pc, #132]	; (80044a0 <TIM_Base_SetConfig+0xec>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00f      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a20      	ldr	r2, [pc, #128]	; (80044a4 <TIM_Base_SetConfig+0xf0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00b      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a1f      	ldr	r2, [pc, #124]	; (80044a8 <TIM_Base_SetConfig+0xf4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d007      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a1e      	ldr	r2, [pc, #120]	; (80044ac <TIM_Base_SetConfig+0xf8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d003      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a1d      	ldr	r2, [pc, #116]	; (80044b0 <TIM_Base_SetConfig+0xfc>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d108      	bne.n	8004450 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a08      	ldr	r2, [pc, #32]	; (8004498 <TIM_Base_SetConfig+0xe4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d103      	bne.n	8004484 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	615a      	str	r2, [r3, #20]
}
 800448a:	bf00      	nop
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40010000 	.word	0x40010000
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800
 80044a4:	40000c00 	.word	0x40000c00
 80044a8:	40014000 	.word	0x40014000
 80044ac:	40014400 	.word	0x40014400
 80044b0:	40014800 	.word	0x40014800

080044b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f023 0201 	bic.w	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0303 	bic.w	r3, r3, #3
 80044ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f023 0302 	bic.w	r3, r3, #2
 80044fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a1c      	ldr	r2, [pc, #112]	; (800457c <TIM_OC1_SetConfig+0xc8>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d10c      	bne.n	800452a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f023 0308 	bic.w	r3, r3, #8
 8004516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f023 0304 	bic.w	r3, r3, #4
 8004528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a13      	ldr	r2, [pc, #76]	; (800457c <TIM_OC1_SetConfig+0xc8>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d111      	bne.n	8004556 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	621a      	str	r2, [r3, #32]
}
 8004570:	bf00      	nop
 8004572:	371c      	adds	r7, #28
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	40010000 	.word	0x40010000

08004580 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	f023 0210 	bic.w	r2, r3, #16
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	021b      	lsls	r3, r3, #8
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f023 0320 	bic.w	r3, r3, #32
 80045ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a1e      	ldr	r2, [pc, #120]	; (8004654 <TIM_OC2_SetConfig+0xd4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d10d      	bne.n	80045fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a15      	ldr	r2, [pc, #84]	; (8004654 <TIM_OC2_SetConfig+0xd4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d113      	bne.n	800462c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800460a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004612:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	621a      	str	r2, [r3, #32]
}
 8004646:	bf00      	nop
 8004648:	371c      	adds	r7, #28
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40010000 	.word	0x40010000

08004658 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0303 	bic.w	r3, r3, #3
 800468e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	021b      	lsls	r3, r3, #8
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <TIM_OC3_SetConfig+0xd0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d10d      	bne.n	80046d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a14      	ldr	r2, [pc, #80]	; (8004728 <TIM_OC3_SetConfig+0xd0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d113      	bne.n	8004702 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	621a      	str	r2, [r3, #32]
}
 800471c:	bf00      	nop
 800471e:	371c      	adds	r7, #28
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	40010000 	.word	0x40010000

0800472c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004776:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	031b      	lsls	r3, r3, #12
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a10      	ldr	r2, [pc, #64]	; (80047c8 <TIM_OC4_SetConfig+0x9c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d109      	bne.n	80047a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004792:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	019b      	lsls	r3, r3, #6
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	621a      	str	r2, [r3, #32]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40010000 	.word	0x40010000

080047cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	f023 0201 	bic.w	r2, r3, #1
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f023 030a 	bic.w	r3, r3, #10
 8004808:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	621a      	str	r2, [r3, #32]
}
 800481e:	bf00      	nop
 8004820:	371c      	adds	r7, #28
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800482a:	b480      	push	{r7}
 800482c:	b087      	sub	sp, #28
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	f023 0210 	bic.w	r2, r3, #16
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004854:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	031b      	lsls	r3, r3, #12
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004866:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	621a      	str	r2, [r3, #32]
}
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800488a:	b480      	push	{r7}
 800488c:	b085      	sub	sp, #20
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f043 0307 	orr.w	r3, r3, #7
 80048ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	609a      	str	r2, [r3, #8]
}
 80048b4:	bf00      	nop
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	021a      	lsls	r2, r3, #8
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	609a      	str	r2, [r3, #8]
}
 80048f4:	bf00      	nop
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004914:	2302      	movs	r3, #2
 8004916:	e050      	b.n	80049ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1c      	ldr	r2, [pc, #112]	; (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d018      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004964:	d013      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a18      	ldr	r2, [pc, #96]	; (80049cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00e      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a16      	ldr	r2, [pc, #88]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d009      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a15      	ldr	r2, [pc, #84]	; (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d004      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a13      	ldr	r2, [pc, #76]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d10c      	bne.n	80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004994:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	4313      	orrs	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40010000 	.word	0x40010000
 80049cc:	40000400 	.word	0x40000400
 80049d0:	40000800 	.word	0x40000800
 80049d4:	40000c00 	.word	0x40000c00
 80049d8:	40014000 	.word	0x40014000

080049dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e03d      	b.n	8004a74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e03f      	b.n	8004b12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fc faa6 	bl	8000ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2224      	movs	r2, #36	; 0x24
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ac2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fc7b 	bl	80053c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ad8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695a      	ldr	r2, [r3, #20]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ae8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004af8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b0ba      	sub	sp, #232	; 0xe8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004b5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10f      	bne.n	8004b82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b66:	f003 0320 	and.w	r3, r3, #32
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d009      	beq.n	8004b82 <HAL_UART_IRQHandler+0x66>
 8004b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b72:	f003 0320 	and.w	r3, r3, #32
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fb65 	bl	800524a <UART_Receive_IT>
      return;
 8004b80:	e256      	b.n	8005030 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 80de 	beq.w	8004d48 <HAL_UART_IRQHandler+0x22c>
 8004b8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d106      	bne.n	8004ba6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 80d1 	beq.w	8004d48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00b      	beq.n	8004bca <HAL_UART_IRQHandler+0xae>
 8004bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d005      	beq.n	8004bca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	f043 0201 	orr.w	r2, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00b      	beq.n	8004bee <HAL_UART_IRQHandler+0xd2>
 8004bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	f043 0202 	orr.w	r2, r3, #2
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00b      	beq.n	8004c12 <HAL_UART_IRQHandler+0xf6>
 8004bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d005      	beq.n	8004c12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f043 0204 	orr.w	r2, r3, #4
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d011      	beq.n	8004c42 <HAL_UART_IRQHandler+0x126>
 8004c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c22:	f003 0320 	and.w	r3, r3, #32
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d105      	bne.n	8004c36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d005      	beq.n	8004c42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	f043 0208 	orr.w	r2, r3, #8
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 81ed 	beq.w	8005026 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d008      	beq.n	8004c6a <HAL_UART_IRQHandler+0x14e>
 8004c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 faf0 	bl	800524a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c74:	2b40      	cmp	r3, #64	; 0x40
 8004c76:	bf0c      	ite	eq
 8004c78:	2301      	moveq	r3, #1
 8004c7a:	2300      	movne	r3, #0
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d103      	bne.n	8004c96 <HAL_UART_IRQHandler+0x17a>
 8004c8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d04f      	beq.n	8004d36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f9f8 	bl	800508c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca6:	2b40      	cmp	r3, #64	; 0x40
 8004ca8:	d141      	bne.n	8004d2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3314      	adds	r3, #20
 8004cb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cb8:	e853 3f00 	ldrex	r3, [r3]
 8004cbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004cc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3314      	adds	r3, #20
 8004cd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004cd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004cda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ce2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ce6:	e841 2300 	strex	r3, r2, [r1]
 8004cea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004cee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1d9      	bne.n	8004caa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d013      	beq.n	8004d26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	4a7d      	ldr	r2, [pc, #500]	; (8004ef8 <HAL_UART_IRQHandler+0x3dc>)
 8004d04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fc fc4f 	bl	80015ae <HAL_DMA_Abort_IT>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d016      	beq.n	8004d44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d20:	4610      	mov	r0, r2
 8004d22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d24:	e00e      	b.n	8004d44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f99a 	bl	8005060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d2c:	e00a      	b.n	8004d44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f996 	bl	8005060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d34:	e006      	b.n	8004d44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f992 	bl	8005060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d42:	e170      	b.n	8005026 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d44:	bf00      	nop
    return;
 8004d46:	e16e      	b.n	8005026 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	f040 814a 	bne.w	8004fe6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d56:	f003 0310 	and.w	r3, r3, #16
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 8143 	beq.w	8004fe6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 813c 	beq.w	8004fe6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60bb      	str	r3, [r7, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60bb      	str	r3, [r7, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	60bb      	str	r3, [r7, #8]
 8004d82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8e:	2b40      	cmp	r3, #64	; 0x40
 8004d90:	f040 80b4 	bne.w	8004efc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004da0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 8140 	beq.w	800502a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004db2:	429a      	cmp	r2, r3
 8004db4:	f080 8139 	bcs.w	800502a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dbe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dca:	f000 8088 	beq.w	8004ede <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	330c      	adds	r3, #12
 8004dd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	330c      	adds	r3, #12
 8004df6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004dfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004dfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e0a:	e841 2300 	strex	r3, r2, [r1]
 8004e0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1d9      	bne.n	8004dce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3314      	adds	r3, #20
 8004e20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e2c:	f023 0301 	bic.w	r3, r3, #1
 8004e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3314      	adds	r3, #20
 8004e3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e4a:	e841 2300 	strex	r3, r2, [r1]
 8004e4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1e1      	bne.n	8004e1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	3314      	adds	r3, #20
 8004e5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e60:	e853 3f00 	ldrex	r3, [r3]
 8004e64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3314      	adds	r3, #20
 8004e76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e82:	e841 2300 	strex	r3, r2, [r1]
 8004e86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e3      	bne.n	8004e56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	330c      	adds	r3, #12
 8004ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea6:	e853 3f00 	ldrex	r3, [r3]
 8004eaa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eae:	f023 0310 	bic.w	r3, r3, #16
 8004eb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	330c      	adds	r3, #12
 8004ebc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004ec0:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ec2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ec6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ec8:	e841 2300 	strex	r3, r2, [r1]
 8004ecc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1e3      	bne.n	8004e9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fc faf8 	bl	80014ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	4619      	mov	r1, r3
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f8c0 	bl	8005074 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ef4:	e099      	b.n	800502a <HAL_UART_IRQHandler+0x50e>
 8004ef6:	bf00      	nop
 8004ef8:	08005153 	.word	0x08005153
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 808b 	beq.w	800502e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004f18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 8086 	beq.w	800502e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	330c      	adds	r3, #12
 8004f28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	330c      	adds	r3, #12
 8004f42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004f46:	647a      	str	r2, [r7, #68]	; 0x44
 8004f48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f4e:	e841 2300 	strex	r3, r2, [r1]
 8004f52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1e3      	bne.n	8004f22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	3314      	adds	r3, #20
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	e853 3f00 	ldrex	r3, [r3]
 8004f68:	623b      	str	r3, [r7, #32]
   return(result);
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	f023 0301 	bic.w	r3, r3, #1
 8004f70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3314      	adds	r3, #20
 8004f7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f7e:	633a      	str	r2, [r7, #48]	; 0x30
 8004f80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1e3      	bne.n	8004f5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	e853 3f00 	ldrex	r3, [r3]
 8004fae:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0310 	bic.w	r3, r3, #16
 8004fb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	330c      	adds	r3, #12
 8004fc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004fc4:	61fa      	str	r2, [r7, #28]
 8004fc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc8:	69b9      	ldr	r1, [r7, #24]
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	e841 2300 	strex	r3, r2, [r1]
 8004fd0:	617b      	str	r3, [r7, #20]
   return(result);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e3      	bne.n	8004fa0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fdc:	4619      	mov	r1, r3
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f848 	bl	8005074 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fe4:	e023      	b.n	800502e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d009      	beq.n	8005006 <HAL_UART_IRQHandler+0x4ea>
 8004ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f8bb 	bl	800517a <UART_Transmit_IT>
    return;
 8005004:	e014      	b.n	8005030 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800500a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00e      	beq.n	8005030 <HAL_UART_IRQHandler+0x514>
 8005012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	d008      	beq.n	8005030 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f8fb 	bl	800521a <UART_EndTransmit_IT>
    return;
 8005024:	e004      	b.n	8005030 <HAL_UART_IRQHandler+0x514>
    return;
 8005026:	bf00      	nop
 8005028:	e002      	b.n	8005030 <HAL_UART_IRQHandler+0x514>
      return;
 800502a:	bf00      	nop
 800502c:	e000      	b.n	8005030 <HAL_UART_IRQHandler+0x514>
      return;
 800502e:	bf00      	nop
  }
}
 8005030:	37e8      	adds	r7, #232	; 0xe8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop

08005038 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800508c:	b480      	push	{r7}
 800508e:	b095      	sub	sp, #84	; 0x54
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	330c      	adds	r3, #12
 800509a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	330c      	adds	r3, #12
 80050b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050b4:	643a      	str	r2, [r7, #64]	; 0x40
 80050b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e5      	bne.n	8005094 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3314      	adds	r3, #20
 80050ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	e853 3f00 	ldrex	r3, [r3]
 80050d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f023 0301 	bic.w	r3, r3, #1
 80050de:	64bb      	str	r3, [r7, #72]	; 0x48
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3314      	adds	r3, #20
 80050e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f0:	e841 2300 	strex	r3, r2, [r1]
 80050f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e5      	bne.n	80050c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	2b01      	cmp	r3, #1
 8005102:	d119      	bne.n	8005138 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	330c      	adds	r3, #12
 800510a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	e853 3f00 	ldrex	r3, [r3]
 8005112:	60bb      	str	r3, [r7, #8]
   return(result);
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f023 0310 	bic.w	r3, r3, #16
 800511a:	647b      	str	r3, [r7, #68]	; 0x44
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	330c      	adds	r3, #12
 8005122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005124:	61ba      	str	r2, [r7, #24]
 8005126:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005128:	6979      	ldr	r1, [r7, #20]
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	e841 2300 	strex	r3, r2, [r1]
 8005130:	613b      	str	r3, [r7, #16]
   return(result);
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e5      	bne.n	8005104 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2220      	movs	r2, #32
 800513c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005146:	bf00      	nop
 8005148:	3754      	adds	r7, #84	; 0x54
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b084      	sub	sp, #16
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f7ff ff77 	bl	8005060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005172:	bf00      	nop
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800517a:	b480      	push	{r7}
 800517c:	b085      	sub	sp, #20
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b21      	cmp	r3, #33	; 0x21
 800518c:	d13e      	bne.n	800520c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005196:	d114      	bne.n	80051c2 <UART_Transmit_IT+0x48>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d110      	bne.n	80051c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	461a      	mov	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	1c9a      	adds	r2, r3, #2
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	621a      	str	r2, [r3, #32]
 80051c0:	e008      	b.n	80051d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	1c59      	adds	r1, r3, #1
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6211      	str	r1, [r2, #32]
 80051cc:	781a      	ldrb	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29b      	uxth	r3, r3
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	4619      	mov	r1, r3
 80051e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10f      	bne.n	8005208 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005206:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005208:	2300      	movs	r3, #0
 800520a:	e000      	b.n	800520e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800520c:	2302      	movs	r3, #2
  }
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b082      	sub	sp, #8
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005230:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2220      	movs	r2, #32
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7ff fefc 	bl	8005038 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b08c      	sub	sp, #48	; 0x30
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b22      	cmp	r3, #34	; 0x22
 800525c:	f040 80ab 	bne.w	80053b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005268:	d117      	bne.n	800529a <UART_Receive_IT+0x50>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d113      	bne.n	800529a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005272:	2300      	movs	r3, #0
 8005274:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	b29b      	uxth	r3, r3
 8005284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005288:	b29a      	uxth	r2, r3
 800528a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005292:	1c9a      	adds	r2, r3, #2
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	629a      	str	r2, [r3, #40]	; 0x28
 8005298:	e026      	b.n	80052e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80052a0:	2300      	movs	r3, #0
 80052a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ac:	d007      	beq.n	80052be <UART_Receive_IT+0x74>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10a      	bne.n	80052cc <UART_Receive_IT+0x82>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	e008      	b.n	80052de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	4619      	mov	r1, r3
 80052f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d15a      	bne.n	80053b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 0220 	bic.w	r2, r2, #32
 800530a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68da      	ldr	r2, [r3, #12]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800531a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	695a      	ldr	r2, [r3, #20]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0201 	bic.w	r2, r2, #1
 800532a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2220      	movs	r2, #32
 8005330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005338:	2b01      	cmp	r3, #1
 800533a:	d135      	bne.n	80053a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	330c      	adds	r3, #12
 8005348:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	613b      	str	r3, [r7, #16]
   return(result);
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f023 0310 	bic.w	r3, r3, #16
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	330c      	adds	r3, #12
 8005360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005362:	623a      	str	r2, [r7, #32]
 8005364:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005366:	69f9      	ldr	r1, [r7, #28]
 8005368:	6a3a      	ldr	r2, [r7, #32]
 800536a:	e841 2300 	strex	r3, r2, [r1]
 800536e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e5      	bne.n	8005342 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	2b10      	cmp	r3, #16
 8005382:	d10a      	bne.n	800539a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005384:	2300      	movs	r3, #0
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800539e:	4619      	mov	r1, r3
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7ff fe67 	bl	8005074 <HAL_UARTEx_RxEventCallback>
 80053a6:	e002      	b.n	80053ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff fe4f 	bl	800504c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053ae:	2300      	movs	r3, #0
 80053b0:	e002      	b.n	80053b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	e000      	b.n	80053b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80053b6:	2302      	movs	r3, #2
  }
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3730      	adds	r7, #48	; 0x30
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053c4:	b0c0      	sub	sp, #256	; 0x100
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053dc:	68d9      	ldr	r1, [r3, #12]
 80053de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	ea40 0301 	orr.w	r3, r0, r1
 80053e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	431a      	orrs	r2, r3
 80053f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	431a      	orrs	r2, r3
 8005400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800540c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005418:	f021 010c 	bic.w	r1, r1, #12
 800541c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005426:	430b      	orrs	r3, r1
 8005428:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800542a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800543a:	6999      	ldr	r1, [r3, #24]
 800543c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	ea40 0301 	orr.w	r3, r0, r1
 8005446:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	4b8f      	ldr	r3, [pc, #572]	; (800568c <UART_SetConfig+0x2cc>)
 8005450:	429a      	cmp	r2, r3
 8005452:	d005      	beq.n	8005460 <UART_SetConfig+0xa0>
 8005454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	4b8d      	ldr	r3, [pc, #564]	; (8005690 <UART_SetConfig+0x2d0>)
 800545c:	429a      	cmp	r2, r3
 800545e:	d104      	bne.n	800546a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005460:	f7fe fcd8 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 8005464:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005468:	e003      	b.n	8005472 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800546a:	f7fe fcbf 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 800546e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800547c:	f040 810c 	bne.w	8005698 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005484:	2200      	movs	r2, #0
 8005486:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800548a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800548e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005492:	4622      	mov	r2, r4
 8005494:	462b      	mov	r3, r5
 8005496:	1891      	adds	r1, r2, r2
 8005498:	65b9      	str	r1, [r7, #88]	; 0x58
 800549a:	415b      	adcs	r3, r3
 800549c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800549e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80054a2:	4621      	mov	r1, r4
 80054a4:	eb12 0801 	adds.w	r8, r2, r1
 80054a8:	4629      	mov	r1, r5
 80054aa:	eb43 0901 	adc.w	r9, r3, r1
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	f04f 0300 	mov.w	r3, #0
 80054b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054c2:	4690      	mov	r8, r2
 80054c4:	4699      	mov	r9, r3
 80054c6:	4623      	mov	r3, r4
 80054c8:	eb18 0303 	adds.w	r3, r8, r3
 80054cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80054d0:	462b      	mov	r3, r5
 80054d2:	eb49 0303 	adc.w	r3, r9, r3
 80054d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80054da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80054ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80054ee:	460b      	mov	r3, r1
 80054f0:	18db      	adds	r3, r3, r3
 80054f2:	653b      	str	r3, [r7, #80]	; 0x50
 80054f4:	4613      	mov	r3, r2
 80054f6:	eb42 0303 	adc.w	r3, r2, r3
 80054fa:	657b      	str	r3, [r7, #84]	; 0x54
 80054fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005500:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005504:	f7fa fe68 	bl	80001d8 <__aeabi_uldivmod>
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	4b61      	ldr	r3, [pc, #388]	; (8005694 <UART_SetConfig+0x2d4>)
 800550e:	fba3 2302 	umull	r2, r3, r3, r2
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	011c      	lsls	r4, r3, #4
 8005516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800551a:	2200      	movs	r2, #0
 800551c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005520:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005524:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005528:	4642      	mov	r2, r8
 800552a:	464b      	mov	r3, r9
 800552c:	1891      	adds	r1, r2, r2
 800552e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005530:	415b      	adcs	r3, r3
 8005532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005534:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005538:	4641      	mov	r1, r8
 800553a:	eb12 0a01 	adds.w	sl, r2, r1
 800553e:	4649      	mov	r1, r9
 8005540:	eb43 0b01 	adc.w	fp, r3, r1
 8005544:	f04f 0200 	mov.w	r2, #0
 8005548:	f04f 0300 	mov.w	r3, #0
 800554c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005550:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005554:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005558:	4692      	mov	sl, r2
 800555a:	469b      	mov	fp, r3
 800555c:	4643      	mov	r3, r8
 800555e:	eb1a 0303 	adds.w	r3, sl, r3
 8005562:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005566:	464b      	mov	r3, r9
 8005568:	eb4b 0303 	adc.w	r3, fp, r3
 800556c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800557c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005580:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005584:	460b      	mov	r3, r1
 8005586:	18db      	adds	r3, r3, r3
 8005588:	643b      	str	r3, [r7, #64]	; 0x40
 800558a:	4613      	mov	r3, r2
 800558c:	eb42 0303 	adc.w	r3, r2, r3
 8005590:	647b      	str	r3, [r7, #68]	; 0x44
 8005592:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005596:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800559a:	f7fa fe1d 	bl	80001d8 <__aeabi_uldivmod>
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	4611      	mov	r1, r2
 80055a4:	4b3b      	ldr	r3, [pc, #236]	; (8005694 <UART_SetConfig+0x2d4>)
 80055a6:	fba3 2301 	umull	r2, r3, r3, r1
 80055aa:	095b      	lsrs	r3, r3, #5
 80055ac:	2264      	movs	r2, #100	; 0x64
 80055ae:	fb02 f303 	mul.w	r3, r2, r3
 80055b2:	1acb      	subs	r3, r1, r3
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80055ba:	4b36      	ldr	r3, [pc, #216]	; (8005694 <UART_SetConfig+0x2d4>)
 80055bc:	fba3 2302 	umull	r2, r3, r3, r2
 80055c0:	095b      	lsrs	r3, r3, #5
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055c8:	441c      	add	r4, r3
 80055ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055ce:	2200      	movs	r2, #0
 80055d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80055d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80055dc:	4642      	mov	r2, r8
 80055de:	464b      	mov	r3, r9
 80055e0:	1891      	adds	r1, r2, r2
 80055e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80055e4:	415b      	adcs	r3, r3
 80055e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055ec:	4641      	mov	r1, r8
 80055ee:	1851      	adds	r1, r2, r1
 80055f0:	6339      	str	r1, [r7, #48]	; 0x30
 80055f2:	4649      	mov	r1, r9
 80055f4:	414b      	adcs	r3, r1
 80055f6:	637b      	str	r3, [r7, #52]	; 0x34
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005604:	4659      	mov	r1, fp
 8005606:	00cb      	lsls	r3, r1, #3
 8005608:	4651      	mov	r1, sl
 800560a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800560e:	4651      	mov	r1, sl
 8005610:	00ca      	lsls	r2, r1, #3
 8005612:	4610      	mov	r0, r2
 8005614:	4619      	mov	r1, r3
 8005616:	4603      	mov	r3, r0
 8005618:	4642      	mov	r2, r8
 800561a:	189b      	adds	r3, r3, r2
 800561c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005620:	464b      	mov	r3, r9
 8005622:	460a      	mov	r2, r1
 8005624:	eb42 0303 	adc.w	r3, r2, r3
 8005628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800562c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005638:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800563c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005640:	460b      	mov	r3, r1
 8005642:	18db      	adds	r3, r3, r3
 8005644:	62bb      	str	r3, [r7, #40]	; 0x28
 8005646:	4613      	mov	r3, r2
 8005648:	eb42 0303 	adc.w	r3, r2, r3
 800564c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800564e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005652:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005656:	f7fa fdbf 	bl	80001d8 <__aeabi_uldivmod>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4b0d      	ldr	r3, [pc, #52]	; (8005694 <UART_SetConfig+0x2d4>)
 8005660:	fba3 1302 	umull	r1, r3, r3, r2
 8005664:	095b      	lsrs	r3, r3, #5
 8005666:	2164      	movs	r1, #100	; 0x64
 8005668:	fb01 f303 	mul.w	r3, r1, r3
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	3332      	adds	r3, #50	; 0x32
 8005672:	4a08      	ldr	r2, [pc, #32]	; (8005694 <UART_SetConfig+0x2d4>)
 8005674:	fba2 2303 	umull	r2, r3, r2, r3
 8005678:	095b      	lsrs	r3, r3, #5
 800567a:	f003 0207 	and.w	r2, r3, #7
 800567e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4422      	add	r2, r4
 8005686:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005688:	e105      	b.n	8005896 <UART_SetConfig+0x4d6>
 800568a:	bf00      	nop
 800568c:	40011000 	.word	0x40011000
 8005690:	40011400 	.word	0x40011400
 8005694:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800569c:	2200      	movs	r2, #0
 800569e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80056a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80056aa:	4642      	mov	r2, r8
 80056ac:	464b      	mov	r3, r9
 80056ae:	1891      	adds	r1, r2, r2
 80056b0:	6239      	str	r1, [r7, #32]
 80056b2:	415b      	adcs	r3, r3
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
 80056b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056ba:	4641      	mov	r1, r8
 80056bc:	1854      	adds	r4, r2, r1
 80056be:	4649      	mov	r1, r9
 80056c0:	eb43 0501 	adc.w	r5, r3, r1
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	00eb      	lsls	r3, r5, #3
 80056ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056d2:	00e2      	lsls	r2, r4, #3
 80056d4:	4614      	mov	r4, r2
 80056d6:	461d      	mov	r5, r3
 80056d8:	4643      	mov	r3, r8
 80056da:	18e3      	adds	r3, r4, r3
 80056dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056e0:	464b      	mov	r3, r9
 80056e2:	eb45 0303 	adc.w	r3, r5, r3
 80056e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056fa:	f04f 0200 	mov.w	r2, #0
 80056fe:	f04f 0300 	mov.w	r3, #0
 8005702:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005706:	4629      	mov	r1, r5
 8005708:	008b      	lsls	r3, r1, #2
 800570a:	4621      	mov	r1, r4
 800570c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005710:	4621      	mov	r1, r4
 8005712:	008a      	lsls	r2, r1, #2
 8005714:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005718:	f7fa fd5e 	bl	80001d8 <__aeabi_uldivmod>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4b60      	ldr	r3, [pc, #384]	; (80058a4 <UART_SetConfig+0x4e4>)
 8005722:	fba3 2302 	umull	r2, r3, r3, r2
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	011c      	lsls	r4, r3, #4
 800572a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800572e:	2200      	movs	r2, #0
 8005730:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005734:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005738:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800573c:	4642      	mov	r2, r8
 800573e:	464b      	mov	r3, r9
 8005740:	1891      	adds	r1, r2, r2
 8005742:	61b9      	str	r1, [r7, #24]
 8005744:	415b      	adcs	r3, r3
 8005746:	61fb      	str	r3, [r7, #28]
 8005748:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800574c:	4641      	mov	r1, r8
 800574e:	1851      	adds	r1, r2, r1
 8005750:	6139      	str	r1, [r7, #16]
 8005752:	4649      	mov	r1, r9
 8005754:	414b      	adcs	r3, r1
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	f04f 0200 	mov.w	r2, #0
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005764:	4659      	mov	r1, fp
 8005766:	00cb      	lsls	r3, r1, #3
 8005768:	4651      	mov	r1, sl
 800576a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800576e:	4651      	mov	r1, sl
 8005770:	00ca      	lsls	r2, r1, #3
 8005772:	4610      	mov	r0, r2
 8005774:	4619      	mov	r1, r3
 8005776:	4603      	mov	r3, r0
 8005778:	4642      	mov	r2, r8
 800577a:	189b      	adds	r3, r3, r2
 800577c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005780:	464b      	mov	r3, r9
 8005782:	460a      	mov	r2, r1
 8005784:	eb42 0303 	adc.w	r3, r2, r3
 8005788:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	67bb      	str	r3, [r7, #120]	; 0x78
 8005796:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80057a4:	4649      	mov	r1, r9
 80057a6:	008b      	lsls	r3, r1, #2
 80057a8:	4641      	mov	r1, r8
 80057aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057ae:	4641      	mov	r1, r8
 80057b0:	008a      	lsls	r2, r1, #2
 80057b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80057b6:	f7fa fd0f 	bl	80001d8 <__aeabi_uldivmod>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4b39      	ldr	r3, [pc, #228]	; (80058a4 <UART_SetConfig+0x4e4>)
 80057c0:	fba3 1302 	umull	r1, r3, r3, r2
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	2164      	movs	r1, #100	; 0x64
 80057c8:	fb01 f303 	mul.w	r3, r1, r3
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	3332      	adds	r3, #50	; 0x32
 80057d2:	4a34      	ldr	r2, [pc, #208]	; (80058a4 <UART_SetConfig+0x4e4>)
 80057d4:	fba2 2303 	umull	r2, r3, r2, r3
 80057d8:	095b      	lsrs	r3, r3, #5
 80057da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057de:	441c      	add	r4, r3
 80057e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057e4:	2200      	movs	r2, #0
 80057e6:	673b      	str	r3, [r7, #112]	; 0x70
 80057e8:	677a      	str	r2, [r7, #116]	; 0x74
 80057ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80057ee:	4642      	mov	r2, r8
 80057f0:	464b      	mov	r3, r9
 80057f2:	1891      	adds	r1, r2, r2
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	415b      	adcs	r3, r3
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057fe:	4641      	mov	r1, r8
 8005800:	1851      	adds	r1, r2, r1
 8005802:	6039      	str	r1, [r7, #0]
 8005804:	4649      	mov	r1, r9
 8005806:	414b      	adcs	r3, r1
 8005808:	607b      	str	r3, [r7, #4]
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	f04f 0300 	mov.w	r3, #0
 8005812:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005816:	4659      	mov	r1, fp
 8005818:	00cb      	lsls	r3, r1, #3
 800581a:	4651      	mov	r1, sl
 800581c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005820:	4651      	mov	r1, sl
 8005822:	00ca      	lsls	r2, r1, #3
 8005824:	4610      	mov	r0, r2
 8005826:	4619      	mov	r1, r3
 8005828:	4603      	mov	r3, r0
 800582a:	4642      	mov	r2, r8
 800582c:	189b      	adds	r3, r3, r2
 800582e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005830:	464b      	mov	r3, r9
 8005832:	460a      	mov	r2, r1
 8005834:	eb42 0303 	adc.w	r3, r2, r3
 8005838:	66fb      	str	r3, [r7, #108]	; 0x6c
 800583a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	663b      	str	r3, [r7, #96]	; 0x60
 8005844:	667a      	str	r2, [r7, #100]	; 0x64
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	f04f 0300 	mov.w	r3, #0
 800584e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005852:	4649      	mov	r1, r9
 8005854:	008b      	lsls	r3, r1, #2
 8005856:	4641      	mov	r1, r8
 8005858:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800585c:	4641      	mov	r1, r8
 800585e:	008a      	lsls	r2, r1, #2
 8005860:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005864:	f7fa fcb8 	bl	80001d8 <__aeabi_uldivmod>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4b0d      	ldr	r3, [pc, #52]	; (80058a4 <UART_SetConfig+0x4e4>)
 800586e:	fba3 1302 	umull	r1, r3, r3, r2
 8005872:	095b      	lsrs	r3, r3, #5
 8005874:	2164      	movs	r1, #100	; 0x64
 8005876:	fb01 f303 	mul.w	r3, r1, r3
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	3332      	adds	r3, #50	; 0x32
 8005880:	4a08      	ldr	r2, [pc, #32]	; (80058a4 <UART_SetConfig+0x4e4>)
 8005882:	fba2 2303 	umull	r2, r3, r2, r3
 8005886:	095b      	lsrs	r3, r3, #5
 8005888:	f003 020f 	and.w	r2, r3, #15
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4422      	add	r2, r4
 8005894:	609a      	str	r2, [r3, #8]
}
 8005896:	bf00      	nop
 8005898:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800589c:	46bd      	mov	sp, r7
 800589e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058a2:	bf00      	nop
 80058a4:	51eb851f 	.word	0x51eb851f

080058a8 <__libc_init_array>:
 80058a8:	b570      	push	{r4, r5, r6, lr}
 80058aa:	4d0d      	ldr	r5, [pc, #52]	; (80058e0 <__libc_init_array+0x38>)
 80058ac:	4c0d      	ldr	r4, [pc, #52]	; (80058e4 <__libc_init_array+0x3c>)
 80058ae:	1b64      	subs	r4, r4, r5
 80058b0:	10a4      	asrs	r4, r4, #2
 80058b2:	2600      	movs	r6, #0
 80058b4:	42a6      	cmp	r6, r4
 80058b6:	d109      	bne.n	80058cc <__libc_init_array+0x24>
 80058b8:	4d0b      	ldr	r5, [pc, #44]	; (80058e8 <__libc_init_array+0x40>)
 80058ba:	4c0c      	ldr	r4, [pc, #48]	; (80058ec <__libc_init_array+0x44>)
 80058bc:	f000 f820 	bl	8005900 <_init>
 80058c0:	1b64      	subs	r4, r4, r5
 80058c2:	10a4      	asrs	r4, r4, #2
 80058c4:	2600      	movs	r6, #0
 80058c6:	42a6      	cmp	r6, r4
 80058c8:	d105      	bne.n	80058d6 <__libc_init_array+0x2e>
 80058ca:	bd70      	pop	{r4, r5, r6, pc}
 80058cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80058d0:	4798      	blx	r3
 80058d2:	3601      	adds	r6, #1
 80058d4:	e7ee      	b.n	80058b4 <__libc_init_array+0xc>
 80058d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058da:	4798      	blx	r3
 80058dc:	3601      	adds	r6, #1
 80058de:	e7f2      	b.n	80058c6 <__libc_init_array+0x1e>
 80058e0:	08005938 	.word	0x08005938
 80058e4:	08005938 	.word	0x08005938
 80058e8:	08005938 	.word	0x08005938
 80058ec:	0800593c 	.word	0x0800593c

080058f0 <memset>:
 80058f0:	4402      	add	r2, r0
 80058f2:	4603      	mov	r3, r0
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d100      	bne.n	80058fa <memset+0xa>
 80058f8:	4770      	bx	lr
 80058fa:	f803 1b01 	strb.w	r1, [r3], #1
 80058fe:	e7f9      	b.n	80058f4 <memset+0x4>

08005900 <_init>:
 8005900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005902:	bf00      	nop
 8005904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005906:	bc08      	pop	{r3}
 8005908:	469e      	mov	lr, r3
 800590a:	4770      	bx	lr

0800590c <_fini>:
 800590c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590e:	bf00      	nop
 8005910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005912:	bc08      	pop	{r3}
 8005914:	469e      	mov	lr, r3
 8005916:	4770      	bx	lr
